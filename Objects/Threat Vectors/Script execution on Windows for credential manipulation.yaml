name: Script execution on Windows for credential manipulation
criticality: Medium
references:
  public:
    1: https://stackoverflow.com/questions/50694077/use-python-and-cmdkey-add-in-windows-10
    2: https://swharden.com/blog/2021-05-15-python-credentials/
    3: https://www.realpythonproject.com/3-ways-to-store-and-read-credentials-locally-in-python/
    4: https://stackoverflow.com/questions/44643443/how-do-you-configure-python-keyring-to-pull-credentials-from-windows-credential
    5: https://www.mandiant.com/resources/blog/apt29-windows-credential-roaming
    6: https://www.mandiant.com/resources/blog/apt37-overlooked-north-korean-actor
    7: https://www.microsoft.com/en-us/security/blog/2020/09/10/strontium-detecting-new-patters-credential-harvesting/
    8: https://github.com/Neo23x0/signature-base/blob/master/yara/apt_apt28.yar

metadata:
  uuid: a566e405-e9db-475f-8447-7875fa127716
  schema: tvm::2.0
  tlp: clear
  version: 5
  created: 2023-01-26
  modified: 2025-10-01
  organisation:
    uuid: 56b0a0f0-b0bc-47d9-bb46-02f80ae2065a
    name: EC DIGIT CSOC

threat:
  actors:
    - name: att&ck::G0016 #[Enterprise] APT29, Blue Kitsune, Cozy Bear, CozyDuke, Dark Halo, IRON HEMLOCK, IRON RITUAL, Midnight Blizzard, NOBELIUM, NobleBaron, SolarStorm, The Dukes, UNC2452, UNC3524, YTTRIUM
    - name: misp::2ee5ed7a-c4d0-40be-a837-20817474a15b #UNC2452, DarkHalo, StellarParticle, NOBELIUM, Solar Phoenix, Midnight Blizzard
    - name: att&ck::G0007 #[Enterprise] APT28, FROZENLAKE, Fancy Bear, Forest Blizzard, Group 74, IRON TWILIGHT, Pawn Storm, SNAKEMACKEREL, STRONTIUM, Sednit, Sofacy, Swallowtail, TG-4127, Threat Group-4127, Tsar Team
    - name: misp::5b4ee3ea-eee3-4c8e-8323-85ae32658754 #APT28, Pawn Storm, FANCY BEAR, Sednit, SNAKEMACKEREL, Tsar Team, TG-4127, STRONTIUM, Swallowtail, IRON TWILIGHT, Group 74, SIG40, Grizzly Steppe, G0007, ATK5, Fighting Ursa, ITG05, Blue Athena, TA422, T-APT-12, APT-C-20, UAC-0028, FROZENLAKE, Sofacy, Forest Blizzard, BlueDelta, Fancy Bear, GruesomeLarch
    - name: att&ck::G0114 #[Enterprise] Chimera
    - name: att&ck::G0102 #[Enterprise] Wizard Spider, DEV-0193, FIN12, GOLD BLACKBURN, Grim Spider, ITG23, Periwinkle Tempest, TEMP.MixMaster, UNC1878
    - name: misp::3c2bb7d7-a085-4594-adc7-4a20cf724abb #UNC1878
    - name: att&ck::G0037 #[Enterprise] FIN6, Camouflage Tempest, ITG08, Magecart Group 6, Skeleton Spider, TAAL
    - name: misp::647894f6-1723-4cba-aba4-0ef0966d5302 #FIN6, SKELETON SPIDER, ITG08, MageCart Group 6, White Giant, GOLD FRANKLIN, ATK88, G0037, Camouflage Tempest, TA4557
    - name: att&ck::G0046 #[Enterprise] FIN7, Carbon Spider, ELBRUS, GOLD NIAGARA, ITG14, Sangria Tempest
    - name: misp::00220228-a5a4-4032-a30d-826bb55aa3fb #FIN7, CARBON SPIDER, GOLD NIAGARA, Calcium, ATK32, G0046, G0008, Coreid, Carbanak, Sangria Tempest, ELBRUS, Carbon Spider, JokerStash
    - name: att&ck::G0050 #[Enterprise] APT32, APT-C-00, BISMUTH, Canvas Cyclone, OceanLotus, SeaLotus
    - name: misp::aa29ae56-e54b-47a2-ad16-d3ab0242d5d7 #APT32, OceanLotus Group, Ocean Lotus, OceanLotus, Cobalt Kitty, APT-C-00, SeaLotus, Sea Lotus, APT-32, APT 32, Ocean Buffalo, POND LOACH, TIN WOODLAWN, BISMUTH, ATK17, G0050, Canvas Cyclone
    - name: att&ck::G0067 #[Enterprise] APT37, Group123, InkySquid, Reaper, Ricochet Chollima, ScarCruft, TEMP.Reaper
    - name: misp::50cd027f-df14-40b2-aa22-bf5de5061163 #APT37, APT 37, Group 123, Group123, InkySquid, Operation Daybreak, Operation Erebus, Reaper Group, Reaper, Red Eyes, Ricochet Chollima, ScarCruft, Venus 121, ATK4, G0067, Moldy Pisces, APT-C-28
  killchain: Execution
  att&ck:
    - T1098.001
    - T1059.003
    - T1555
    - T1003
  domains:
    - Enterprise
    - Public Cloud
    - Private Cloud
  terrain: |
    Requires an already compromised Windows endpoint and administrator
    access to Windows command line interface.
  targets:
    - API Endpoints
    - Desktop
    - Laptop
    - End-user
    - Control Server
    - Remote access
    - System admin
    - Server Authentication
    - Public-Facing Servers
    - Web Application Servers
  platforms:
    - Windows
    - Active Directory
  severity: Moderate incident
  leverage:
    - Tampering
  impact:
    - Nuisance
  viability: Likely
  description: |
    One example of script execution for credential manipulation is the use of a
    Python or other type of script to access and read/change a user's credentials
    stored in a file, such as Windows Credential Manager. 
    The script could be designed to read the file, decrypt the stored
    credentials, make changes to the username or password, and then save the
    updated information back to the file. Threat actors are using also different
    cmd utilities in combination with script commands to gain or modify user's
    credentials. For example, such utilities can be cmdkey, keyring libraries
    and others.

    Example for a script that can manipulate a credentials file:

    import os
    import json
    import base64

    # Function to encrypt the credentials
    def encrypt_credentials(credentials):
    encoded_credentials = base64.b64encode(json.dumps(credentials).encode())
    return encoded_credentials.decode()

    # Function to decrypt the credentials
    def decrypt_credentials(encoded_credentials):
    decoded_credentials = json.loads(base64.b64decode(encoded_credentials).decode())
    return decoded_credentials

    # Function to update the credentials
    def update_credentials(username, password):
    # Reading the credentials from file
    with open("credentials.txt", "r") as file:
        encoded_credentials = file.read()
    # Decrypting the credentials
    credentials = decrypt_credentials(encoded_credentials)
    # Updating the username and password
    credentials["username"] = username
    credentials["password"] = password
    # Encrypting the updated credentials
    encoded_credentials = encrypt_credentials(credentials)
    # Saving the updated credentials to file
    with open("credentials.txt", "w") as file:
        file.write(encoded_credentials)

    # Function call to update the credentials
    update_credentials("new_username", "new_password")

    Example for python code which extracts user's credentials with cmdkey utility:

    import os

    os.system('cmdkey /add:TERMSRV/X.X.X.X/user:Administrator /pass:<password>')
    os.system('mstsc /v:X.X.X.X')
    os.system('cmdkey /delete:TERMSRV/X.X.X.X')

    Example for keyring library python script for credential manipulation.
    Keyring libraries are used to manage the credentials. In the script threat 
    actors are using different functions like: set_credentials(),
    get_credentials() and update_credentials() to set, retrieve or change
    username and password for the specific user or service. Keyring library
    uses the operating system's secure storage to store the credentials. 
    This secure storage provides credential encryption and the passwords are
    not stored in plain text.

    import keyring

    # Function to set the credentials
    def set_credentials(username, password):
    keyring.set_password("service_name", username, password)

    # Function to get the credentials
    def get_credentials():
    username = input("Enter your username: ")
    password = keyring.get_password("service_name", username)
    return username, password

    Some credential stealers, for example Ryuk and TrickBot are based on custom
    scripts. For example, TrickBot is configured to use network propagation
    script modules (sharedll and tabdll) that rely on SMB and can harvest
    credentials and propagate to additional systems in the network.


