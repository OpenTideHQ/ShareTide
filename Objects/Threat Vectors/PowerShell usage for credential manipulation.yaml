name: PowerShell usage for credential manipulation
criticality: Medium
references:
  public:
    1: https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.security/get-credential?view=powershell-7.3
    2: https://stackoverflow.com/questions/29103238/accessing-windows-credential-manager-from-powershell
    3: https://github.com/davotronic5000/PowerShell_Credential_Manager
    4: https://www.powershellgallery.com/packages/CredentialManager/1.0
    5: https://adamtheautomator.com/powershell-get-credential/
    6: https://www.zdnet.com/article/fin6-returns-to-attack-retailers-in-us-europe/
    7: https://www.fbi.gov/contact-us/field-offices/seattle/news/stories/how-cyber-crime-group-fin7-attacked-and-stole-data-from-hundreds-of-us-companies
    8: https://1library.net/article/apt-attack-patterns-sequences-case-study-fancy-bear.y93091wy
    9: https://www.rewterz.com/rewterz-news/apt29-exploited-the-windows-credential-roaming-to-compromise-a-diplomatic-entity
  #internal:
    #a: 
  #restricted:
    #A: 
  #reports:
    #-

metadata:
  uuid: e3d7cb59-7aca-4c3d-b488-48c785930b6d
  schema: tvm::2.0
  tlp: clear
  version: 3
  created: 2023-01-27
  modified: 2023-01-27
  organisation:
    uuid: 56b0a0f0-b0bc-47d9-bb46-02f80ae2065a
    name: EC DIGIT CSOC

threat:
  actors:
    - name: att&ck::G0016 #[Enterprise] APT29, Blue Kitsune, Cozy Bear, CozyDuke, Dark Halo, IRON HEMLOCK, IRON RITUAL, Midnight Blizzard, NOBELIUM, NobleBaron, SolarStorm, The Dukes, UNC2452, UNC3524, YTTRIUM
    - name: misp::2ee5ed7a-c4d0-40be-a837-20817474a15b #UNC2452, DarkHalo, StellarParticle, NOBELIUM, Solar Phoenix, Midnight Blizzard
    - name: att&ck::G0007 #[Enterprise] APT28, FROZENLAKE, Fancy Bear, Forest Blizzard, Group 74, IRON TWILIGHT, Pawn Storm, SNAKEMACKEREL, STRONTIUM, Sednit, Sofacy, Swallowtail, TG-4127, Threat Group-4127, Tsar Team
    - name: misp::5b4ee3ea-eee3-4c8e-8323-85ae32658754 #APT28, Pawn Storm, FANCY BEAR, Sednit, SNAKEMACKEREL, Tsar Team, TG-4127, STRONTIUM, Swallowtail, IRON TWILIGHT, Group 74, SIG40, Grizzly Steppe, G0007, ATK5, Fighting Ursa, ITG05, Blue Athena, TA422, T-APT-12, APT-C-20, UAC-0028, FROZENLAKE, Sofacy, Forest Blizzard, BlueDelta, Fancy Bear, GruesomeLarch
    - name: att&ck::G0114 #[Enterprise] Chimera
    - name: att&ck::G0102 #[Enterprise] Wizard Spider, DEV-0193, FIN12, GOLD BLACKBURN, Grim Spider, ITG23, Periwinkle Tempest, TEMP.MixMaster, UNC1878
    - name: misp::3c2bb7d7-a085-4594-adc7-4a20cf724abb #UNC1878
    - name: att&ck::G0037 #[Enterprise] FIN6, Camouflage Tempest, ITG08, Magecart Group 6, Skeleton Spider, TAAL
    - name: misp::647894f6-1723-4cba-aba4-0ef0966d5302 #FIN6, SKELETON SPIDER, ITG08, MageCart Group 6, White Giant, GOLD FRANKLIN, ATK88, G0037, Camouflage Tempest, TA4557
    - name: att&ck::G0046 #[Enterprise] FIN7, Carbon Spider, ELBRUS, GOLD NIAGARA, ITG14, Sangria Tempest
    - name: misp::00220228-a5a4-4032-a30d-826bb55aa3fb #FIN7, CARBON SPIDER, GOLD NIAGARA, Calcium, ATK32, G0046, G0008, Coreid, Carbanak, Sangria Tempest, ELBRUS, Carbon Spider, JokerStash
    - name: att&ck::G0050 #[Enterprise] APT32, APT-C-00, BISMUTH, Canvas Cyclone, OceanLotus, SeaLotus
    - name: misp::aa29ae56-e54b-47a2-ad16-d3ab0242d5d7 #APT32, OceanLotus Group, Ocean Lotus, OceanLotus, Cobalt Kitty, APT-C-00, SeaLotus, Sea Lotus, APT-32, APT 32, Ocean Buffalo, POND LOACH, TIN WOODLAWN, BISMUTH, ATK17, G0050, Canvas Cyclone
    - name: att&ck::G0067 #[Enterprise] APT37, Group123, InkySquid, Reaper, Ricochet Chollima, ScarCruft, TEMP.Reaper
    - name: misp::50cd027f-df14-40b2-aa22-bf5de5061163 #APT37, APT 37, Group 123, Group123, InkySquid, Operation Daybreak, Operation Erebus, Reaper Group, Reaper, Red Eyes, Ricochet Chollima, ScarCruft, Venus 121, ATK4, G0067, Moldy Pisces, APT-C-28
  killchain: Execution
  #Discovery 
  att&ck:
    - T1098.001
    - T1059.001
  domains:
    - Enterprise
    - Public Cloud
    - Private Cloud
  terrain: |
    Requires an already compromised Windows endpoint and in some cases
    administrative privilege access to a PowerShell console.
  targets:
    - API Endpoints
    - Desktop
    - Laptop
    - End-user
    - Control Server
    - Remote access
    - System admin
    - Server Authentication
    - Public-Facing Servers
    - Web Application Servers
  platforms:
    - Windows
    - Active Directory
    - PowerShell
  severity: Moderate incident
  leverage:
    - Tampering
  impact:
    - Nuisance
  viability: Likely
  description: |
    Threat actors are using different methods to manipulate user's credentials.
    One example of credential manipulation is by using PowerShell commands or
    scripts. For example, PowerShell cmdlets or custom section of script can be
    used to gather credentials from Windows Credential Manager or other
    credentials stores in the system.

    Example for access Windows Credential Manager credentials with PowerShell:

    Install-Module CredentialManager -force
    New-StoredCredential -Target $url -Username $ENV:Username -Pass <parameter>
    Get-StoredCredential -Target <target>

    Or threat actors can use ready PowerShell module for Credential Manager:

    PS> Save-Module -Name CredentialManager -Path
    PS> Install-Module -Name CredentialManager -RequiredVersion <the_version>

    Example for Get-Credential cmdlet. This is a PS command which prompts a
    user for his username and password, and then stores those credentials in a
    $Cred variable. The stored credentials are then passed to the Get-WmiObject
    cmdlet as the -Credential parameter, allowing the script to connect to the
    specified remote computer using those credentials.
    
    Example: 

    $Cred = Get-Credential
    Get-WmiObject -Class Win32_OperatingSystem -ComputerName $Computer -Credential $Cred

    With a Credential parameter threat actors can pass the $credential variable
    to other different commands.

    Example:

    PS> $credential.UserName
    root

    GetNetworkCredential() method is used to obtain the user's passwords.
    A threat actor can append a "Password" property in the end of
    GetNetworkCredential() method to display the passwords in cleartext.

    Example:

    PS> $credential.GetNetworkCredential()

    UserName Domain
    -------- ------
    root

    PS51> $credential.GetNetworkCredential().Password
    <password_in_clear_text>
