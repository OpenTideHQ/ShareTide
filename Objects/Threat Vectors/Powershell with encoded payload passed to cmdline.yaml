name: Powershell with encoded payload passed to cmdline
criticality: Medium
references:
  public:
    1: https://mikefrobbins.com/2017/06/15/simple-obfuscation-with-powershell-using-base64-encoding/
    2: https://stackoverflow.com/questions/6295957/using-powershell-encodedcommand-to-pass-parameters
    3: https://www.systanddeploy.com/2021/01/encode-script-or-command-to-base64-and.html
  #internal:
    #a: https://conf.s.cec.eu.int/pages/viewpage.action?pageId=151270003 #(Internal Hunt Confluence page)
  #reports:
    #-

metadata:
  uuid: bdc58fee-8da6-4fc9-8fbd-30f8fd156bc7
  schema: tvm::2.0
  version: 1
  created: 2024-04-23
  modified: 2024-04-24
  tlp: clear
  author: ec-digit-catch@ec.europa.eu
  #contributors:
    #-

threat:
  actors:
    - f7df0494-027a-4b6d-8981-b770ffd8a560 #Sofacy|FANCY BEAR/APT28/Pawn Storm/Sednit/Tsar t...
    - 718030b0-1f8a-45fd-9288-ba39ce638dc7 #Emissary Panda|APT27/Earth Smilodon/LuckyMouse/B...
  killchain: Defense Evasion
  att&ck:
    - T1027.010 # Obfuscated Files or Information: Command Obfuscation
    - T1059 # Command and Scripting Interpreter
    - T1059.001 # Command and Scripting Interpreter: PowerShell
    - T1140 # Deobfuscate/Decode Files or Information
    - T1068 # Exploitation for Privilege Escalation
  #chaining:
    #- relation: 
      #vector: 
      #description: |
        #Type Here
  #cve:
    #-
  domains:
    - Enterprise
    - Private Cloud
    - Public Cloud
  terrain: |
    A threat actors need an initial access to the system to use PowerShell
    console to execute commands to obfuscate their traffic and activities.
  targets:
    - Remote access
    - Workstations
    - Desktop
  platforms:
    - PowerShell
    - Windows
  severity: Localised incident
  leverage:
    - Dwelling
    - Tampering
  impact:
    - Impairement
  viability: Likely
  description: |
    When working with PowerShell, a threat actor can encode a command or script
    using Base64 or other type of encoding and pass it as a parameter to the
    command line. This technique is useful for obfuscating sensitive
    information or executing complex commands. (ref [1])  
    
    Other possible examples for encoding with PowerShell commands: 

    Encoding a Command with Base64

    1. Create a command as a string. 
    
    ```
    $command = 'dir "C:\Program Files"'
    ```
    
    2. Convert the command to Base64:

    ```pwsh
    $bytes = [System.Text.Encoding]::Unicode.GetBytes($command)
    $encodedCommand = [Convert]::ToBase64String($bytes)
    ```

    Now you can run the encoded command using powershell.exe:

    ```
    powershell.exe -encodedCommand $encodedCommand
    ```
    
    It's also possible to encode domain names, for example: 

    Powershell input:

    ```pwsh
    [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes("'sample_domain.com'"))
    ```

    Threat actors also use PowerShell scripts for faster encoding process and result.  

    An example of Powershell script (ref [2])  
    
    ```pwsh
    param(
    [Parameter()][Alias("un")][string]$Username,
    [Parameter()][Alias("pw")][string]$Password
    )

    Write-Host "Username: $Username"
    Write-Host "Password: $Password"
    ```