name: HTML smuggling technique
criticality: Medium
references:
  public:
    1: https://www.microsoft.com/en-us/security/blog/2021/11/11/html-smuggling-surges-highly-evasive-loader-technique-increasingly-used-in-banking-malware-targeted-attacks
    2: https://www.insecure.in/blog/html-smuggling
    3: https://www.outflank.nl/blog/2018/08/14/html-smuggling-explained
    4: https://www.xorlab.com/en/blog/html-smuggling-how-malicious-actors-use-javascript-and-html-to-fly-under-the-radar
    5: https://www.forcepoint.com/blog/insights/what-is-html-smuggling

metadata:
  uuid: c7ed4fad-a58f-47da-9938-4a673526b3f4
  schema: tvm::2.1
  version: 1
  created: 2025-06-30
  modified: 2025-07-01
  tlp: clear
  #author: 
  #contributors:
    #-
  organisation:
    uuid: 56b0a0f0-b0bc-47d9-bb46-02f80ae2065a
    name: EC DIGIT CSOC

threat:
  actors:
    - name: att&ck::G0016 #[Enterprise] APT29, Blue Kitsune, Cozy Bear, CozyDuke, Dark Halo, IRON HEMLOCK, IRON RITUAL, Midnight Blizzard, NOBELIUM, NobleBaron, SolarStorm, The Dukes, UNC2452, UNC3524, YTTRIUM
    - name: misp::b2056ff0-00b9-482e-b11c-c771daa5f28a #APT29, Group 100, COZY BEAR, The Dukes, Minidionis, SeaDuke, YTTRIUM, IRON HEMLOCK, Grizzly Steppe, G0016, ATK7, Cloaked Ursa, TA421, Blue Kitsune, ITG11, BlueBravo, Nobelium, UAC-0029
      sighting: |
        Notably, HTML smuggling was observed in a spear-phishing campaign
        from the threat actor NOBELIUM used in a Trojan banking malware
        campaign. 
      references:
        - https://www.microsoft.com/en-us/security/blog/2021/11/11/html-smuggling-surges-highly-evasive-loader-technique-increasingly-used-in-banking-malware-targeted-attacks/
  killchain: Defense Evasion
  #killchain: Initial Access
  att&ck:
    - T1190     # Exploit Public-Facing Application
    - T1189     # Drive-by Compromise | HTML smuggling technique can be used to compromise a victim's system through a drive-by download, where the malicious code is executed without the victim's knowledge or consent.
    - T1204     # User Execution      | HTML smuggling can be used to trick users into executing malicious code, potentially leading to further exploitation.
    - T1027.006 # Obfuscated Files or Information: HTML Smuggling
  chaining:
    - relation: sequence::succeeds
      vector: 1a68b5eb-0112-424d-a21f-88dda0b6b8df # Spearphishing Link
      description: |
        A threat actor can send a phishing email to a victim with
        embedded URL leading to an HTML page and further malicious
        smuggling exploitation.

    - relation: sequence::succeeds
      vector: dd5d942c-bac4-4000-b9a6-ca4fef6cfb84 # Spearphishing Attachment
      description: |
        A threat actor used HTML smuggling to deliver a password-protected
        ZIP archive containing a VBScript loader for AsyncRAT in an AI generated
        malware campaign in France.
  #cve:
    #-
  #misp:
    #-
  domains:
    - Enterprise
    - Mobile
  terrain: |
    A threat actor uses a legitimate and native features of
    web page scripting languages as HTML, CSS, JavaScript
    and others. This vulnerability in the page can lead
    to an initial access to a targeted system. 
  targets:
    - Customer
    - End-user
    - Workstations
    - Laptop
    - Web Application Servers
    - Public-Facing Servers
    - Personal Information
    - Remote access
  platforms:
    - Windows
    - iOS
    - Android
  severity: Localised incident
  leverage:
    - Elevation of privilege
    - Information Disclosure
    - Infrastructure Compromise
    - Tampering
  impact:
    - Identity Theft
    - Impairement
    - Data Breach
    - Lose Capabilities
    - Business disruption
  viability: Likely
  description: |
    HTML smuggling is a technique used by attackers to embed a malicious
    code within HTML files, which are then smuggled past security controls,
    such as firewalls, intrusion detection systems, and web application
    firewalls. This is achieved by exploiting the way HTML files are
    processed by web browsers.

    ### How HTML smuggling works?

    HTML smuggling uses legitimate features of HTML5 and JavaScript,
    which are both supported by all modern browsers, to generate malicious
    files behind the firewall. Specifically, HTML smuggling leverages the
    HTML5 “download” attribute for anchor tags, as well as the creation
    and use of a JavaScript Blob to put together the payload downloaded
    into an affected device.

    In HTML5, when a user clicks a link, the “download” attribute lets
    an HTML file automatically download a file referenced in the “href”
    tag. For example, the code below instructs the browser to download
    a malicious document from its location and save it into an own
    device (save “malicious.docx” to “safe.docx”) ref [1].  

    ```html
    <a href="/malware/malicious.docx" download="safe.docx">Click</a>
    ```

    In some of the reports and analysis is mentioned that a threat actor
    can create an HTML file that contains malicious code, such as JavaScript,
    executable files or other type of malicious payload, encoded in a way
    that evades detection by security controls. The HTML file is then sent
    to the victim's web browser, which processes the file and executes the 
    malicious code. The code can be used to download and install malware,
    steal sensitive information (PII or other data of interest, belongings
    to an organisation or a company), or in some cases to fully take control
    of the victim's system ref [2],[3].    

    HTML smuggling can be used for malware delivery, for example in an email
    to the end user when after execution can deploy a Trojan, RAT, a backdoor
    or other type of malware depends on the attacker's goal ref [1]. 

    ### Different types of HTML smuggling

    There are several types of HTML smuggling techniques, for example:

    - CSS smuggling - this involves using Cascading Style Sheets (CSS) to
    embed malicious code within an HTML file.
    - JavaScript smuggling - this involves using JavaScript to embed malicious
    code within an HTML file.
    - HTML5 smuggling - this involves using HTML5 features, such as the
    <canvas> element, to embed malicious code within an HTML file.  
