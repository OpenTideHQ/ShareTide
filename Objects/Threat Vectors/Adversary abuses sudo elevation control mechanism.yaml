name: Adversary abuses sudo elevation control mechanism
criticality: High
references:
  public:
    1: https://steflan-security.com/linux-privilege-escalation-sudo-commands-binaries/
    2: https://gtfobins.github.io/
    3: https://gtfobins.github.io/gtfobins/tar/
    4: https://gtfobins.github.io/gtfobins/pkexec/
  #internal:
    #a: 

metadata:
  uuid: 422098a7-567e-47fe-9e92-9fd3ec6df768
  schema: tvm::2.0
  tlp: clear
  version: 3
  created: 2022-10-27
  modified: 2022-12-21
  organisation:
    uuid: 56b0a0f0-b0bc-47d9-bb46-02f80ae2065a
    name: EC DIGIT CSOC

threat:
  #actors:
    #- 
  killchain: Privilege Escalation
  att&ck:
    - T1548
  domains:
    - Enterprise
  terrain: |
    Threat actor needs root level access to edit the sudoers file.
  targets:
    - Control Server
    - Remote access
  platforms:
    - Linux
  severity: Significant incident
  leverage:
    - Elevation of privilege
    - Dwelling
    - Infrastructure Compromise
  impact:
    - Business disruption
    - Data Breach
    - Identity Theft
    - Impairement
  viability: Likely
  description: |
    Sudo is a command-line utility for Unix and Linux-based systems that can
    provide an effective way to give specific user permissions to run root
    (most powerful) level commands on the system. Unfortunately, some
    misconfigurations in sudo functionality can allow threat actors to escalate
    their privileges to root access.

    If the file /etc/sudoers (used to store all sudo privileges) is modified
    this can grant to the attacker elevation of privileges. Attackers may use
    custom parameters with sudo to edit the sudoers file. For example -f or -l
    can be used to edit this file or list which commands or binaries the
    current user has access to run.

    GTFOBins is a list of Unix binaries which is used by the threat actors to
    bypass local security restrictions in misconfigured systems. GTFOBins
    allows to search for binaries or commands whether they are executed as sudo
    and if they provide access to normally restricted actions. The repo list
    contains 300+ commands that could be abused for different purposes if not
    configured using this filter. The current list is an open collaborative
    project. Link: https://gtfobins.github.io/#+sudo

    Examples: 

    A "tar" option can be exploited to write to arbitrary files (works only for
    GNU tar). If write data to files, it may be used for privileged writes on
    the files ouside a restricted file system. A "tar" command can break out
    from restricted environments, using spawn of an interactive system shell.
    
    Reference: https://gtfobins.github.io/gtfobins/tar/

    tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh

    For GNU tar:
    tar xf /dev/null -I '/bin/sh -c "sh <&2 1>&2"'

    or (for GNU tar when limited command argument injection is available)

    TF=$(mktemp)
    echo '/bin/sh 0<&1' > "$TF"
    tar cf "$TF.tar" "$TF"
    tar xf "$TF.tar" --to-command sh
    rm "$TF"*

    The pkexec command can be exploited to gain a root shell and to access the
    file system, escalate or maintain privilege access. 
    
    Reference: https://gtfobins.github.io/gtfobins/pkexec/
    
    sudo pkexec /bin/sh

    
