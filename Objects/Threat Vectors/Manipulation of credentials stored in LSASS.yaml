name: Manipulation of credentials stored in LSASS
criticality: Medium
references:
  public:
    1: https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/hh994565(v=ws.11)
    2: https://www.volexity.com/blog/2021/03/02/active-exploitation-of-microsoft-exchange-zero-day-vulnerabilities/
    3: https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/rundll32
    4: https://www.sentinelone.com/cybersecurity-101/mimikatz/
    5: https://learn.microsoft.com/id-id/sysinternals/downloads/procdump
    6: https://www.deepinstinct.com/blog/lsass-memory-dumps-are-stealthier-than-ever-before
    7: https://www.reliaquest.com/i/blog/credential-dumping-part-1-a-closer-look-at-vulnerabilities-with-windows-authentication-and-credential-management/
    8: https://www.eideon.com/2017-09-09-THL01-Mimikatz/
    9: https://redcanary.com/threat-detection-report/techniques/lsass-memory/
    10: https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=90010

metadata:
  uuid: 2d0beed6-6520-4114-be1f-24067628e93c
  schema: tvm::2.0
  tlp: clear
  version: 4
  created: 2023-01-31
  modified: 2025-10-01
  organisation:
    uuid: 56b0a0f0-b0bc-47d9-bb46-02f80ae2065a
    name: EC DIGIT CSOC

threat:
  actors:
    - name: att&ck::G0007 #[Enterprise] APT28, FROZENLAKE, Fancy Bear, Forest Blizzard, Group 74, IRON TWILIGHT, Pawn Storm, SNAKEMACKEREL, STRONTIUM, Sednit, Sofacy, Swallowtail, TG-4127, Threat Group-4127, Tsar Team
    - name: misp::5b4ee3ea-eee3-4c8e-8323-85ae32658754 #APT28, Pawn Storm, FANCY BEAR, Sednit, SNAKEMACKEREL, Tsar Team, TG-4127, STRONTIUM, Swallowtail, IRON TWILIGHT, Group 74, SIG40, Grizzly Steppe, G0007, ATK5, Fighting Ursa, ITG05, Blue Athena, TA422, T-APT-12, APT-C-20, UAC-0028, FROZENLAKE, Sofacy, Forest Blizzard, BlueDelta, Fancy Bear, GruesomeLarch
    - name: att&ck::G0037 #[Enterprise] FIN6, Camouflage Tempest, ITG08, Magecart Group 6, Skeleton Spider, TAAL
    - name: misp::647894f6-1723-4cba-aba4-0ef0966d5302 #FIN6, SKELETON SPIDER, ITG08, MageCart Group 6, White Giant, GOLD FRANKLIN, ATK88, G0037, Camouflage Tempest, TA4557
    - name: att&ck::G0065 #[Enterprise] Leviathan, APT40, BRONZE MOHAWK, Gadolinium, Gingham Typhoon, Kryptonite Panda, MUDCARP, TEMP.Jumper, TEMP.Periscope
    - name: misp::5b4b6980-3bc7-11e8-84d6-879aaac37dd9 #APT40, TEMP.Periscope, TEMP.Jumper, Leviathan, BRONZE MOHAWK, GADOLINIUM, KRYPTONITE PANDA, G0065, ATK29, TA423, Red Ladon, ITG09, MUDCARP, ISLANDDREAMS, Gingham Typhoon
    - name: att&ck::G0117 #[Enterprise] Fox Kitten, Lemon Sandstorm, Parisite, Pioneer Kitten, RUBIDIUM, UNC757
    - name: misp::bfb0bc20-5bdf-47ff-b07f-dbd9a3cb9772 #Fox Kitten, PIONEER KITTEN, PARISITE, UNC757, Lemon Sandstorm, RUBIDIUM
    - name: att&ck::G0069 #[Enterprise] MuddyWater, Earth Vetala, MERCURY, Mango Sandstorm, Seedworm, Static Kitten, TA450, TEMP.Zagros
    - name: misp::a29af069-03c3-4534-b78b-7d1a77ea085b #MuddyWater, TEMP.Zagros, Static Kitten, Seedworm, MERCURY, COBALT ULSTER, G0069, ATK51, Boggy Serpens, Mango Sandstorm, TA450, Earth Vetala
  killchain: Credential Access
  att&ck:
    - T1003.001
    - T1218.011
    - T1098
    - T1003
  domains:
    - Enterprise
    - Public Cloud
    - Private Cloud
  terrain: |
    Requires an already compromised Windows endpoint with elevated access
    rights to SYSTEM user.
  targets:
    - API Endpoints
    - Control Server
    - Remote access
    - Desktop
    - Laptop
    - End-user
    - System admin
    - Public-Facing Servers
    - Web Application Servers
  platforms:
    - Windows
    - PowerShell
  severity: Moderate incident
  leverage:
    - Tampering
  impact:
    - Nuisance
  viability: Likely
  description: |
    Credentials can be stored in the Local Security Authority Subsystem
    Service (LSASS) process in memory for use by the account. LSASS stores
    credentials in memory on behalf of users with active Windows sessions.
    LSASS can store user or system credentials in several different ways: 
    Reversibly encrypted plaintext, Kerberos Tickets, NT hashes or LM
    hashes. 

    The threat actors can harvest these credentials with an administrative
    user or SYSTEM. Administrative accounts are used by users to carry out
    tasks that require special permissions, such as installing software or
    renaming a computer and they need higher administrative privileges. In
    the most cases the threat actors are using different tools to manipulate
    the credentials in LSASS process in memory, for example: Mimikatz, Cobalt
    Strike, Impacket, Metasploit, PowerSploit, Empire, Pwdump, Dumpert and
    others.

    Mimikatz is a tool that allows an attacker to extract clear text passwords,
    hash values, and Kerberos tickets from LSASS. The tool can be used to
    retrieve password information for a user account that is currently logged
    into a system, or to extract the hashes of all user accounts on a system,
    which can then be used to perform offline password cracking.
    
    By manipulating LSASS, an attacker can gain access to sensitive information,
    such as passwords and other credentials, and use that information to
    compromise the security of a system or network.

    For example, on thetarget host threat actors can use procdump:
    
    procdump -ma lsass.exe lsass_dump

    Example for a local credential dumping from LSASS memory with Mimikatz
    sekurlsa:

    sekurlsa::Minidump lsassdump.dmp
    sekurlsa::logonPasswords
    
    Example for process dumping memory of lsass.exe to obtain credentials.
    Threat actors are using dynamic-link libraries (DLLs) like Rundll32 to
    manipulate the process in LSASS memory.

    rundll32 C:\windows\system32\comsvcs.dll MiniDump lsass.dmp

    OR

    process == rundll32.exe
    &&
    command_line_includes ('MiniDump')

    Example for a process that access LSASS memory:

    process == ('powershell.exe' || 'taskmgr.exe' || 'rundll32.exe' || 'procdump.exe' 
    || 'procexp.exe' || [other native processes that don’t normally access LSASS]) &&
    cross_process_handle_to ('lsass.exe')

    Threat actors can use PowerShell scripts to request process access to
    lsass.exe process (an example for access to PROCESS_ALL_ACCESS – 0x1F0FFF
    process):

    $Handle = [Uri].Assembly.GetType('Microsoft.Win32.NativeMethods')::OpenProcess(0x1F0FFF, $False, (Get-Process lsass).Id)

    If the key value pair in the registry for LSASS is changed to 1, this
    is an indicator that the passwords are stored in cleartext in LSASS memory.

    Example for a DWORD in the registry: 

    HKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Control/SecurityProviders/WDigest/UseLogonCredentia
