name: Secrets stored in repository
criticality: High
references:
  public:
    1: https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html
    2: https://thehackernews.com/2022/05/how-secrets-lurking-in-source-code-lead.html
    3: https://blog.developer.adobe.com/getting-secrets-out-of-source-code-f24fd7b7a41f
  #internal:
    #a: 
  #reports:
    #-

metadata:
  uuid: ce7194f8-2398-4e79-b964-162ca5ee175b
  schema: tvm::2.0
  version: 1
  created: 2023-04-13
  modified: 2024-04-12
  tlp: clear
  organisation:
    uuid: 56b0a0f0-b0bc-47d9-bb46-02f80ae2065a
    name: EC DIGIT CSOC

threat:
  actors:
    - name: att&ck::G1004 #[Enterprise] LAPSUS$, DEV-0537, Strawberry Tempest
    - name: misp::d9e5be22-1a04-4956-af6c-37af02330980 #LAPSUS, LAPSUS$, DEV-0537, SLIPPY SPIDER, Strawberry Tempest
  killchain: Credential Access
  att&ck:
    - T1213.003 #Data from Information Repositories: Code Repositories
  #chaining:
    #- relation: 
      #vector: 
      #description: |
        #Type Here
  #cve:
    #-
  domains:
    - Enterprise
    - Private Cloud
    - Public Cloud
  terrain: |
    Threat actors are scanning for stored secrets in developer's source code
    repositories leaked by design or by mistake from the engineering teams.  
  targets:
    - Code Repositories
  platforms:
    - Github
    - Gitlab
    - Bitbucket
  severity: Localised incident
  leverage:
    - Information Disclosure
    - Infrastructure Compromise
    - Dwelling
    - Elevation of privilege
  impact:
    - Data Breach
    - Business disruption
  viability: Environment dependent
  description: |
    Secrets are digital authentication credentials such as encryption keys,
    passwords, private keys, AWS secrets, Oauth tokens, JWT tokens, Slack
    tokens, API secrets and others. Many of the organizations still keep
    these secrets in plain-text hardcoded into source code, configuration
    files or some of the configuration tools. (ref [1])    

    Many developers use GitHub for personal projects and can happen to
    leak by mistake corporate credentials even without rrealizing this.
    Threat actors usually look first at the public repositories on GitHub,
    and then at the ones owned by its employees. They use the collected data
    to access company resources and databases and to compromise further the
    infrastructure. They may use the collected data also for extortion
    purposes threaten to publish it in public. (ref [2])  

    This may pose a risk because the secrets could be stolen or leaked
    without the knowledge of the internal staff. For example, they may be
    accidentally or inadvertently committed in to the source code repository.
    Once the secret is saved in history it is accessible and exposed to any 
    malicious actor with read access.  

    As a good practice make sure secrets are never stored in source code
    and Software Control Management (SCM) or other configuration tools.
    (ref [3])

    Examples for secretes stored in repositories are:  
    
    - Application Programming Interface (API) keys
    - Database credentials
    - Identity and Access Management (IAM) permissions
    - Secure Shell (SSH) keys
    - Certificates    

    There is a growing need for organizations to centralize the storage,
    provisioning, auditing, rotation and management of secrets to control
    access to secrets and prevent them from leaking and compromising the
    organization. Often, services share the same secrets, which makes
    identifying the source of compromise or leak challenging. (ref [1])  


