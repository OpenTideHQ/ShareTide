name: Manipulation of credentials stored in plain text files
criticality: Medium
references:
  public:
    1: https://owasp.org/www-community/vulnerabilities/Password_Plaintext_Storage
    2: https://www.digitalcitizen.life/which-windows-passwords-credentials-can-be-easily-cracked/
    3: https://www.passcamp.com/blog/dangers-of-storing-and-sharing-passwords-in-plaintext/
    4: https://dingtoffee.medium.com/clear-text-password-scanner-58fef77e4b2d
    5: https://cwe.mitre.org/data/definitions/256.html
    6: https://cwe.mitre.org/data/definitions/312.html
    7: https://woshub.com/how-to-get-plain-text-passwords-of-windows-users/#h2_4
    8: https://thehackernews.com/2022/11/apt29-exploited-windows-feature-to.html
    9: https://malpedia.caad.fkie.fraunhofer.de/actor/apt37
    10: https://know.netenrich.com/blog/fin6-know-your-threat-actor/
    11: https://techcrunch.com/2022/03/23/microsoft-lapsus-hack-source-code/?guccounter=1&guce_referrer=aHR0cHM6Ly93d3cuYmluZy5jb20v&guce_referrer_sig=AQAAACu6oXda6fU_vTO_ITnANFi1ZPISubNID3kQVVIIRBVs66RYTxjTth2PCAn5DQkoUmnlR2cSzjKPPbVrUcJN1BWJpXhKL_I0Go8-xQeeROvzIhzNuEdbll2m7OY9PHeCnsjkIZJkUOrceGKkt6IAzdTE4MNMWs83kzZwWQa2UcdD
    12: https://www.fbi.gov/contact-us/field-offices/seattle/news/stories/how-cyber-crime-group-fin7-attacked-and-stole-data-from-hundreds-of-us-companies
  #internal:
    #a: 
  #restricted:
    #A: 
  #reports:
    #-

metadata:
  uuid: 82dce94c-7b18-4cb9-bae0-56716b580418
  schema: tvm::2.0
  tlp: clear
  version: 3
  created: 2023-01-30
  modified: 2023-02-03
  organisation:
    uuid: 56b0a0f0-b0bc-47d9-bb46-02f80ae2065a
    name: EC DIGIT CSOC

threat:
  actors:
    - name: att&ck::G0016 #[Enterprise] APT29, Blue Kitsune, Cozy Bear, CozyDuke, Dark Halo, IRON HEMLOCK, IRON RITUAL, Midnight Blizzard, NOBELIUM, NobleBaron, SolarStorm, The Dukes, UNC2452, UNC3524, YTTRIUM
    - name: misp::2ee5ed7a-c4d0-40be-a837-20817474a15b #UNC2452, DarkHalo, StellarParticle, NOBELIUM, Solar Phoenix, Midnight Blizzard
    - name: att&ck::G0067 #[Enterprise] APT37, Group123, InkySquid, Reaper, Ricochet Chollima, ScarCruft, TEMP.Reaper
    - name: misp::50cd027f-df14-40b2-aa22-bf5de5061163 #APT37, APT 37, Group 123, Group123, InkySquid, Operation Daybreak, Operation Erebus, Reaper Group, Reaper, Red Eyes, Ricochet Chollima, ScarCruft, Venus 121, ATK4, G0067, Moldy Pisces, APT-C-28
    - name: att&ck::G0037 #[Enterprise] FIN6, Camouflage Tempest, ITG08, Magecart Group 6, Skeleton Spider, TAAL
    - name: misp::647894f6-1723-4cba-aba4-0ef0966d5302 #FIN6, SKELETON SPIDER, ITG08, MageCart Group 6, White Giant, GOLD FRANKLIN, ATK88, G0037, Camouflage Tempest, TA4557
    - name: att&ck::G1004 #[Enterprise] LAPSUS$, DEV-0537, Strawberry Tempest
    - name: misp::d9e5be22-1a04-4956-af6c-37af02330980 #LAPSUS, LAPSUS$, DEV-0537, SLIPPY SPIDER, Strawberry Tempest
    - name: att&ck::G0046 #[Enterprise] FIN7, Carbon Spider, ELBRUS, GOLD NIAGARA, ITG14, Sangria Tempest
    - name: misp::00220228-a5a4-4032-a30d-826bb55aa3fb #FIN7, CARBON SPIDER, GOLD NIAGARA, Calcium, ATK32, G0046, G0008, Coreid, Carbanak, Sangria Tempest, ELBRUS, Carbon Spider, JokerStash
    - name: att&ck::G0102 #[Enterprise] Wizard Spider, DEV-0193, FIN12, GOLD BLACKBURN, Grim Spider, ITG23, Periwinkle Tempest, TEMP.MixMaster, UNC1878
    - name: misp::3c2bb7d7-a085-4594-adc7-4a20cf724abb #UNC1878
  killchain: Credential Access
  att&ck:
    - T1552
    - T1565
    - T1003
    - T1555.003
    - T1110.002
    - T1003.007
  domains:
    - Enterprise
    - Private Cloud
    - Public Cloud
  terrain: |
    A threat actor is using an already compromised Windows endpoint.
  targets:
    - End-user
    - Desktop
    - Laptop
    - Workstations
    - Control Server
    - Remote access
    - System admin
    - Developer
    - Production Database
    - Public-Facing Servers
    - Web Application Servers
  platforms:
    - Windows
  severity: Moderate incident
  leverage:
    - Tampering
  impact:
    - Nuisance
  viability: Likely
  description: |
    Threat actors are searching for credentials stored in plain text, usually in
    an application's properties, configuration files, system memory or other
    places in the system. Storing a plain text password could lead to data
    leakage because, for example when the passwords are stored in clear text
    in a configuration file everyone who has read access to the file can see
    and steal the passwords. In most cases, even storage of a plaintext
    password in a memory is considered as a security risk if the password
    is not cleared immediately after it is used. Good password management
    policies require that a password shouldn't be stored in a plaintext.

    In some cases the user's passwords are stored in plain text when a program
    application or system file crates and saves them automatically in a file
    without encryption. In other cases the credentials can be stored in clear 
    text by user's mistake. Threat actors are using different methods like:
    password cracking, dictionary attack, social engineering and phishing
    attacks, man in the middle attack, malware injections and others to steal
    and manipulate credentials stored in a plain text.

    One example of manipulation of credentials stored in plain text files is by
    using a technique called "password cracking." This involves using a computer
    program to repeatedly guess a password or its hash until the correct one is
    found. If the plain text file containing the credentials is not properly
    secured, an attacker could gain access to sensitive information such as
    username and password combinations. Threat actors are using variety of
    different tools to crack user's credentials, for example: John the Ripper,
    Hashcat, Aircrack-ng, Cain and Abel, Mimikatz, custom python scripts and
    others. 

    Example for a code that reads a password from a properties file and uses
    the password to connect to a database:

    Properties prop = new Properties();
    prop.load(new FileInputStream("config.properties"));
    String password = prop.getProperty("password");

    DriverManager.getConnection(url, usr, password);

    Example for a python script scanning for files stored in a clear text:

    # put your path here 
    # Network SMB path you want to search 
    root_dir = ("xxxxxx", "etc.")
    # location where you want to put the result 
    stored_dir = 'xxxxxxxxx'
    # exception you want to filter
    exception_path = ["snapshot"]
