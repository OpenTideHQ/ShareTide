name: Mimikatz browser cookie extraction
criticality: High
references:
  public:
    1: https://news.sophos.com/en-us/2022/08/18/cookie-stealing-the-new-perimeter-bypass/
    2: https://medium.com/@CyberChiX/understanding-pass-the-cookie-attacks-strengthening-security-with-mfa-layered-protection-c6df92c32d3b
    3: https://www.coresecurity.com/core-labs/articles/reading-dpapi-encrypted-keys-mimikatz 
  #internal:
    #a: 
  #reports:
    #-

metadata:
  uuid: 630f420b-b844-42f1-8be1-d367b3734024
  schema: tvm::2.0
  version: 1
  created: 2024-11-05
  modified: 2024-11-05
  tlp: clear
  organisation:
    uuid: 56b0a0f0-b0bc-47d9-bb46-02f80ae2065a
    name: EC DIGIT CSOC

threat:
  actors:
    - name: att&ck::G0016 #[Enterprise] APT29, Blue Kitsune, Cozy Bear, CozyDuke, Dark Halo, IRON HEMLOCK, IRON RITUAL, Midnight Blizzard, NOBELIUM, NobleBaron, SolarStorm, The Dukes, UNC2452, UNC3524, YTTRIUM
    - name: misp::2ee5ed7a-c4d0-40be-a837-20817474a15b #UNC2452, DarkHalo, StellarParticle, NOBELIUM, Solar Phoenix, Midnight Blizzard
    - name: att&ck::G0034 #[Enterprise] Sandworm Team, APT44, BlackEnergy (Group), ELECTRUM, FROZENBARENTS, IRIDIUM, IRON VIKING, Quedagh, Seashell Blizzard, Telebots, Voodoo Bear
    - name: misp::d52ca4c4-d214-11e8-8d29-c3e7cb78acce #GreyEnergy
  killchain: Credential Access
  att&ck:
    - T1111 #Multi-Factor Authentication Interception
  chaining:
    - relation: sequence::succeeds
      vector: 7351e2ca-e198-427c-9cfa-202df36f6e2a #Mimikatz execution on compromised endpoint
      description: |
        #Endpoint has been compromised using Mimikatz
    - relation: atomicity::implements
      vector: b0d6bf74-b204-4a48-9509-4499ed795771 #Pass-the-cookie attack
      description: |
        Technique used to steal browser cookies 
  #cve:
    #-
  #misp:
    #-
  domains:
    - Enterprise
    - Public Cloud
    - Private Cloud
    - SaaS
  terrain: |
     Attacker must compromise a user endpoint and exfiltrate the browser cookies.
     Cookies can be found on disk, in the process memory of the browser, and in
     network traffic to remote systems.
  targets:
    - Auth token
    - Cloud Portal
    - End-user
    - Identity Services
  platforms:
    - EU Login
    - Office 365
    - Azure AD
  severity: Moderate incident
  leverage:
    - Elevation of privilege
    - Spoofing
  impact:
    - Identity Theft
    - Impairement
  viability: Environment dependent
  description: |
    We describe how an attacker could extract cookies using the example of the Chrome browser.

    Chrome stores cookies in the following location in a SQLite database:
    %localappdata%GoogleChromeUser DataDefaultCookies

    The cookies for a given user are encrypted using keys tied to that user via the
    Microsoft Data Protection API (DPAPI). To access the cookie database and decrypt 
    the cookies, an adversary can use the following mimikatz command:

    dpapi::chrome /in:"%localappdata%GoogleChromeUser DataDefaultCookies" /unprotect

    Alternatively, adversaries could execute the following from the command line:
    mimikatz.exe privilege::debug log "dpapi::chrome /in:%localappdata%googlechromeUSERDA~1defaultcookies /unprotect" exit

    Using either of these options will provide the browser cookies.


    ## PtC attack scenario

    1. A sysadmin uses regularly the Azure management portal, MFA is enabled with the authenticator
       app on his mobile device.
        
       He has clicked on a phishing email or his system has been compromised by some other means,
       and now an attacker is able to execute code within the user context.

    2. Execute Mimikatz when running as the user
       mimikatz.exe privilege::debug log "dpapi::chrome /in:%localappdata%googlechromeUSERDA~1defaultcookies /unprotect" exit
        
       Attackers look for the Azure authentication cookies, including ESTSAUTH, ESTSAUTHPERSISTENT and ESTSAUTHLIGHT.
        
    3. To pass the cookies into another session to take over the user account, opening Chrome on another server
       and use the “Inspect” interface to insert a cookie.
        
        Add the ESTSAUTH or If ESTSAUTHPERSISTENT cookie. If ESTSAUTHPERSISTENT is available, it is preferred because
        it is generated by the “Stay Signed In” option.     

    4. Refresh the page and now attackers are logged into Azure as the user — no MFA required.
